00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2019 8:41:22 PM

00000000                             1  * --------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Matthew Phan, Jakob Delzer, Jarod Guerrero
00000000                             4  * Date       : March 17, 2019
00000000                             5  
00000000                             6  *---------------------------------------------------------------------------
00001000                             7      ORG    $1000    
00001000                             8  *---------------------------------------------------------------------------
00001000                             9  
00001000                            10  START:
00001000                            11      ***********************************************************
00001000                            12      
00001000  4EB9 0000100E             13      JSR     loadIO
00001006  6000 015C                 14      BRA     assignStartAddress
0000100A                            15  
0000100A  FFFF FFFF                 16      SIMHALT
0000100E                            17    
0000100E                            18  * Opens up the config file, reads in the two addresses, and loads them into the
0000100E                            19  * variables startingAddress and endingAddress  
0000100E                            20  loadIO
0000100E                            21      *open the cfg file
0000100E  103C 0033                 22      MOVE.B  #51, D0
00001012  43F9 000050B9             23      LEA     config, A1
00001018  4E4F                      24      TRAP    #15
0000101A  23C1 000050C4             25      MOVE.L  D1, fileID      * save file ID
00001020                            26      
00001020                            27      *reading from the file
00001020  43F9 000050C8             28      LEA     startingAddress, A1
00001026  2239 000050C4             29      MOVE.L  fileID, D1
0000102C  343C 0008                 30      MOVE.W  #AddressLength, D2
00001030  103C 0035                 31      MOVE.B  #53, D0
00001034  4E4F                      32      TRAP    #15
00001036                            33      
00001036  2649                      34      MOVE.L  A1,A3
00001038                            35      
00001038  43F9 000050D0             36      LEA     inbetweenAddress, A1
0000103E  2239 000050C4             37      MOVE.L  fileID, D1
00001044  343C 0002                 38      MOVE.W  #2, D2
00001048  103C 0035                 39      MOVE.B  #53, D0
0000104C  4E4F                      40      TRAP    #15
0000104E                            41      
0000104E  43F9 000050D2             42      LEA     endingAddress, A1
00001054  2239 000050C4             43      MOVE.L  fileID, D1
0000105A  343C 0008                 44      MOVE.W  #AddressLength, D2
0000105E  103C 0035                 45      MOVE.B  #53, D0
00001062  4E4F                      46      TRAP    #15
00001064                            47      
00001064  2849                      48      MOVE.L  A1,A4
00001066                            49      
00001066                            50      
00001066                            51      *close the file after reading
00001066  103C 0038                 52      MOVE.B  #56, D0
0000106A  4E4F                      53      TRAP    #15
0000106C                            54      
0000106C                            55      *converting the starting string to hex and storing the value at D3
0000106C  227C 000050C8             56      MOVEA.L     #startingAddress, A1
00001072  4EB9 0000111C             57      JSR         AsciiToHex
00001078  2607                      58      MOVE.L      D7, D3
0000107A                            59      
0000107A                            60      *converting the ending string to hex and storing the value at D4
0000107A  227C 000050D2             61      MOVEA.L     #endingAddress, A1
00001080  4EB9 0000111C             62      JSR         AsciiToHex
00001086  2807                      63      MOVE.L      D7, D4
00001088                            64  
00001088                            65      *No File Error
00001088  0C83 FFFFFFFF             66      CMPI.L    #$FFFFFFFF, D3
0000108E  6700 007C                 67      BEQ     CfgErrorNotFound
00001092  0C84 FFFFFFFF             68      CMPI.L    #$FFFFFFFF, D4
00001098  6700 0072                 69      BEQ     CfgErrorNotFound
0000109C                            70      
0000109C                            71      *odd error
0000109C  0803 0000                 72      BTST #0, D3
000010A0  6600 003A                 73      BNE  CfgErrorOdd
000010A4  0804 0000                 74      BTST #0, D4
000010A8  6600 0032                 75      BNE  CfgErrorOdd
000010AC                            76      
000010AC                            77      *Out of range Error
000010AC  0C83 00FFFFFF             78      CMPI.L    #$FFFFFF, D3
000010B2  6E00 0038                 79      BGT    CfgErrorOutofRange
000010B6  0C84 00FFFFFF             80      CMPI.L    #$FFFFFF, D4
000010BC  6E00 002E                 81      BGT     CfgErrorOutofRange
000010C0                            82      
000010C0  0C83 00000000             83      CMPI.L    #$00000000, D3
000010C6  6D00 0024                 84      BLT    CfgErrorOutofRange
000010CA  0C84 00000000             85      CMPI.L    #$00000000, D4
000010D0  6D00 001A                 86      BLT     CfgErrorOutofRange
000010D4                            87      
000010D4                            88      *Ending smaller than starting address error
000010D4  B883                      89      CMP.L D3, D4
000010D6  6D00 0024                 90      BLT CfgErrorNotBigger
000010DA                            91       
000010DA  4E75                      92      RTS 
000010DC                            93  
000010DC                            94  * prints an error if the address is odd    
000010DC                            95  CfgErrorOdd
000010DC  43F9 000050DA             96      LEA MESSAGE1  , A1
000010E2  103C 000E                 97      MOVE.B  #14,D0
000010E6  4E4F                      98      TRAP    #15
000010E8  FFFF FFFF                 99      SIMHALT
000010EC                           100  
000010EC                           101  * prints an error if the address is out of range 
000010EC                           102  CfgErrorOutofRange
000010EC  43F9 000050FF            103      LEA MESSAGE2  , A1
000010F2  103C 000E                104      MOVE.B  #14,D0
000010F6  4E4F                     105      TRAP    #15
000010F8  FFFF FFFF                106      SIMHALT
000010FC                           107  
000010FC                           108  * prints an address if the ending address is not greater than
000010FC                           109  * the starting address   
000010FC                           110  CfgErrorNotBigger
000010FC  43F9 0000512D            111      LEA MESSAGE3  , A1
00001102  103C 000E                112      MOVE.B  #14,D0
00001106  4E4F                     113      TRAP    #15
00001108  FFFF FFFF                114      SIMHALT
0000110C                           115  
0000110C                           116  *prints an address if the file could not be found
0000110C                           117  CfgErrorNotFound
0000110C  43F9 00005168            118      LEA MESSAGE4  , A1
00001112  103C 000E                119      MOVE.B  #14,D0
00001116  4E4F                     120      TRAP    #15
00001118  FFFF FFFF                121      SIMHALT
0000111C                           122        
0000111C                           123      
0000111C                           124      *----------------------------------------------------------------------------------
0000111C                           125  * Method Name: AsciiToHex
0000111C                           126  * Written by : Berger, Modified by Nash
0000111C                           127  * Date       : 3/1/2019
0000111C                           128  * Description: Converts chars '0'-'9' and 'a'-'f' to 0-9,a-F
0000111C                           129  *              Transforms/unpacks 8 chars (8b each) pointed to by A1 into 
0000111C                           130  *              its (4b each) equivalent hex value 
0000111C                           131  *  
0000111C                           132  *  Preconditions & Input
0000111C                           133  *       A1 (input) points to a memory buffer holding 8 ascii chars (not null-terminated) 
0000111C                           134  *       This function calls another function (strip_ascii)
0000111C                           135  *
0000111C                           136  *  Postconditions & Output
0000111C                           137  *       D7 (output) holds the converted value 
0000111C                           138  *       Caller-Saved : D0 is temp, D6 is a loop var
0000111C                           139  *----------------------------------------------------------------------------------
0000111C                           140  AsciiToHexRegList REG D0,D6
0000111C                           141  AsciiToHex     
0000111C  48E7 8000                142      MOVEM.L asciiToHexRegList, -(SP)  *save context
00001120  4287                     143      CLR.L D7 * clear our return value
00001122  7C08                     144      MOVE.L #8, D6 ; and set up our loop counter
00001124                           145  
00001124                           146  chrLoop
00001124  1019                     147      MOVE.B (A1)+,D0 * Get the first byte
00001126  4EB9 0000113E            148      jsr strip_ascii * Get rid of the ascii code    
0000112C  8E40                     149      OR.W D0,D7 * Load the bits into D7
0000112E                           150      
0000112E  5306                     151      subI.B #1,D6  *decrement our loop variable
00001130  6700 0006                152      BEQ chrDone   *skip shifting if we are done
00001134                           153      
00001134  E987                     154      ASL.L #4,D7 * shift left 4 bits to prepare for next byte
00001136  60EC                     155      BRA chrLoop
00001138                           156  
00001138                           157  chrDone
00001138  4CDF 0001                158      MOVEM.L (SP)+,asciiToHexRegList 
0000113C  4E75                     159      RTS
0000113E                           160  
0000113E                           161  
0000113E                           162  **********************************************************************
0000113E                           163  * SUBROUTINE: strip_ascii
0000113E                           164  * remove the ascii code from the digits 0-9,a-f, or A-F
0000113E                           165  * Input Parameters: <D0> = ascii code
0000113E                           166  *
0000113E                           167  * Return parameters: D0.B = number 0...F, returned as 00...0F
0000113E                           168  * Registers used internally: D0
0000113E                           169  * Assumptions: D0 contains $30-$39, $41-$46 or $61-66
0000113E                           170  *
0000113E                           171  ***********************************************************************
0000113E                           172  strip_ascii
0000113E  B03C 0039                173        CMP.B #$39,D0 * Is it in range of 0-9?
00001142  6F00 001A                174        BLE sub30 * Its a number
00001146  B03C 0046                175        CMP.B #$46,D0 * Is is A...F?
0000114A  6F00 000A                176        BLE sub37 * Its A...F
0000114E  0400 0057                177        SUB.B #$57,D0 * Its a...f
00001152  6000 000E                178        BRA ret_sa * Go back
00001156  0400 0037                179  sub37 SUB.B #$37,D0 * Strip 37
0000115A  6000 0006                180        BRA ret_sa * Go back
0000115E  0400 0030                181  sub30 SUB.B #$30,D0 * Strip 30
00001162  4E75                     182  ret_sa RTS * Go back
00001164                           183  
00001164                           184  
00001164                           185  *********************************************************************************
00001164                           186  * Method Name: assignStartAddress
00001164                           187  * Description: Sets start address to A6, ending address to a location in memory
00001164                           188  * Clears all data registers. Loads in our premade buffer into A4 and A5
00001164                           189  * Preconditions:  starting address in D3, ending address in D4
00001164                           190  * Postconditions: Starting address in A6
00001164                           191  *********************************************************************************
00001164                           192  assignStartAddress
00001164  2C43                     193      MOVE.L  D3,A6
00001166  23C4 000050D2            194      MOVE.L  D4,endingAddress
0000116C                           195  
0000116C  4240                     196      CLR     D0
0000116E  4241                     197      CLR     D1
00001170  4242                     198      CLR     D2
00001172  4244                     199      CLR     D4
00001174  4245                     200      CLR     D5
00001176  4246                     201      CLR     D6
00001178  4247                     202      CLR     D7
0000117A                           203          
0000117A  41F9 00005264            204      LEA     DataArray,A0
00001180  2848                     205      MOVE.L  A0, A4
00001182  2A48                     206      MOVE.L  A0, A5            
00001184  4243                     207      CLR     D3
00001186                           208      
00001186  6000 0002                209      BRA     startCode
0000118A                           210  
0000118A                           211  *********************************************************************************
0000118A                           212  * Method Name: startCode
0000118A                           213  * Description: Runs all start methods to set up the dissassembler to start reading
0000118A                           214  * instructions and print them out. Loads our string buffer into A1
0000118A                           215  * Preconditions:  A4, A5 pointing at buffer, A6 pointing at memory address
0000118A                           216  *********************************************************************************   
0000118A                           217  startCode
0000118A  43F9 0000532C            218      LEA     Buffer,A1
00001190  220C                     219      MOVE.L  A4,D1
00001192  4EB9 00001548            220      JSR     clear
00001198                           221      
00001198  4EB9 000011D8            222      JSR     convertAddressToString
0000119E                           223      
0000119E  4EB9 000013FC            224      JSR     checkEndAddress
000011A4                           225  
000011A4  4EB9 000013D0            226      JSR     extendData
000011AA                           227      
000011AA  6000 03C0                228      BRA     getOPCode
000011AE                           229  
000011AE                           230  *********************************************************************************
000011AE                           231  * Method Name: askForNextCode
000011AE                           232  * Description: Runs all start methods to set up the dissassembler to start reading
000011AE                           233  * instructions and print them out. Loads our string buffer into A1. Also prints out
000011AE                           234  * whatever is in the string buffer
000011AE                           235  * Preconditions:  A1 contains a printable string
000011AE                           236  *********************************************************************************   
000011AE                           237  askForNextCode
000011AE                           238      *******print from data here*****
000011AE  4EB9 00001842            239      JSR     printBuffer
000011B4                           240      
000011B4  43F9 0000532C            241      LEA     Buffer,A1
000011BA  220C                     242      MOVE.L  A4,D1
000011BC  4EB9 00001548            243      JSR     clear
000011C2                           244      
000011C2  4EB9 000011D8            245      JSR     convertAddressToString
000011C8                           246  
000011C8  4EB9 000013FC            247      JSR     checkEndAddress
000011CE                           248  
000011CE                           249      
000011CE  4EB9 000013D0            250      JSR     extendData
000011D4                           251      
000011D4  6000 0396                252      BRA     getOPCode
000011D8                           253  
000011D8                           254  *********************************************************************************
000011D8                           255  * Method Name: convertAddressToString
000011D8                           256  * Description: Takes each hex value from A6 and converts it into a printable
000011D8                           257  * character. Adds that character to buffer.
000011D8                           258  * Preconditions:  A6 pointing at correct address location
000011D8                           259  *********************************************************************************       
000011D8                           260  convertAddressToString
000011D8  200E                     261      MOVE.L  A6,D0
000011DA  E088                     262      LSR.L   #$8,D0
000011DC  E088                     263      LSR.L   #$8,D0
000011DE  E088                     264      LSR.L   #$8,D0
000011E0  E888                     265      LSR.L   #$4,D0
000011E2  4EB9 00001270            266      JSR     doEachHex
000011E8                           267      
000011E8  200E                     268      MOVE.L  A6,D0
000011EA  E088                     269      LSR.L   #$8,D0
000011EC  E088                     270      LSR.L   #$8,D0
000011EE  E088                     271      LSR.L   #$8,D0
000011F0  C0BC 0000000F            272      AND.L   #$0000000F,D0
000011F6  4EB9 00001270            273      JSR     doEachHex
000011FC                           274      
000011FC  200E                     275      MOVE.L  A6,D0
000011FE  E088                     276      LSR.L   #$8,D0
00001200  E088                     277      LSR.L   #$8,D0
00001202  E888                     278      LSR.L   #$4,D0
00001204  C0BC 0000000F            279      AND.L   #$0000000F,D0
0000120A  4EB9 00001270            280      JSR     doEachHex
00001210                           281      
00001210  200E                     282      MOVE.L  A6,D0
00001212  E088                     283      LSR.L   #$8,D0
00001214  E088                     284      LSR.L   #$8,D0
00001216  C0BC 0000000F            285      AND.L   #$0000000F,D0
0000121C  4EB9 00001270            286      JSR     doEachHex
00001222                           287      
00001222  200E                     288      MOVE.L  A6,D0
00001224  E088                     289      LSR.L   #$8,D0
00001226  E888                     290      LSR.L   #$4,D0
00001228  C0BC 0000000F            291      AND.L   #$0000000F,D0
0000122E  4EB9 00001270            292      JSR     doEachHex
00001234                           293      
00001234  200E                     294      MOVE.L  A6,D0
00001236  E088                     295      LSR.L   #$8,D0
00001238  C0BC 0000000F            296      AND.L   #$0000000F,D0
0000123E  4EB9 00001270            297      JSR     doEachHex
00001244                           298      
00001244  200E                     299      MOVE.L  A6,D0
00001246  E888                     300      LSR.L   #$4,D0
00001248  C0BC 0000000F            301      AND.L   #$0000000F,D0
0000124E  4EB9 00001270            302      JSR     doEachHex
00001254                           303      
00001254  200E                     304      MOVE.L  A6,D0
00001256  C0BC 0000000F            305      AND.L   #$0000000F,D0
0000125C  4EB9 00001270            306      JSR     doEachHex
00001262                           307      
00001262  45F9 0000541F            308      LEA     space,A2
00001268  4EB9 0000183E            309      JSR     addBuffer
0000126E                           310      
0000126E  4E75                     311      RTS
00001270                           312  
00001270                           313  *********************************************************************************
00001270                           314  * Method Name: doEachHex
00001270                           315  * Description: Compares a byte in D0 to a value and adds the correct hex value
00001270                           316  * to our string buffer
00001270                           317  * Preconditions:  D0 contains the current hex value
00001270                           318  *********************************************************************************       
00001270                           319  doEachHex
00001270  0C00 0000                320      CMPI.B  #$00,D0
00001274  6700 007A                321      BEQ     write0
00001278                           322      
00001278  0C00 0001                323      CMPI.B  #$01,D0
0000127C  6700 0080                324      BEQ     write1
00001280                           325      
00001280  0C00 0002                326      CMPI.B  #$02,D0
00001284  6700 0086                327      BEQ     write2
00001288                           328      
00001288  0C00 0003                329      CMPI.B  #$03,D0
0000128C  6700 008C                330      BEQ     write3
00001290                           331      
00001290  0C00 0004                332      CMPI.B  #$04,D0
00001294  6700 0092                333      BEQ     write4
00001298                           334      
00001298  0C00 0005                335      CMPI.B  #$05,D0
0000129C  6700 0098                336      BEQ     write5
000012A0                           337      
000012A0  0C00 0006                338      CMPI.B  #$06,D0
000012A4  6700 009E                339      BEQ     write6
000012A8                           340      
000012A8  0C00 0007                341      CMPI.B  #$07,D0
000012AC  6700 00A4                342      BEQ     write7
000012B0                           343      
000012B0  0C00 0008                344      CMPI.B  #$08,D0
000012B4  6700 00AA                345      BEQ     write8
000012B8                           346      
000012B8  0C00 0009                347      CMPI.B  #$09,D0
000012BC  6700 00B0                348      BEQ     write9
000012C0                           349      
000012C0  0C00 000A                350      CMPI.B  #$0A,D0
000012C4  6700 00B6                351      BEQ     writeA
000012C8                           352      
000012C8  0C00 000B                353      CMPI.B  #$0B,D0
000012CC  6700 00BC                354      BEQ     writeB
000012D0                           355      
000012D0  0C00 000C                356      CMPI.B  #$0C,D0
000012D4  6700 00C2                357      BEQ     writeC
000012D8                           358      
000012D8  0C00 000D                359      CMPI.B  #$0D,D0
000012DC  6700 00C8                360      BEQ     writeD
000012E0                           361      
000012E0  0C00 000E                362      CMPI.B  #$0E,D0
000012E4  6700 00CE                363      BEQ     writeE
000012E8                           364      
000012E8  0C00 000F                365      CMPI.B  #$0F,D0
000012EC  6700 00D4                366      BEQ     writeF
000012F0                           367  
000012F0                           368  *********************************************************************************
000012F0                           369  * Method Name: write0 - writeF
000012F0                           370  * Description: Adds a letter to our string buffer
000012F0                           371  *********************************************************************************       
000012F0                           372  write0
000012F0  45F9 0000540F            373      LEA     Number0,A2
000012F6  4EB9 0000183E            374      JSR     addBuffer
000012FC  4E75                     375      RTS
000012FE                           376  write1
000012FE  45F9 00005410            377      LEA     Number1,A2
00001304  4EB9 0000183E            378      JSR     addBuffer
0000130A  4E75                     379      RTS
0000130C                           380  write2
0000130C  45F9 00005411            381      LEA     Number2,A2
00001312  4EB9 0000183E            382      JSR     addBuffer
00001318  4E75                     383      RTS
0000131A                           384  write3
0000131A  45F9 00005412            385      LEA     Number3,A2
00001320  4EB9 0000183E            386      JSR     addBuffer
00001326  4E75                     387      RTS
00001328                           388  write4
00001328  45F9 00005413            389      LEA     Number4,A2
0000132E  4EB9 0000183E            390      JSR     addBuffer
00001334  4E75                     391      RTS
00001336                           392  write5
00001336  45F9 00005414            393      LEA     Number5,A2
0000133C  4EB9 0000183E            394      JSR     addBuffer
00001342  4E75                     395      RTS
00001344                           396  write6
00001344  45F9 00005415            397      LEA     Number6,A2
0000134A  4EB9 0000183E            398      JSR     addBuffer
00001350  4E75                     399      RTS
00001352                           400  write7
00001352  45F9 00005416            401      LEA     Number7,A2
00001358  4EB9 0000183E            402      JSR     addBuffer
0000135E  4E75                     403      RTS
00001360                           404  write8
00001360  45F9 00005417            405      LEA     Number8,A2
00001366  4EB9 0000183E            406      JSR     addBuffer
0000136C  4E75                     407      RTS
0000136E                           408  write9
0000136E  45F9 00005418            409      LEA     Number9,A2
00001374  4EB9 0000183E            410      JSR     addBuffer
0000137A  4E75                     411      RTS
0000137C                           412  writeA
0000137C  45F9 000053F5            413      LEA     LetterA,A2
00001382  4EB9 0000183E            414      JSR     addBuffer
00001388  4E75                     415      RTS
0000138A                           416  writeB
0000138A  45F9 000053F6            417      LEA     LetterB,A2
00001390  4EB9 0000183E            418      JSR     addBuffer
00001396  4E75                     419      RTS
00001398                           420  writeC
00001398  45F9 000053F7            421      LEA     LetterC,A2
0000139E  4EB9 0000183E            422      JSR     addBuffer
000013A4  4E75                     423      RTS
000013A6                           424  writeD
000013A6  45F9 000053F8            425      LEA     LetterD,A2
000013AC  4EB9 0000183E            426      JSR     addBuffer
000013B2  4E75                     427      RTS
000013B4                           428  writeE
000013B4  45F9 000053F9            429      LEA     LetterE,A2
000013BA  4EB9 0000183E            430      JSR     addBuffer
000013C0  4E75                     431      RTS
000013C2                           432  writeF
000013C2  45F9 000053FA            433      LEA     LetterF,A2
000013C8  4EB9 0000183E            434      JSR     addBuffer
000013CE  4E75                     435      RTS    
000013D0                           436  
000013D0                           437  *********************************************************************************
000013D0                           438  * Method Name: extendData
000013D0                           439  * Description: Reads in 4 hex values from memory and converts them into their
000013D0                           440  * respective binary equivilant. Checks if we are exceeding ending address
000013D0                           441  * Postconditions:  A4 now points at next 2 bits. A5 points at end of the bits we converted
000013D0                           442  *********************************************************************************       
000013D0                           443  extendData
000013D0  1C16                     444      MOVE.B  (A6),D6
000013D2  E88E                     445      LSR.L   #04,D6
000013D4  1E1E                     446      MOVE.B  (A6)+,D7
000013D6  CEBC 0000000F            447      AND.L   #$0000000F,D7
000013DC                           448      
000013DC  4EB9 00001468            449      JSR     convertToBinary
000013E2  548D                     450      ADDQ.L  #2,A5
000013E4  1C07                     451      MOVE.B  D7,D6
000013E6  4EB9 00001468            452      JSR     convertToBinary
000013EC  548D                     453      ADDQ.L  #2,A5
000013EE                           454      
000013EE  4EB9 0000140E            455      JSR     checkA5Exceed100
000013F4                           456      
000013F4  4E75                     457      RTS
000013F6                           458  
000013F6                           459  *********************************************************************************
000013F6                           460  * Method Name: checkA4ExceedA5
000013F6                           461  * Description: checks if A4 has exceeded A5 in terms of the memory it is pointing
000013F6                           462  * at. If so, extend the data again
000013F6                           463  *********************************************************************************       
000013F6                           464  checkA4ExceedA5
000013F6  BACC                     465      CMP     A4,A5
000013F8  67D6                     466      BEQ     extendData
000013FA  4E75                     467      RTS
000013FC                           468   
000013FC                           469  *********************************************************************************
000013FC                           470  * Method Name: checkEndAddress
000013FC                           471  * Description: Checks if we have exceeded the end address. If so, drop everthing and
000013FC                           472  * exit
000013FC                           473  *********************************************************************************          
000013FC                           474  checkEndAddress
000013FC  BDF9 000050D2            475      CMP.L   endingAddress,A6
00001402  6C00 0004                476      BGE     stopProgram
00001406  4E75                     477      RTS
00001408                           478  
00001408                           479  *********************************************************************************
00001408                           480  * Method Name: stopProgram
00001408                           481  * Description: stops the program
00001408                           482  *********************************************************************************       
00001408                           483  stopProgram
00001408  4E71                     484      NOP
0000140A  FFFF FFFF                485          SIMHALT
0000140E                           486  
0000140E                           487  *********************************************************************************
0000140E                           488  * Method Name: checkA5Exceed100, A4, D1
0000140E                           489  * Description: Checks if A5, A4, D1 has exceeded our buffer size. If so, reset A5
0000140E                           490  *********************************************************************************           
0000140E                           491  checkA5Exceed100
0000140E  41F9 00005264            492      LEA     DataArray,A0
00001414  D1FC 00000064            493      ADD.L   #100,A0
0000141A  BBC8                     494      CMP.L   A0,A5
0000141C  6700 002C                495      BEQ     resetA5
00001420  4E75                     496      RTS  
00001422                           497  
00001422                           498  checkA4Exceed100
00001422  41F9 00005264            499      LEA     DataArray,A0
00001428  D1FC 00000064            500      ADD.L   #100,A0 
0000142E  B9C8                     501      CMP.L   A0,A4
00001430  6700 0022                502      BEQ     resetA4
00001434  4E75                     503      RTS  
00001436                           504  
00001436                           505  checkD1Exceed100 
00001436  41F9 00005264            506      LEA     DataArray,A0
0000143C  D1FC 00000064            507      ADD.L   #100,A0
00001442  B288                     508      CMP.L   A0,D1
00001444  6700 0018                509      BEQ     resetD1
00001448  4E75                     510      RTS
0000144A                           511  
0000144A                           512  *********************************************************************************
0000144A                           513  * Method Name: resetA5, A4, D1
0000144A                           514  * Description: Resets A5, A4, D1 back to our data array
0000144A                           515  * Preconditions:  A4, A5 pointing at buffer, A6 pointing at memory address
0000144A                           516  *********************************************************************************   
0000144A                           517  resetA5
0000144A  41F9 00005264            518      LEA     DataArray,A0
00001450  2A48                     519      MOVE.L  A0, A5
00001452  4E75                     520      RTS
00001454                           521  
00001454                           522  resetA4
00001454  41F9 00005264            523      LEA     DataArray,A0
0000145A  2848                     524      MOVE.L  A0, A4
0000145C  4E75                     525      RTS
0000145E                           526      
0000145E                           527  resetD1
0000145E  41F9 00005264            528      LEA     DataArray,A0
00001464  2208                     529      MOVE.L  A0,D1
00001466  4E75                     530      RTS
00001468                           531  
00001468                           532  *********************************************************************************
00001468                           533  * Method Name: convertToBinary
00001468                           534  * Description: Converts a hex value in D6 to binary and stores it
00001468                           535  * Preconditions:  D6 contains a hex value
00001468                           536  *********************************************************************************       
00001468                           537  convertToBinary
00001468  0C06 0000                538      CMPI.B  #%0000,D6
0000146C  6700 007A                539      BEQ     store0000
00001470  0C06 0001                540      CMPI.B  #%0001,D6
00001474  6700 0078                541      BEQ     store0001
00001478  0C06 0002                542      CMPI.B  #%0010,D6
0000147C  6700 0076                543      BEQ     store0010
00001480  0C06 0003                544      CMPI.B  #%0011,D6
00001484  6700 0074                545      BEQ     store0011
00001488  0C06 0004                546      CMPI.B  #%0100,D6
0000148C  6700 0072                547      BEQ     store0100
00001490  0C06 0005                548      CMPI.B  #%0101,D6
00001494  6700 0070                549      BEQ     store0101
00001498  0C06 0006                550      CMPI.B  #%0110,D6
0000149C  6700 006E                551      BEQ     store0110
000014A0  0C06 0007                552      CMPI.B  #%0111,D6
000014A4  6700 006C                553      BEQ     store0111
000014A8  0C06 0008                554      CMPI.B  #%1000,D6
000014AC  6700 006A                555      BEQ     store1000
000014B0  0C06 0009                556      CMPI.B  #%1001,D6
000014B4  6700 0068                557      BEQ     store1001
000014B8  0C06 000A                558      CMPI.B  #%1010,D6
000014BC  6700 0066                559      BEQ     store1010
000014C0  0C06 000B                560      CMPI.B  #%1011,D6
000014C4  6700 0064                561      BEQ     store1011
000014C8  0C06 000C                562      CMPI.B  #%1100,D6
000014CC  6700 0062                563      BEQ     store1100
000014D0  0C06 000D                564      CMPI.B  #%1101,D6
000014D4  6700 0060                565      BEQ     store1101
000014D8  0C06 000E                566      CMPI.B  #%1110,D6
000014DC  6700 005E                567      BEQ     store1110
000014E0  0C06 000F                568      CMPI.B  #%1111,D6
000014E4  6700 005C                569      BEQ     store1111
000014E8                           570  
000014E8                           571  *********************************************************************************
000014E8                           572  * Method Name: start0000 - 1111
000014E8                           573  * Description: Stores a word in the address of A5.
000014E8                           574  *********************************************************************************       
000014E8                           575  store0000
000014E8  3ABC 0000                576      MOVE.W  #$0000,(A5)
000014EC  4E75                     577      RTS
000014EE                           578  store0001
000014EE  3ABC 0001                579      MOVE.W  #$0001,(A5)
000014F2  4E75                     580      RTS
000014F4                           581  store0010
000014F4  3ABC 0010                582      MOVE.W  #$0010,(A5)
000014F8  4E75                     583      RTS
000014FA                           584  store0011
000014FA  3ABC 0011                585      MOVE.W  #$0011,(A5)
000014FE  4E75                     586      RTS
00001500                           587  store0100
00001500  3ABC 0100                588      MOVE.W  #$0100,(A5)
00001504  4E75                     589      RTS
00001506                           590  store0101
00001506  3ABC 0101                591      MOVE.W  #$0101,(A5)
0000150A  4E75                     592      RTS
0000150C                           593  store0110
0000150C  3ABC 0110                594      MOVE.W  #$0110,(A5)
00001510  4E75                     595      RTS
00001512                           596  store0111
00001512  3ABC 0111                597      MOVE.W  #$0111,(A5)
00001516  4E75                     598      RTS
00001518                           599  store1000
00001518  3ABC 1000                600      MOVE.W  #$1000,(A5)
0000151C  4E75                     601      RTS
0000151E                           602  store1001
0000151E  3ABC 1001                603      MOVE.W  #$1001,(A5)
00001522  4E75                     604      RTS
00001524                           605  store1010
00001524  3ABC 1010                606      MOVE.W  #$1010,(A5)
00001528  4E75                     607      RTS
0000152A                           608  store1011
0000152A  3ABC 1011                609      MOVE.W  #$1011,(A5)
0000152E  4E75                     610      RTS
00001530                           611  store1100
00001530  3ABC 1100                612      MOVE.W  #$1100,(A5)
00001534  4E75                     613      RTS
00001536                           614  store1101
00001536  3ABC 1101                615      MOVE.W  #$1101,(A5)
0000153A  4E75                     616      RTS
0000153C                           617  store1110
0000153C  3ABC 1110                618      MOVE.W  #$1110,(A5)
00001540  4E75                     619      RTS
00001542                           620  store1111
00001542  3ABC 1111                621      MOVE.W  #$1111,(A5)
00001546  4E75                     622      RTS
00001548                           623  
00001548                           624  *********************************************************************************
00001548                           625  * Method Name: clear
00001548                           626  * Description: Clears all the data registers and A3. Resets A5, A4, D1 back to
00001548                           627  * the data buffer.
00001548                           628  *********************************************************************************      
00001548                           629  clear
00001548  7000                     630      MOVE.L  #$00000000,D0
0000154A  7200                     631      MOVE.L  #$00000000,D1
0000154C  7400                     632      MOVE.L  #$00000000,D2
0000154E  7600                     633      MOVE.L  #$00000000,D3
00001550  7800                     634      MOVE.L  #$00000000,D4
00001552  7A00                     635      MOVE.L  #$00000000,D5
00001554  7C00                     636      MOVE.L  #$00000000,D6
00001556  7E00                     637      MOVE.L  #$00000000,D7
00001558  267C 00000000            638      MOVE.L  #$00000000,A3
0000155E                           639      
0000155E  4EB8 144A                640      JSR     resetA5
00001562  4EB8 1454                641      JSR     resetA4
00001566  4EB8 145E                642      JSR     resetD1
0000156A  4E75                     643      RTS
0000156C                           644  
0000156C                           645  *********************************************************************************
0000156C                           646  * Method Name: getOPCode
0000156C                           647  * Description: Stores the next 2 bits into D2 and runs a method based on their
0000156C                           648  * value. Runs OPdata if there is no match.
0000156C                           649  *********************************************************************************       
0000156C                           650  getOPCode
0000156C  4EB9 00001596            651      JSR     getNext2Bytes
00001572                           652  
00001572  0C02 0000                653      CMPI.B  #$00,D2
00001576  6700 032A                654      BEQ     get12bit00
0000157A                           655      
0000157A  0C02 0001                656      CMPI.B  #$01,D2
0000157E  6700 090E                657      BEQ     get12bit01
00001582                           658      
00001582  0C02 0010                659      CMPI.B  #$10,D2
00001586  6700 105C                660      BEQ     get12bit10
0000158A                           661      
0000158A  0C02 0011                662      CMPI.B  #$11,D2
0000158E  6700 1774                663      BEQ     get12bit11
00001592                           664      
00001592  6000 006C                665      BRA     OPdata
00001596                           666  
00001596                           667  *********************************************************************************
00001596                           668  * Method Name: getNext2Bytes
00001596                           669  * Description: Makes sure A4 is still pointing to valid data. Grabs the 2 hex values
00001596                           670  * in memory and stores them into D2.
00001596                           671  * PostCondition: D2 now contains 2 hex values (0 or 1 though)
00001596                           672  *********************************************************************************       
00001596                           673  getNext2Bytes
00001596  4EB8 13F6                674      JSR     checkA4ExceedA5
0000159A  4EB8 1422                675      JSR     checkA4Exceed100
0000159E                           676      
0000159E  4242                     677      CLR     D2
000015A0  141C                     678      MOVE.B  (A4)+,D2
000015A2                           679      
000015A2  4E75                     680      RTS
000015A4                           681  
000015A4                           682  *********************************************************************************
000015A4                           683  * Method Name: getNext2BytesPostCheck
000015A4                           684  * Description: Grabs the next two hex values and stores them into D2. Same as
000015A4                           685  * getNext2Bytes except the checks for exceeding data are done after data is grabbed
000015A4                           686  *********************************************************************************       
000015A4                           687  getNext2BytesPostCheck 
000015A4  4242                     688      CLR     D2
000015A6  141C                     689      MOVE.B  (A4)+,D2
000015A8                           690      
000015A8  4EB8 13F6                691      JSR     checkA4ExceedA5
000015AC  4EB8 1422                692      JSR     checkA4Exceed100
000015B0                           693      
000015B0  4E75                     694      RTS
000015B2                           695  
000015B2                           696  *********************************************************************************
000015B2                           697  * Method Name: getData2Bytes
000015B2                           698  * Description: Grabs 2 hex values from the current address in D1 and stores it
000015B2                           699  * in D2.
000015B2                           700  *********************************************************************************       
000015B2                           701  getData2Bytes
000015B2  4242                     702      CLR     D2
000015B4  2041                     703      MOVE.L  D1,A0
000015B6  1418                     704      MOVE.B  (A0)+,D2
000015B8  2208                     705      MOVE.L  A0,D1
000015BA                           706      
000015BA  4EB8 1436                707      JSR     checkD1Exceed100
000015BE                           708      
000015BE  4E75                     709      RTS
000015C0                           710  
000015C0                           711  *********************************************************************************
000015C0                           712  * Method Name: getNextWord
000015C0                           713  * Description: Clears D5 and D6 and stores the next word of data and stores it
000015C0                           714  * in D5
000015C0                           715  * PostCondition: D5 now contains a word of data in hex
000015C0                           716  *********************************************************************************       
000015C0                           717  getNextWord
000015C0  4285                     718      CLR.L   D5
000015C2  7A00                     719      MOVE.L  #$00000000,D5
000015C4  4286                     720      CLR.L   D6
000015C6  7C00                     721      MOVE.L  #$00000000,D6
000015C8                           722  
000015C8  1A1E                     723      MOVE.B  (A6)+,D5
000015CA  E18D                     724      LSL.L   #08,D5
000015CC  4EB8 13FC                725      JSR     checkEndAddress
000015D0                           726      
000015D0  1C1E                     727      MOVE.B  (A6)+,D6
000015D2  DA46                     728      ADD     D6,D5
000015D4                           729      
000015D4  4E75                     730      RTS
000015D6                           731      
000015D6                           732  *********************************************************************************
000015D6                           733  * Method Name: getNextLong
000015D6                           734  * Description: Clears D5 and D6 and stores the next long of data and stores it
000015D6                           735  * in D5.
000015D6                           736  * PostCondition: D5 now contains a long of data in hex
000015D6                           737  *********************************************************************************   
000015D6                           738  getNextLong
000015D6  4285                     739      CLR.L   D5
000015D8  7A00                     740      MOVE.L  #$00000000,D5
000015DA  4286                     741      CLR.L   D6
000015DC  7C00                     742      MOVE.L  #$00000000,D6
000015DE                           743      
000015DE  1A1E                     744      MOVE.B  (A6)+,D5
000015E0  E18D                     745      LSL.L   #08,D5
000015E2  4EB8 13FC                746      JSR     checkEndAddress
000015E6                           747      
000015E6  1C1E                     748      MOVE.B  (A6)+,D6
000015E8  DA46                     749      ADD     D6,D5
000015EA  E18D                     750      LSL.L   #08,D5
000015EC  4EB8 13FC                751      JSR     checkEndAddress
000015F0                           752      
000015F0  1C1E                     753      MOVE.B  (A6)+,D6
000015F2  DA46                     754      ADD     D6,D5
000015F4  E18D                     755      LSL.L   #08,D5
000015F6  4EB8 13FC                756      JSR     checkEndAddress
000015FA                           757      
000015FA  1C1E                     758      MOVE.B  (A6)+,D6
000015FC  DA46                     759      ADD     D6,D5
000015FE                           760      
000015FE  4E75                     761      RTS
00001600                           762  
00001600                           763  *********************************************************************************
00001600                           764  * Method Name: OPdata
00001600                           765  * Description: Writes DATA to the string buffer and prints the hex word (or more)
00001600                           766  * that the disassembler does not understand.
00001600                           767  *********************************************************************************     
00001600                           768  OPdata
00001600  43F9 0000532C            769      LEA     Buffer,A1
00001606  2009                     770      MOVE.L  A1,D0
00001608  5040                     771      ADDI    #8,D0
0000160A  2240                     772      MOVE.L  D0,A1
0000160C                           773      
0000160C  45F9 0000541F            774      LEA     space,A2
00001612  4EB9 0000183E            775      JSR     addBuffer
00001618                           776  
00001618  45F9 000053F8            777      LEA     LetterD,A2
0000161E  4EB9 0000183E            778      JSR     addBuffer
00001624  45F9 000053F5            779      LEA     LetterA,A2
0000162A  4EB9 0000183E            780      JSR     addBuffer
00001630  45F9 00005408            781      LEA     LetterT,A2
00001636  4EB9 0000183E            782      JSR     addBuffer
0000163C  45F9 000053F5            783      LEA     LetterA,A2
00001642  4EB9 0000183E            784      JSR     addBuffer
00001648  45F9 0000541F            785      LEA     Space,A2
0000164E  4EB9 0000183E            786      JSR     addBuffer
00001654  45F9 0000541E            787      LEA     DollarSign,A2
0000165A  4EB9 0000183E            788      JSR     addBuffer
00001660                           789  
00001660  260C                     790      MOVE.L  A4,D3
00001662  C6BC 0000000F            791      AND.L   #$0000000F,D3
00001668  4EB9 0000185A            792      JSR     checkHexPart
0000166E  7A00                     793      MOVE.L  #$00000000,D5
00001670                           794      
00001670  4EB9 000016A2            795      JSR     printDataHex
00001676                           796  
00001676                           797  *********************************************************************************
00001676                           798  * Method Name: checkData2Hex
00001676                           799  * Description: If the D5 counter is greater or equal to 2, run the next method
00001676                           800  *********************************************************************************   
00001676                           801  checkData2Hex
00001676  0C05 0002                802      CMPI.B  #2,D5
0000167A  6C00 0004                803      BGE     checkLessThan4Hex
0000167E                           804      
0000167E  4E75                     805      RTS
00001680                           806  
00001680                           807  *********************************************************************************
00001680                           808  * Method Name: checkLessThan4Hex
00001680                           809  * Description: If there are less than 4 hex values currently stores for printing,
00001680                           810  * grabs the next hex value. If we have reached the end of the address we did
00001680                           811  * not understand, stop getting hex values.
00001680                           812  *********************************************************************************   
00001680                           813  checkLessThan4Hex
00001680  0C05 0004                814      CMPI.B  #4,D5
00001684  6D00 0012                815      BLT     getNextHex
00001688  B28C                     816      CMP.L   A4,D1
0000168A  6C00 0004                817      BGE     breakDataLoop
0000168E  4E75                     818      RTS
00001690                           819      
00001690                           820  *********************************************************************************
00001690                           821  * Method Name: breakDataLoop
00001690                           822  * Description: Writes AA to D5
00001690                           823  * PostCondition: D5 now holds AA
00001690                           824  *********************************************************************************   
00001690                           825  breakDataLoop
00001690  2A3C 000000AA            826      MOVE.L  #$000000AA,D5
00001696  4E75                     827      RTS
00001698                           828      
00001698                           829  *********************************************************************************
00001698                           830  * Method Name: getNextHex
00001698                           831  * Description: Moves the address A4 is pointing at forward by 2. (To get a word)
00001698                           832  *********************************************************************************   
00001698                           833  getNextHex
00001698  4EB8 15A4                834      JSR     getNext2BytesPostCheck
0000169C  4EB8 15A4                835      JSR     getNext2BytesPostCheck
000016A0  4E75                     836      RTS    
000016A2                           837      
000016A2                           838  *********************************************************************************
000016A2                           839  * Method Name: printDataHex
000016A2                           840  * Description: Grabs 4 bits from where D1 is pointing to and stores it in D3.
000016A2                           841  * Writes the hex value in D3 to our buffer. If AA is in D5, leave the method.
000016A2                           842  *********************************************************************************   
000016A2                           843  printDataHex
000016A2  4EB8 1676                844      JSR     checkData2Hex
000016A6                           845      
000016A6  0C05 00AA                846      CMPI.B  #$AA,D5
000016AA  6700 FB02                847      BEQ     askForNextCode
000016AE                           848      
000016AE  5245                     849      ADDI    #1,D5
000016B0                           850      
000016B0  4EB8 15B2                851      JSR     getData2Bytes
000016B4  2602                     852      MOVE.L  D2,D3
000016B6  E18B                     853      LSL.L   #$08,D3
000016B8  4EB8 15B2                854      JSR     getData2Bytes
000016BC  D642                     855      ADD     D2,D3
000016BE                           856      
000016BE  0C43 0000                857      CMPI.W  #$0000,D3
000016C2  6700 007A                858      BEQ     storeHex0
000016C6                           859      
000016C6  0C43 0001                860      CMPI.W  #$0001,D3
000016CA  6700 0082                861      BEQ     storeHex1
000016CE                           862      
000016CE  0C43 0010                863      CMPI.W  #$0010,D3
000016D2  6700 008A                864      BEQ     storeHex2
000016D6                           865      
000016D6  0C43 0011                866      CMPI.W  #$0011,D3
000016DA  6700 0092                867      BEQ     storeHex3
000016DE                           868      
000016DE  0C43 0100                869      CMPI.W  #$0100,D3
000016E2  6700 009A                870      BEQ     storeHex4
000016E6                           871      
000016E6  0C43 0101                872      CMPI.W  #$0101,D3
000016EA  6700 00A2                873      BEQ     storeHex5
000016EE                           874      
000016EE  0C43 0110                875      CMPI.W  #$0110,D3
000016F2  6700 00AA                876      BEQ     storeHex6
000016F6                           877      
000016F6  0C43 0111                878      CMPI.W  #$0111,D3
000016FA  6700 00B2                879      BEQ     storeHex7
000016FE                           880      
000016FE  0C43 1000                881      CMPI.W  #$1000,D3
00001702  6700 00BA                882      BEQ     storeHex8
00001706                           883      
00001706  0C43 1001                884      CMPI.W  #$1001,D3
0000170A  6700 00C2                885      BEQ     storeHex9
0000170E                           886      
0000170E  0C43 1010                887      CMPI.W  #$1010,D3
00001712  6700 00CA                888      BEQ     storeHexA
00001716                           889      
00001716  0C43 1011                890      CMPI.W  #$1011,D3
0000171A  6700 00D2                891      BEQ     storeHexB
0000171E                           892      
0000171E  0C43 1100                893      CMPI.W  #$1100,D3
00001722  6700 00DA                894      BEQ     storeHexC
00001726                           895      
00001726  0C43 1101                896      CMPI.W  #$1101,D3
0000172A  6700 00E2                897      BEQ     storeHexD
0000172E                           898      
0000172E  0C43 1110                899      CMPI.W  #$1110,D3
00001732  6700 00EA                900      BEQ     storeHexE
00001736                           901      
00001736  0C43 1111                902      CMPI.W  #$1111,D3
0000173A  6700 00F2                903      BEQ     storeHexF
0000173E                           904  
0000173E                           905  *********************************************************************************
0000173E                           906  * Method Name: storeHex0 - F
0000173E                           907  * Description: Stores a hex value in A2 and writes it to our string buffer. Runs
0000173E                           908  * printDataHex afterward.
0000173E                           909  *********************************************************************************       
0000173E                           910  storeHex0
0000173E  45F9 0000540F            911      LEA     Number0,A2 
00001744  4EB9 0000183E            912      JSR     addBuffer
0000174A  6000 FF56                913      BRA     printDataHex
0000174E                           914  storeHex1
0000174E  45F9 00005410            915      LEA     Number1,A2 
00001754  4EB9 0000183E            916      JSR     addBuffer
0000175A  6000 FF46                917      BRA     printDataHex
0000175E                           918  storeHex2
0000175E  45F9 00005411            919      LEA     Number2,A2 
00001764  4EB9 0000183E            920      JSR     addBuffer
0000176A  6000 FF36                921      BRA     printDataHex
0000176E                           922  storeHex3
0000176E  45F9 00005412            923      LEA     Number3,A2 
00001774  4EB9 0000183E            924      JSR     addBuffer
0000177A  6000 FF26                925      BRA     printDataHex
0000177E                           926  storeHex4
0000177E  45F9 00005413            927      LEA     Number4,A2 
00001784  4EB9 0000183E            928      JSR     addBuffer
0000178A  6000 FF16                929      BRA     printDataHex
0000178E                           930  storeHex5
0000178E  45F9 00005414            931      LEA     Number5,A2 
00001794  4EB9 0000183E            932      JSR     addBuffer
0000179A  6000 FF06                933      BRA     printDataHex
0000179E                           934  storeHex6
0000179E  45F9 00005415            935      LEA     Number6,A2 
000017A4  4EB9 0000183E            936      JSR     addBuffer
000017AA  6000 FEF6                937      BRA     printDataHex
000017AE                           938  storeHex7
000017AE  45F9 00005416            939      LEA     Number7,A2 
000017B4  4EB9 0000183E            940      JSR     addBuffer
000017BA  6000 FEE6                941      BRA     printDataHex
000017BE                           942  storeHex8
000017BE  45F9 00005417            943      LEA     Number8,A2 
000017C4  4EB9 0000183E            944      JSR     addBuffer
000017CA  6000 FED6                945      BRA     printDataHex
000017CE                           946  storeHex9
000017CE  45F9 00005418            947      LEA     Number9,A2 
000017D4  4EB9 0000183E            948      JSR     addBuffer
000017DA  6000 FEC6                949      BRA     printDataHex
000017DE                           950  storeHexA
000017DE  45F9 000053F5            951      LEA     LetterA,A2 
000017E4  4EB9 0000183E            952      JSR     addBuffer
000017EA  6000 FEB6                953      BRA     printDataHex
000017EE                           954  storeHexB
000017EE  45F9 000053F6            955      LEA     LetterB,A2 
000017F4  4EB9 0000183E            956      JSR     addBuffer
000017FA  6000 FEA6                957      BRA     printDataHex
000017FE                           958  storeHexC
000017FE  45F9 000053F7            959      LEA     LetterC,A2 
00001804  4EB9 0000183E            960      JSR     addBuffer
0000180A  6000 FE96                961      BRA     printDataHex
0000180E                           962  storeHexD
0000180E  45F9 000053F8            963      LEA     LetterD,A2 
00001814  4EB9 0000183E            964      JSR     addBuffer
0000181A  6000 FE86                965      BRA     printDataHex
0000181E                           966  storeHexE
0000181E  45F9 000053F9            967      LEA     LetterE,A2 
00001824  4EB9 0000183E            968      JSR     addBuffer
0000182A  6000 FE76                969      BRA     printDataHex
0000182E                           970  storeHexF
0000182E  45F9 000053FA            971      LEA     LetterF,A2 
00001834  4EB9 0000183E            972      JSR     addBuffer
0000183A  6000 FE66                973      BRA     printDataHex   
0000183E                           974  
0000183E                           975  *********************************************************************************
0000183E                           976  * Method Name: addBuffer
0000183E                           977  * Description: Moves whatever A2 is pointing at into where A1 is and increases
0000183E                           978  * where A1 is pointing by 1
0000183E                           979  *********************************************************************************    
0000183E                           980  addBuffer
0000183E  12D2                     981      MOVE.B  (A2),(A1)+
00001840  4E75                     982      RTS
00001842                           983  
00001842                           984  *********************************************************************************
00001842                           985  * Method Name: printBuffer
00001842                           986  * Description: Adds a null character to A1 and then runs TrapTask13 on the string
00001842                           987  * to print it out and to file
00001842                           988  *********************************************************************************       
00001842                           989  printBuffer
00001842                           990      ***print buffer*****
00001842  45F9 000053F4            991      LEA     null,A2
00001848  4EB8 183E                992      JSR     addBuffer
0000184C                           993      
0000184C  43F9 0000532C            994      LEA     Buffer,A1
00001852                           995      
00001852  4EB9 0000500C            996      JSR     TrapTask13
00001858  4E75                     997      RTS
0000185A                           998  
0000185A                           999  *********************************************************************************
0000185A                          1000  * Method Name: checkHexPart
0000185A                          1001  * Description: Checks to see if we have grabbed the first 2 bits or 4. If we have
0000185A                          1002  * only grabbed 4 bits, we need to get the next 2 for a complete hex value.
0000185A                          1003  *********************************************************************************       
0000185A                          1004  checkHexPart
0000185A                          1005      
0000185A  0C03 0001               1006      CMPI.B  #$01,D3
0000185E  6700 003C               1007      BEQ     get2ndPartofHex
00001862                          1008      
00001862                          1009      *****************check if we need to grab the next 2 bits (because hex is 4 bits, so if we have only gotten 2
00001862                          1010      *****************and determined its bad data, get the next 2 too
00001862  0C03 0003               1011      CMPI.B  #$03,D3
00001866  6700 0034               1012      BEQ     get2ndPartofHex
0000186A                          1013      
0000186A  0C03 0005               1014      CMPI.B  #$05,D3
0000186E  6700 002C               1015      BEQ     get2ndPartofHex
00001872                          1016      
00001872  0C03 0007               1017      CMPI.B  #$07,D3
00001876  6700 0024               1018      BEQ     get2ndPartofHex
0000187A                          1019      
0000187A  0C03 0009               1020      CMPI.B  #$09,D3
0000187E  6700 001C               1021      BEQ     get2ndPartofHex
00001882                          1022      
00001882  0C03 000B               1023      CMPI.B  #$0B,D3
00001886  6700 0014               1024      BEQ     get2ndPartofHex
0000188A                          1025      
0000188A  0C03 000D               1026      CMPI.B  #$0D,D3
0000188E  6700 000C               1027      BEQ     get2ndPartofHex
00001892                          1028      
00001892  0C03 000F               1029      CMPI.B  #$0F,D3
00001896  6700 0004               1030      BEQ     get2ndPartofHex
0000189A                          1031      
0000189A  4E75                    1032      RTS
0000189C                          1033  
0000189C                          1034  *********************************************************************************
0000189C                          1035  * Method Name: get2ndPartofHex
0000189C                          1036  * Description: Gets the next 2 bits to complete hex value.
0000189C                          1037  *********************************************************************************       
0000189C                          1038  get2ndPartofHex
0000189C  4EB8 1596               1039      JSR     getNext2Bytes
000018A0  4E75                    1040      RTS    
000018A2                          1041  
000018A2                          1042  *********************************************************************************
000018A2                          1043  * Method Name: get12bit00
000018A2                          1044  * Description: checks the current 2 bits and runs a method based on their value
000018A2                          1045  *********************************************************************************   
000018A2                          1046  get12bit00
000018A2  4EB8 1596               1047      JSR     getNext2Bytes
000018A6  264C                    1048      MOVE.L  A4,A3   ***we have to check further for movea and move codes, so we save position before EA here*****
000018A8                          1049      
000018A8  0C02 0000               1050      CMPI.B  #$00,D2
000018AC  6700 001A               1051      BEQ     get34bit00
000018B0                          1052      
000018B0  0C02 0001               1053      CMPI.B  #$01,D2
000018B4  6700 040C               1054      BEQ     OPmoveb
000018B8                          1055      
000018B8  0C02 0010               1056      CMPI.B  #$10,D2
000018BC  6700 0056               1057      BEQ     get34bit10
000018C0                          1058      
000018C0  0C02 0011               1059      CMPI.B  #$11,D2
000018C4  6700 0066               1060      BEQ     get34bit11
000018C8                          1061  
000018C8                          1062  *********************************************************************************
000018C8                          1063  * Method Name: get34bit00
000018C8                          1064  * Description: checks the current 2 bits and runs a method based on their value
000018C8                          1065  * also checks for BCLR by looking ahead
000018C8                          1066  *********************************************************************************      
000018C8                          1067  get34bit00
000018C8  244C                    1068      MOVE.L  A4,A2
000018CA                          1069      
000018CA  4EB8 1596               1070      JSR     getNext2Bytes
000018CE                          1071      
000018CE                          1072      *********test for bclr******
000018CE  2802                    1073      MOVE.L  D2,D4
000018D0  E18C                    1074      LSL.L   #$08,D4
000018D2                          1075      
000018D2  4EB8 1596               1076      JSR     getNext2Bytes
000018D6  D882                    1077      ADD.L   D2,D4
000018D8  E88C                    1078      LSR.L   #4,D4
000018DA                          1079      
000018DA  2602                    1080      MOVE.L  D2,D3
000018DC  E18B                    1081      LSL.L   #$08,D3
000018DE  4EB8 1596               1082      JSR     getNext2Bytes
000018E2  D602                    1083      ADD.B   D2,D3
000018E4  C6BC 00000111           1084      AND.L   #$00000111,D3
000018EA  0C43 0110               1085      CMPI.W  #$0110,D3
000018EE  6700 00B4               1086      BEQ     OPbclrdynamic
000018F2                          1087      
000018F2  284A                    1088      MOVE.L  A2,A4
000018F4  4EB8 1596               1089      JSR     getNext2Bytes
000018F8                          1090      
000018F8  0C02 0000               1091      CMPI.B  #$00,D2
000018FC  6700 0046               1092      BEQ     get56bit00
00001900                          1093      
00001900  0C02 0010               1094      CMPI.B  #$10,D2
00001904  6700 004E               1095      BEQ     get56bit10
00001908                          1096      
00001908  0C02 0011               1097      CMPI.B  #$11,D2
0000190C  6700 0056               1098      BEQ     get56bit11
00001910                          1099      
00001910  6000 FCEE               1100      BRA     OPdata
00001914                          1101  
00001914                          1102  *********************************************************************************
00001914                          1103  * Method Name: get34bit10
00001914                          1104  * Description: checks the current 2 bits and runs a method based on their value
00001914                          1105  * Runs movel if next 2 bits don't match any possible instruction
00001914                          1106  *********************************************************************************      
00001914                          1107  get34bit10
00001914  4EB8 1596               1108      JSR     getNext2Bytes
00001918                          1109      
00001918  4EB8 1596               1110      JSR     getNext2Bytes
0000191C                          1111      
0000191C  7610                    1112      MOVE.L  #$00000010,D3
0000191E  8443                    1113      OR      D3,D2
00001920                          1114      
00001920  0C42 0010               1115      CMPI    #$10,D2
00001924  6700 005E               1116      BEQ     get78bitx0
00001928  6000 04B4               1117      BRA     OPmovel
0000192C                          1118      
0000192C                          1119  *********************************************************************************
0000192C                          1120  * Method Name: get34bit11
0000192C                          1121  * Description: checks the current 2 bits and runs a method based on their value
0000192C                          1122  * Runs movew if next 2 bits don't match any possible instruction
0000192C                          1123  *********************************************************************************      
0000192C                          1124  get34bit11
0000192C  4EB8 1596               1125      JSR     getNext2Bytes
00001930                          1126      
00001930  4EB8 1596               1127      JSR     getNext2Bytes
00001934                          1128      
00001934  7610                    1129      MOVE.L  #$00000010,D3
00001936  8443                    1130      OR      D3,D2
00001938                          1131      
00001938  0C42 0010               1132      CMPI    #$10,D2
0000193C  6700 0056               1133      BEQ     get78bitx0part2
00001940  6000 04F4               1134      BRA     OPmovew
00001944                          1135  
00001944                          1136  *********************************************************************************
00001944                          1137  * Method Name: get56bit100
00001944                          1138  * Description: checks the current 2 bits and runs a method based on their value
00001944                          1139  *********************************************************************************      
00001944                          1140  get56bit00
00001944  4EB8 1596               1141      JSR     getNext2Bytes
00001948                          1142      
00001948  0C02 0000               1143      CMPI.B  #$00,D2
0000194C  6700 026C               1144      BEQ     OPori
00001950                          1145      
00001950  6000 FCAE               1146      BRA     OPdata
00001954                          1147  
00001954                          1148  *********************************************************************************
00001954                          1149  * Method Name: get56bit10
00001954                          1150  * Description: checks the current 2 bits and runs a method based on their value
00001954                          1151  *********************************************************************************      
00001954                          1152  get56bit10
00001954  4EB8 1596               1153      JSR     getNext2Bytes
00001958                          1154      
00001958  0C02 0000               1155      CMPI.B  #$00,D2
0000195C  6700 0016               1156      BEQ     get78bit00
00001960                          1157      
00001960  6000 FC9E               1158      BRA     OPdata
00001964                          1159  
00001964                          1160  *********************************************************************************
00001964                          1161  * Method Name: get56bit11
00001964                          1162  * Description: checks the current 2 bits and runs a method based on their value
00001964                          1163  *********************************************************************************      
00001964                          1164  get56bit11
00001964  4EB8 1596               1165      JSR     getNext2Bytes
00001968                          1166      
00001968  0C02 0000               1167      CMPI.B  #$00,D2
0000196C  6700 0126               1168      BEQ     OPcmpi
00001970                          1169      
00001970  6000 FC8E               1170      BRA     OPdata
00001974                          1171  
00001974                          1172  *********************************************************************************
00001974                          1173  * Method Name: get78bit00
00001974                          1174  * Description: checks the current 2 bits and runs a method based on their value
00001974                          1175  *********************************************************************************      
00001974                          1176  get78bit00
00001974  4EB8 1596               1177      JSR     getNext2Bytes
00001978                          1178      
00001978  0C02 0010               1179      CMPI.B  #$10,D2
0000197C  6700 008C               1180      BEQ     OPbclrstatic
00001980                          1181      
00001980  6000 FC7E               1182      BRA     OPdata
00001984                          1183  
00001984                          1184  *********************************************************************************
00001984                          1185  * Method Name: get78bitx0
00001984                          1186  * Description: checks the current 2 bits and runs a method based on their value
00001984                          1187  *********************************************************************************      
00001984                          1188  get78bitx0
00001984  4EB8 1596               1189      JSR     getNext2Bytes
00001988                          1190      
00001988  0C02 0001               1191      CMPI.B  #$01,D2
0000198C  6700 038C               1192      BEQ     OPmoveal
00001990  6000 044C               1193      BRA     OPmovel
00001994                          1194  
00001994                          1195  *********************************************************************************
00001994                          1196  * Method Name: get78bitx0part
00001994                          1197  * Description: checks the current 2 bits and runs a method based on their value
00001994                          1198  *********************************************************************************      
00001994                          1199  get78bitx0part2
00001994  4EB8 1596               1200      JSR     getNext2Bytes
00001998                          1201      
00001998  0C02 0001               1202      CMPI.B  #$01,D2
0000199C  6700 03DE               1203      BEQ     OPmoveaw
000019A0  6000 0494               1204      BRA     OPmovew
000019A4                          1205  
000019A4                          1206  *********************************************************************************
000019A4                          1207  * Method Name: OPbclrdynamic
000019A4                          1208  * Description: OP code is bclrdynamic, runs the respective EA method
000019A4                          1209  *********************************************************************************  
000019A4                          1210  OPbclrdynamic
000019A4  200C                    1211      MOVE.L  A4,D0
000019A6                          1212      
000019A6  4EB8 1596               1213      JSR     getNext2Bytes
000019AA  2602                    1214      MOVE.L  D2,D3
000019AC  E18B                    1215      LSL.L   #08,D3
000019AE  4EB8 1596               1216      JSR     getNext2Bytes
000019B2  D682                    1217      ADD.L   D2,D3
000019B4  E90B                    1218      LSL.B   #04,D3
000019B6                          1219      
000019B6  2C04                    1220      MOVE.L  D4,D6   **getting first register here
000019B8                          1221      
000019B8  45F9 000053F6           1222      LEA     LetterB,A2
000019BE  4EB8 183E               1223      JSR     addBuffer
000019C2  45F9 000053F7           1224      LEA     LetterC,A2
000019C8  4EB8 183E               1225      JSR     addBuffer
000019CC  45F9 00005400           1226      LEA     LetterL,A2
000019D2  4EB8 183E               1227      JSR     addBuffer
000019D6  45F9 00005406           1228      LEA     LetterR,A2
000019DC  4EB8 183E               1229      JSR     addBuffer
000019E0  45F9 00005421           1230      LEA     period,A2
000019E6  4EB8 183E               1231      JSR     addBuffer
000019EA  4EB9 00001A70           1232      JSR     checkPrintL
000019F0  45F9 0000541F           1233      LEA     space,A2
000019F6  4EB8 183E               1234      JSR     addBuffer
000019FA                          1235      
000019FA  2840                    1236      MOVE.L  D0,A4
000019FC  4EB8 1596               1237      JSR     getNext2Bytes
00001A00                          1238      
00001A00  4EB9 000042B0           1239      JSR     compareEAModeBCLRDynamic
00001A06                          1240      
00001A06  6000 F7A6               1241      BRA     askForNextCode
00001A0A                          1242  
00001A0A                          1243  *********************************************************************************
00001A0A                          1244  * Method Name: OPbclrstatic
00001A0A                          1245  * Description: OP code is bclrstatic, runs the respective EA method
00001A0A                          1246  *********************************************************************************      
00001A0A                          1247  OPbclrstatic
00001A0A  200C                    1248      MOVE.L  A4,D0
00001A0C                          1249      
00001A0C  4EB8 1596               1250      JSR     getNext2Bytes
00001A10  2602                    1251      MOVE.L  D2,D3
00001A12  E18B                    1252      LSL.L   #08,D3
00001A14  4EB8 1596               1253      JSR     getNext2Bytes
00001A18  D682                    1254      ADD.L   D2,D3
00001A1A  E90B                    1255      LSL.B   #04,D3
00001A1C                          1256      
00001A1C  2C04                    1257      MOVE.L  D4,D6   **getting first register here
00001A1E                          1258      
00001A1E  45F9 000053F6           1259      LEA     LetterB,A2
00001A24  4EB8 183E               1260      JSR     addBuffer
00001A28  45F9 000053F7           1261      LEA     LetterC,A2
00001A2E  4EB8 183E               1262      JSR     addBuffer
00001A32  45F9 00005400           1263      LEA     LetterL,A2
00001A38  4EB8 183E               1264      JSR     addBuffer
00001A3C  45F9 00005406           1265      LEA     LetterR,A2
00001A42  4EB8 183E               1266      JSR     addBuffer
00001A46  45F9 00005421           1267      LEA     period,A2
00001A4C  4EB8 183E               1268      JSR     addBuffer
00001A50  4EB9 00001A70           1269      JSR     checkPrintL
00001A56  45F9 0000541F           1270      LEA     space,A2
00001A5C  4EB8 183E               1271      JSR     addBuffer
00001A60                          1272      
00001A60  2840                    1273      MOVE.L  D0,A4
00001A62  4EB8 1596               1274      JSR     getNext2Bytes
00001A66                          1275      
00001A66  4EB9 000042F8           1276      JSR     compareEAModeBCLRStatic
00001A6C                          1277      
00001A6C  6000 F740               1278      BRA     askForNextCode
00001A70                          1279  
00001A70                          1280  *Check whether to print .L or .B for BCLR    
00001A70                          1281  checkPrintL
00001A70  0C43 0000               1282      CMPI    #$00000000,D3
00001A74  6700 0006               1283      BEQ     printL
00001A78  6000 000E               1284      BRA     printB
00001A7C                          1285  printL
00001A7C  45F9 00005400           1286      LEA     LetterL,A2
00001A82  4EB8 183E               1287      JSR     addBuffer
00001A86  4E75                    1288      RTS
00001A88                          1289  printB
00001A88  45F9 000053F6           1290      LEA     LetterB,A2
00001A8E  4EB8 183E               1291      JSR     addBuffer
00001A92  4E75                    1292      RTS
00001A94                          1293  
00001A94                          1294  *********************************************************************************
00001A94                          1295  * Method Name: OPcmpi, b,w,l
00001A94                          1296  * Description: OP code is cmpi so run respective method based on size and 
00001A94                          1297  * runs the respective EA method
00001A94                          1298  *********************************************************************************  
00001A94                          1299  OPcmpi
00001A94  4EB8 1596               1300      JSR     getNext2Bytes
00001A98                          1301      
00001A98  0C02 0000               1302      CMPI.B  #$00,D2
00001A9C  6700 0014               1303      BEQ     OPcmpib
00001AA0                          1304      
00001AA0  0C42 0001               1305      CMPI.W  #$01,D2
00001AA4  6700 0064               1306      BEQ     OPcmpiw
00001AA8                          1307      
00001AA8  0C82 00000010           1308      CMPI.L  #$10,D2
00001AAE  6700 00B2               1309      BEQ     OPcmpil
00001AB2                          1310  OPcmpib
00001AB2  7001                    1311      MOVE.L  #$00000001,D0
00001AB4  4EB8 1596               1312      JSR     getNext2Bytes
00001AB8                          1313      
00001AB8  45F9 000053F7           1314      LEA     LetterC,A2
00001ABE  4EB8 183E               1315      JSR     addBuffer
00001AC2  45F9 00005401           1316      LEA     LetterM,A2
00001AC8  4EB8 183E               1317      JSR     addBuffer
00001ACC  45F9 00005404           1318      LEA     LetterP,A2
00001AD2  4EB8 183E               1319      JSR     addBuffer
00001AD6  45F9 000053FD           1320      LEA     LetterI,A2
00001ADC  4EB8 183E               1321      JSR     addBuffer
00001AE0  45F9 00005421           1322      LEA     period,A2
00001AE6  4EB8 183E               1323      JSR     addBuffer
00001AEA  45F9 000053F6           1324      LEA     LetterB,A2
00001AF0  4EB8 183E               1325      JSR     addBuffer
00001AF4  45F9 0000541F           1326      LEA     space,A2
00001AFA  4EB8 183E               1327      JSR     addBuffer
00001AFE                          1328  
00001AFE  7000                    1329      MOVE.L  #$00000000,D0
00001B00  4EB9 00004440           1330      JSR     compareEAModeORI
00001B06                          1331  
00001B06  6000 F6A6               1332      BRA     askForNextCode
00001B0A                          1333  OPcmpiw
00001B0A  7001                    1334      MOVE.L  #$00000001,D0
00001B0C  4EB8 1596               1335      JSR     getNext2Bytes
00001B10                          1336      
00001B10  45F9 000053F7           1337      LEA     LetterC,A2
00001B16  4EB8 183E               1338      JSR     addBuffer
00001B1A  45F9 00005401           1339      LEA     LetterM,A2
00001B20  4EB8 183E               1340      JSR     addBuffer
00001B24  45F9 00005404           1341      LEA     LetterP,A2
00001B2A  4EB8 183E               1342      JSR     addBuffer
00001B2E  45F9 000053FD           1343      LEA     LetterI,A2
00001B34  4EB8 183E               1344      JSR     addBuffer
00001B38  45F9 00005421           1345      LEA     period,A2
00001B3E  4EB8 183E               1346      JSR     addBuffer
00001B42  45F9 0000540B           1347      LEA     LetterW,A2
00001B48  4EB8 183E               1348      JSR     addBuffer
00001B4C  45F9 0000541F           1349      LEA     space,A2
00001B52  4EB8 183E               1350      JSR     addBuffer
00001B56                          1351  
00001B56  7000                    1352      MOVE.L  #$00000000,D0
00001B58  4EB9 00004440           1353      JSR     compareEAModeORI
00001B5E                          1354  
00001B5E  6000 F64E               1355      BRA     askForNextCode
00001B62                          1356  OPcmpil
00001B62  7001                    1357      MOVE.L  #$00000001,D0
00001B64  4EB8 1596               1358      JSR     getNext2Bytes
00001B68                          1359      
00001B68  45F9 000053F7           1360      LEA     LetterC,A2
00001B6E  4EB8 183E               1361      JSR     addBuffer
00001B72  45F9 00005401           1362      LEA     LetterM,A2
00001B78  4EB8 183E               1363      JSR     addBuffer
00001B7C  45F9 00005404           1364      LEA     LetterP,A2
00001B82  4EB8 183E               1365      JSR     addBuffer
00001B86  45F9 000053FD           1366      LEA     LetterI,A2
00001B8C  4EB8 183E               1367      JSR     addBuffer
00001B90  45F9 00005421           1368      LEA     period,A2
00001B96  4EB8 183E               1369      JSR     addBuffer
00001B9A  45F9 00005400           1370      LEA     LetterL,A2
00001BA0  4EB8 183E               1371      JSR     addBuffer
00001BA4  45F9 0000541F           1372      LEA     space,A2
00001BAA  4EB8 183E               1373      JSR     addBuffer
00001BAE                          1374  
00001BAE  7001                    1375      MOVE.L  #$00000001,D0
00001BB0  4EB9 00004440           1376      JSR     compareEAModeORI
00001BB6                          1377  
00001BB6  6000 F5F6               1378      BRA     askForNextCode 
00001BBA                          1379  
00001BBA                          1380  *********************************************************************************
00001BBA                          1381  * Method Name: OPori, b,2,l
00001BBA                          1382  * Description: OP code is OPori, runs the respective EA method based on size
00001BBA                          1383  *********************************************************************************  
00001BBA                          1384  OPori
00001BBA  4EB8 1596               1385      JSR     getNext2Bytes
00001BBE                          1386      
00001BBE  0C02 0000               1387      CMPI.B  #$00,D2
00001BC2  6700 0014               1388      BEQ     OPorib
00001BC6                          1389      
00001BC6  0C42 0001               1390      CMPI.W  #$01,D2
00001BCA  6700 005A               1391      BEQ     OPoriw
00001BCE                          1392      
00001BCE  0C82 00000010           1393      CMPI.L  #$10,D2
00001BD4  6700 009E               1394      BEQ     OPoril
00001BD8                          1395      
00001BD8                          1396  OPorib
00001BD8  7001                    1397      MOVE.L  #$00000001,D0
00001BDA  4EB8 1596               1398      JSR     getNext2Bytes
00001BDE                          1399      
00001BDE  45F9 00005403           1400      LEA     LetterO,A2
00001BE4  4EB8 183E               1401      JSR     addBuffer
00001BE8  45F9 00005406           1402      LEA     LetterR,A2
00001BEE  4EB8 183E               1403      JSR     addBuffer
00001BF2  45F9 000053FD           1404      LEA     LetterI,A2
00001BF8  4EB8 183E               1405      JSR     addBuffer
00001BFC  45F9 00005421           1406      LEA     period,A2
00001C02  4EB8 183E               1407      JSR     addBuffer
00001C06  45F9 000053F6           1408      LEA     LetterB,A2
00001C0C  4EB8 183E               1409      JSR     addBuffer
00001C10  45F9 0000541F           1410      LEA     space,A2
00001C16  4EB8 183E               1411      JSR     addBuffer
00001C1A                          1412  
00001C1A  7000                    1413      MOVE.L  #$00000000,D0
00001C1C  4EB9 00004440           1414      JSR     compareEAModeORI
00001C22                          1415  
00001C22  6000 F58A               1416      BRA     askForNextCode
00001C26                          1417  OPoriw
00001C26  7011                    1418      MOVE.L  #$00000011,D0
00001C28  4EB8 1596               1419      JSR     getNext2Bytes
00001C2C                          1420      
00001C2C  45F9 00005403           1421      LEA     LetterO,A2
00001C32  4EB8 183E               1422      JSR     addBuffer
00001C36  45F9 00005406           1423      LEA     LetterR,A2
00001C3C  4EB8 183E               1424      JSR     addBuffer
00001C40  45F9 000053FD           1425      LEA     LetterI,A2
00001C46  4EB8 183E               1426      JSR     addBuffer
00001C4A  45F9 00005421           1427      LEA     period,A2
00001C50  4EB8 183E               1428      JSR     addBuffer
00001C54  45F9 0000540B           1429      LEA     LetterW,A2
00001C5A  4EB8 183E               1430      JSR     addBuffer
00001C5E  45F9 0000541F           1431      LEA     space,A2
00001C64  4EB8 183E               1432      JSR     addBuffer
00001C68                          1433      
00001C68  7000                    1434      MOVE.L  #$00000000,D0
00001C6A  4EB9 00004440           1435      JSR     compareEAModeORI
00001C70                          1436  
00001C70  6000 F53C               1437      BRA     askForNextCode
00001C74                          1438  OPoril
00001C74  7010                    1439      MOVE.L  #$00000010,D0
00001C76  4EB8 1596               1440      JSR     getNext2Bytes
00001C7A                          1441      
00001C7A  45F9 00005403           1442      LEA     LetterO,A2
00001C80  4EB8 183E               1443      JSR     addBuffer
00001C84  45F9 00005406           1444      LEA     LetterR,A2
00001C8A  4EB8 183E               1445      JSR     addBuffer
00001C8E  45F9 000053FD           1446      LEA     LetterI,A2
00001C94  4EB8 183E               1447      JSR     addBuffer
00001C98  45F9 00005421           1448      LEA     period,A2
00001C9E  4EB8 183E               1449      JSR     addBuffer
00001CA2  45F9 00005400           1450      LEA     LetterL,A2
00001CA8  4EB8 183E               1451      JSR     addBuffer
00001CAC  45F9 0000541F           1452      LEA     space,A2
00001CB2  4EB8 183E               1453      JSR     addBuffer
00001CB6                          1454      
00001CB6  7001                    1455      MOVE.L  #$00000001,D0
00001CB8  4EB9 00004440           1456      JSR     compareEAModeORI
00001CBE                          1457  
00001CBE  6000 F4EE               1458      BRA     askForNextCode   
00001CC2                          1459  
00001CC2                          1460  *********************************************************************************
00001CC2                          1461  * Method Name: OPmoveb,w,l OPmoveaw, l
00001CC2                          1462  * Description: OP code is move or movea, runs the respective EA method and size
00001CC2                          1463  *********************************************************************************  
00001CC2                          1464  OPmoveb
00001CC2  284B                    1465      MOVE.L  A3,A4
00001CC4                          1466      **MOVE.L  D2,D5 ***for size later on
00001CC4  4EB8 1596               1467      JSR     getNext2Bytes
00001CC8                          1468  
00001CC8  45F9 00005401           1469      LEA     LetterM,A2
00001CCE  4EB8 183E               1470      JSR     addBuffer
00001CD2  45F9 00005403           1471      LEA     LetterO,A2
00001CD8  4EB8 183E               1472      JSR     addBuffer
00001CDC  45F9 0000540A           1473      LEA     LetterV,A2
00001CE2  4EB8 183E               1474      JSR     addBuffer
00001CE6  45F9 000053F9           1475      LEA     LetterE,A2
00001CEC  4EB8 183E               1476      JSR     addBuffer
00001CF0  45F9 00005421           1477      LEA     period,A2
00001CF6  4EB8 183E               1478      JSR     addBuffer
00001CFA  45F9 000053F6           1479      LEA     LetterB,A2
00001D00  4EB8 183E               1480      JSR     addBuffer
00001D04  45F9 0000541F           1481      LEA     space,A2
00001D0A  4EB8 183E               1482      JSR     addBuffer
00001D0E                          1483      
00001D0E  7001                    1484      MOVE.L  #$00000001,D0
00001D10  4EB9 00003FFC           1485      JSR     compareEAModeMOVE    
00001D16                          1486  
00001D16  6000 F496               1487      BRA     askForNextCode
00001D1A                          1488      
00001D1A                          1489  OPmoveal
00001D1A  284B                    1490      MOVE.L  A3,A4   *******putting the pointer back to the start of EA************
00001D1C  4EB8 1596               1491      JSR     getNext2Bytes
00001D20                          1492  
00001D20  45F9 00005401           1493      LEA     LetterM,A2
00001D26  4EB8 183E               1494      JSR     addBuffer
00001D2A  45F9 00005403           1495      LEA     LetterO,A2
00001D30  4EB8 183E               1496      JSR     addBuffer
00001D34  45F9 0000540A           1497      LEA     LetterV,A2
00001D3A  4EB8 183E               1498      JSR     addBuffer
00001D3E  45F9 000053F9           1499      LEA     LetterE,A2
00001D44  4EB8 183E               1500      JSR     addBuffer
00001D48  45F9 000053F5           1501      LEA     LetterA,A2
00001D4E  4EB8 183E               1502      JSR     addBuffer
00001D52  45F9 00005421           1503      LEA     period,A2
00001D58  4EB8 183E               1504      JSR     addBuffer
00001D5C  45F9 00005400           1505      LEA     LetterL,A2
00001D62  4EB8 183E               1506      JSR     addBuffer
00001D66  45F9 0000541F           1507      LEA     space,A2
00001D6C  4EB8 183E               1508      JSR     addBuffer
00001D70  7010                    1509      MOVE.L  #$00000010,D0
00001D72  4EB9 000040A0           1510      JSR     compareEAModeMOVEA
00001D78                          1511      
00001D78  6000 F434               1512      BRA     askForNextCode
00001D7C                          1513      
00001D7C                          1514  OPmoveaw
00001D7C  284B                    1515      MOVE.L  A3,A4   *******putting the pointer back to the start of EA************
00001D7E  4EB8 1596               1516      JSR     getNext2Bytes
00001D82                          1517      
00001D82  45F9 00005401           1518      LEA     LetterM,A2
00001D88  4EB8 183E               1519      JSR     addBuffer
00001D8C  45F9 00005403           1520      LEA     LetterO,A2
00001D92  4EB8 183E               1521      JSR     addBuffer
00001D96  45F9 0000540A           1522      LEA     LetterV,A2
00001D9C  4EB8 183E               1523      JSR     addBuffer
00001DA0  45F9 000053F9           1524      LEA     LetterE,A2
00001DA6  4EB8 183E               1525      JSR     addBuffer
00001DAA  45F9 000053F5           1526      LEA     LetterA,A2
00001DB0  4EB8 183E               1527      JSR     addBuffer
00001DB4  45F9 00005421           1528      LEA     period,A2
00001DBA  4EB8 183E               1529      JSR     addBuffer
00001DBE  45F9 0000540B           1530      LEA     LetterW,A2
00001DC4  4EB8 183E               1531      JSR     addBuffer
00001DC8  45F9 0000541F           1532      LEA     space,A2
00001DCE  4EB8 183E               1533      JSR     addBuffer
00001DD2  7011                    1534      MOVE.L  #$00000011,D0
00001DD4  4EB9 000040A0           1535      JSR     compareEAModeMOVEA
00001DDA                          1536      
00001DDA  6000 F3D2               1537      BRA     askForNextCode
00001DDE                          1538      
00001DDE                          1539  OPmovel
00001DDE  284B                    1540      MOVE.L  A3,A4
00001DE0  4EB8 1596               1541      JSR     getNext2Bytes
00001DE4                          1542  
00001DE4  45F9 00005401           1543      LEA     LetterM,A2
00001DEA  4EB8 183E               1544      JSR     addBuffer
00001DEE  45F9 00005403           1545      LEA     LetterO,A2
00001DF4  4EB8 183E               1546      JSR     addBuffer
00001DF8  45F9 0000540A           1547      LEA     LetterV,A2
00001DFE  4EB8 183E               1548      JSR     addBuffer
00001E02  45F9 000053F9           1549      LEA     LetterE,A2
00001E08  4EB8 183E               1550      JSR     addBuffer
00001E0C  45F9 00005421           1551      LEA     period,A2
00001E12  4EB8 183E               1552      JSR     addBuffer
00001E16  45F9 00005400           1553      LEA     LetterL,A2
00001E1C  4EB8 183E               1554      JSR     addBuffer
00001E20  45F9 0000541F           1555      LEA     space,A2
00001E26  4EB8 183E               1556      JSR     addBuffer
00001E2A  7010                    1557      MOVE.L  #$00000010,D0
00001E2C  4EB9 00003FFC           1558      JSR     compareEAModeMOVE  
00001E32                          1559      
00001E32  6000 F37A               1560      BRA     askForNextCode
00001E36                          1561      
00001E36                          1562  OPmovew
00001E36  284B                    1563      MOVE.L  A3,A4
00001E38  4EB8 1596               1564      JSR     getNext2Bytes
00001E3C                          1565  
00001E3C  45F9 00005401           1566      LEA     LetterM,A2
00001E42  4EB8 183E               1567      JSR     addBuffer
00001E46  45F9 00005403           1568      LEA     LetterO,A2
00001E4C  4EB8 183E               1569      JSR     addBuffer
00001E50  45F9 0000540A           1570      LEA     LetterV,A2
00001E56  4EB8 183E               1571      JSR     addBuffer
00001E5A  45F9 000053F9           1572      LEA     LetterE,A2
00001E60  4EB8 183E               1573      JSR     addBuffer
00001E64  45F9 00005421           1574      LEA     period,A2
00001E6A  4EB8 183E               1575      JSR     addBuffer
00001E6E  45F9 0000540B           1576      LEA     LetterW,A2
00001E74  4EB8 183E               1577      JSR     addBuffer
00001E78  45F9 0000541F           1578      LEA     space,A2
00001E7E  4EB8 183E               1579      JSR     addBuffer
00001E82  7011                    1580      MOVE.L  #$00000011,D0
00001E84  4EB9 00003FFC           1581      JSR     compareEAModeMOVE  
00001E8A                          1582      
00001E8A  6000 F322               1583      BRA     askForNextCode
00001E8E                          1584  
00001E8E                          1585  
00001E8E                          1586  *********************************************************************************
00001E8E                          1587  * Method Name: get12bit01
00001E8E                          1588  * Description: Grabs the next 2 bits and compares them to expected values
00001E8E                          1589  *********************************************************************************  
00001E8E                          1590  get12bit01
00001E8E  4EB8 1596               1591      JSR     getNext2Bytes
00001E92                          1592      
00001E92  0C02 0000               1593      CMPI.B  #$00,D2
00001E96  6700 0016               1594      BEQ     get34bit00v2
00001E9A                          1595      
00001E9A  0C02 0001               1596      CMPI.B  #$01,D2
00001E9E  6700 005A               1597      BEQ     get34bit01v2
00001EA2                          1598      
00001EA2  0C02 0010               1599      CMPI.B  #$10,D2
00001EA6  6700 006E               1600      BEQ     get34bit10v2
00001EAA                          1601      
00001EAA  6000 F754               1602      BRA     OPdata
00001EAE                          1603  
00001EAE                          1604  *********************************************************************************
00001EAE                          1605  * Method Name: get34bit00v2
00001EAE                          1606  * Description: Grabs the next 2 bits and compares them to expected values
00001EAE                          1607  * also checks for bclr and LEA
00001EAE                          1608  *********************************************************************************     
00001EAE                          1609  get34bit00v2
00001EAE                          1610      
00001EAE  4EB8 1596               1611      JSR     getNext2Bytes
00001EB2  2A02                    1612      MOVE.L  D2,D5
00001EB4  244C                    1613      MOVE.L  A4,A2
00001EB6                          1614      *********test for bclr******
00001EB6  2802                    1615      MOVE.L  D2,D4
00001EB8  E18C                    1616      LSL.L   #$08,D4
00001EBA                          1617      
00001EBA  4EB8 1596               1618      JSR     getNext2Bytes
00001EBE  D882                    1619      ADD.L   D2,D4
00001EC0  E88C                    1620      LSR.L   #4,D4
00001EC2                          1621      
00001EC2  284A                    1622      MOVE.L  A2,A4   LEA check
00001EC4  4EB8 1596               1623      JSR     getNext2Bytes
00001EC8  2602                    1624      MOVE.L  D2,D3
00001ECA  E14B                    1625      LSL.W   #$08,D3
00001ECC  4EB8 1596               1626      JSR     getNext2Bytes
00001ED0  D682                    1627      ADD.L   D2,D3
00001ED2  C6BC 00000111           1628      AND.L   #$00000111,D3
00001ED8  0C43 0111               1629      CMPI.W  #$0111,D3
00001EDC  6700 0584               1630      BEQ     OPlea
00001EE0                          1631      
00001EE0  284A                    1632      MOVE.L  A2,A4
00001EE2  1805                    1633      MOVE.B  D5,D4   ******saving whether movem is reg to mem or mem to reg********
00001EE4  2005                    1634      MOVE.L  D5,D0
00001EE6                          1635      
00001EE6  0C05 0001               1636      CMPI.B  #$01,D5
00001EEA  6700 004A               1637      BEQ     get56bit01v2
00001EEE                          1638      
00001EEE  0C05 0011               1639      CMPI.B  #$11,D5
00001EF2  6700 0052               1640      BEQ     get56bit11v2
00001EF6                          1641      
00001EF6  6000 0066               1642      BRA     get56bit1xv2
00001EFA                          1643  
00001EFA                          1644  *********************************************************************************
00001EFA                          1645  * Method Name: get34bit01v2
00001EFA                          1646  * Description: Grabs the next 2 bits and compares them to expected values
00001EFA                          1647  *********************************************************************************     
00001EFA                          1648  get34bit01v2
00001EFA  244C                    1649      MOVE.L  A4,A2
00001EFC                          1650      
00001EFC  4EB8 1596               1651      JSR     getNext2Bytes
00001F00  4EB8 1596               1652      JSR     getNext2Bytes
00001F04                          1653      
00001F04  C4BC 00000001           1654      AND.L   #$00000001,D2
00001F0A  0C02 0001               1655      CMPI.B  #$01,D2
00001F0E  6700 0104               1656      BEQ     OPsubq
00001F12                          1657      
00001F12  6000 F6EC               1658      BRA     OPdata
00001F16                          1659      
00001F16                          1660  *********************************************************************************
00001F16                          1661  * Method Name: get34bit10v2
00001F16                          1662  * Description: Grabs the next 2 bits and compares them to expected values
00001F16                          1663  *********************************************************************************     
00001F16                          1664  get34bit10v2
00001F16  4EB8 1596               1665      JSR     getNext2Bytes
00001F1A                          1666      
00001F1A  0C02 0000               1667      CMPI.B  #$00,D2
00001F1E  6700 0006               1668      BEQ     get56bit00v2part2
00001F22                          1669      
00001F22  6000 057C               1670      BRA     OPbcc
00001F26                          1671  *********************************************************************************
00001F26                          1672  * Method Name: get56bit00v2part2
00001F26                          1673  * Description: Grabs the next 2 bits and compares them to expected values
00001F26                          1674  *********************************************************************************     
00001F26                          1675  get56bit00v2part2
00001F26  4EB8 1596               1676      JSR     getNext2Bytes
00001F2A                          1677      
00001F2A  0C02 0000               1678      CMPI.B  #$00,D2
00001F2E  6700 00AE               1679      BEQ     OPbra
00001F32                          1680      
00001F32  6000 F6CC               1681      BRA     OPdata
00001F36                          1682  *********************************************************************************
00001F36                          1683  * Method Name: get56bit01v2
00001F36                          1684  * Description: Grabs the next 2 bits and compares them to expected values
00001F36                          1685  *********************************************************************************  
00001F36                          1686  get56bit01v2
00001F36  4EB8 1596               1687      JSR     getNext2Bytes
00001F3A                          1688      
00001F3A  0C02 0000               1689      CMPI.B  #$00,D2
00001F3E  6700 0208               1690      BEQ     OPneg
00001F42                          1691  
00001F42  6000 F6BC               1692      BRA     OPdata   
00001F46                          1693  *********************************************************************************
00001F46                          1694  * Method Name: get56bit11v2
00001F46                          1695  * Description: Grabs the next 2 bits and compares them to expected values
00001F46                          1696  *********************************************************************************     
00001F46                          1697  get56bit11v2
00001F46  4EB8 1596               1698      JSR     getNext2Bytes
00001F4A                          1699      
00001F4A  0C02 0000               1700      CMPI.B  #$00,D2
00001F4E  6700 001E               1701      BEQ     get78bit00v2
00001F52                          1702      
00001F52  0C02 0010               1703      CMPI.B  #$10,D2
00001F56  6700 0046               1704      BEQ     get78bit10v2
00001F5A                          1705      
00001F5A  6000 F6A4               1706      BRA     OPdata
00001F5E                          1707  *********************************************************************************
00001F5E                          1708  * Method Name: get56bit1xv2
00001F5E                          1709  * Description: Grabs the next 2 bits and compares them to expected values
00001F5E                          1710  *********************************************************************************     
00001F5E                          1711  get56bit1xv2
00001F5E  4EB8 1596               1712      JSR     getNext2Bytes
00001F62                          1713      
00001F62  0C02 0000               1714      CMPI.B  #$00,D2
00001F66  6700 001E               1715      BEQ     get78bit00v2part2
00001F6A                          1716      
00001F6A  6000 F694               1717      BRA     OPdata
00001F6E                          1718  *********************************************************************************
00001F6E                          1719  * Method Name: get78bit00v2
00001F6E                          1720  * Description: Grabs the next 2 bits and compares them to expected values
00001F6E                          1721  *********************************************************************************     
00001F6E                          1722  get78bit00v2
00001F6E  4EB8 1596               1723      JSR     getNext2Bytes
00001F72                          1724      
00001F72  0C02 0010               1725      CMPI.B  #$10,D2
00001F76  6700 02CE               1726      BEQ     OPmovemw
00001F7A                          1727      
00001F7A  0C02 0011               1728      CMPI.B  #$11,D2
00001F7E  6700 02D6               1729      BEQ     OPmoveml
00001F82                          1730  
00001F82  6000 F67C               1731      BRA     OPdata
00001F86                          1732  *********************************************************************************
00001F86                          1733  * Method Name: get78bit00v2part2
00001F86                          1734  * Description: Grabs the next 2 bits and compares them to expected values
00001F86                          1735  *********************************************************************************     
00001F86                          1736  get78bit00v2part2
00001F86  4EB8 1596               1737      JSR     getNext2Bytes
00001F8A                          1738      
00001F8A  0C02 0010               1739      CMPI.B  #$10,D2
00001F8E  6700 02B6               1740      BEQ     OPmovemw
00001F92                          1741      
00001F92  0C02 0011               1742      CMPI.B  #$11,D2
00001F96  6700 02BE               1743      BEQ     OPmoveml
00001F9A                          1744      
00001F9A  6000 F664               1745      BRA     OPdata
00001F9E                          1746  *********************************************************************************
00001F9E                          1747  * Method Name: get78bit10v2
00001F9E                          1748  * Description: Grabs the next 2 bits and compares them to expected values
00001F9E                          1749  *********************************************************************************     
00001F9E                          1750  get78bit10v2
00001F9E  4EB8 1596               1751      JSR     getNext2Bytes
00001FA2                          1752      
00001FA2  0C02 0001               1753      CMPI.B  #$01,D2
00001FA6  6700 000E               1754      BEQ     get910bit01v2
00001FAA                          1755  
00001FAA  0C02 0010               1756      CMPI.B  #$10,D2
00001FAE  6700 042E               1757      BEQ     OPjsr
00001FB2                          1758      
00001FB2  6000 F64C               1759      BRA     OPdata
00001FB6                          1760  *********************************************************************************
00001FB6                          1761  * Method Name: get910bit01v2
00001FB6                          1762  * Description: Grabs the next 2 bits and compares them to expected values
00001FB6                          1763  *********************************************************************************     
00001FB6                          1764  get910bit01v2
00001FB6  4EB8 1596               1765      JSR     getNext2Bytes
00001FBA  0C02 0011               1766      CMPI.B  #$11,D2
00001FBE  6700 0006               1767      BEQ     get1112bit11v2
00001FC2                          1768      
00001FC2  6000 F63C               1769      BRA     OPdata
00001FC6                          1770  *********************************************************************************
00001FC6                          1771  * Method Name: get1112bit11v2
00001FC6                          1772  * Description: Grabs the next 2 bits and compares them to expected values
00001FC6                          1773  *********************************************************************************     
00001FC6                          1774  get1112bit11v2
00001FC6  4EB8 1596               1775      JSR     getNext2Bytes
00001FCA  0C02 0000               1776      CMPI.B  #$00,D2
00001FCE  6700 0444               1777      BEQ     OPnop
00001FD2                          1778      
00001FD2  0C02 0001               1779      CMPI.B  #$01,D2
00001FD6  6700 045E               1780      BEQ     OPrts
00001FDA                          1781      
00001FDA  6000 F624               1782      BRA     OPdata
00001FDE                          1783  *********************************************************************************
00001FDE                          1784  * Method Name: OPbra
00001FDE                          1785  * Description: OPcode is bra, runs respective EA method
00001FDE                          1786  *********************************************************************************     
00001FDE                          1787  OPbra
00001FDE  4EB8 1596               1788      JSR     getNext2Bytes
00001FE2                          1789      
00001FE2  45F9 000053F6           1790      LEA     LetterB,A2
00001FE8  4EB8 183E               1791      JSR     addBuffer
00001FEC  45F9 00005406           1792      LEA     LetterR,A2
00001FF2  4EB8 183E               1793      JSR     addBuffer
00001FF6  45F9 000053F5           1794      LEA     LetterA,A2
00001FFC  4EB8 183E               1795      JSR     addBuffer
00002000  45F9 0000541F           1796      LEA     space,A2
00002006  4EB8 183E               1797      JSR     addBuffer
0000200A                          1798      
0000200A  4EB9 00004BB8           1799      JSR     compareLabelBcc
00002010                          1800      
00002010  6000 F19C               1801      BRA     askForNextCode
00002014                          1802  
00002014                          1803  *********************************************************************************
00002014                          1804  * Method Name: OPsubq
00002014                          1805  * Description: OPcode is subq, runs respective EA method and size
00002014                          1806  *********************************************************************************   
00002014                          1807  OPsubq
00002014  284A                    1808      MOVE.L  A2,A4
00002016  4EB8 1596               1809      JSR     getNext2Bytes
0000201A                          1810      
0000201A  2602                    1811      MOVE.L  D2,D3
0000201C  E14B                    1812      LSL.W   #08,D3
0000201E  4EB8 1596               1813      JSR     getNext2Bytes
00002022  D682                    1814      ADD.L   D2,D3
00002024  E84B                    1815      LSR.W   #04,D3
00002026                          1816      
00002026  4EB8 1596               1817      JSR     getNext2Bytes
0000202A                          1818      
0000202A  0C02 0000               1819      CMPI.B  #$00,D2
0000202E  6700 0016               1820      BEQ     OPsubqb
00002032                          1821      
00002032  0C02 0001               1822      CMPI.B  #$01,D2
00002036  6700 0064               1823      BEQ     OPsubqw
0000203A                          1824      
0000203A  0C02 0010               1825      CMPI.B  #$10,D2
0000203E  6700 00B2               1826      BEQ     OPsubql
00002042                          1827  
00002042  6000 F5BC               1828      BRA     OPdata
00002046                          1829  OPsubqb
00002046  4EB8 1596               1830      JSR     getNext2Bytes
0000204A  45F9 00005407           1831      LEA     LetterS,A2
00002050  4EB8 183E               1832      JSR     addBuffer
00002054  45F9 00005409           1833      LEA     LetterU,A2
0000205A  4EB8 183E               1834      JSR     addBuffer
0000205E  45F9 000053F6           1835      LEA     LetterB,A2
00002064  4EB8 183E               1836      JSR     addBuffer
00002068  45F9 00005405           1837      LEA     LetterQ,A2
0000206E  4EB8 183E               1838      JSR     addBuffer
00002072  45F9 00005421           1839      LEA     period,A2
00002078  4EB8 183E               1840      JSR     addBuffer
0000207C  45F9 000053F6           1841      LEA     LetterB,A2
00002082  4EB8 183E               1842      JSR     addBuffer
00002086  45F9 0000541F           1843      LEA     space,A2
0000208C  4EB8 183E               1844      JSR     addBuffer
00002090  7001                    1845      MOVE.L  #$00000001,D0
00002092  4EB9 000043DE           1846      JSR     compareEAModeSUBQ
00002098                          1847      
00002098  6000 F114               1848      BRA     askForNextCode
0000209C                          1849  OPsubqw
0000209C  4EB8 1596               1850      JSR     getNext2Bytes
000020A0  45F9 00005407           1851      LEA     LetterS,A2
000020A6  4EB8 183E               1852      JSR     addBuffer
000020AA  45F9 00005409           1853      LEA     LetterU,A2
000020B0  4EB8 183E               1854      JSR     addBuffer
000020B4  45F9 000053F6           1855      LEA     LetterB,A2
000020BA  4EB8 183E               1856      JSR     addBuffer
000020BE  45F9 00005405           1857      LEA     LetterQ,A2
000020C4  4EB8 183E               1858      JSR     addBuffer
000020C8  45F9 00005421           1859      LEA     period,A2
000020CE  4EB8 183E               1860      JSR     addBuffer
000020D2  45F9 0000540B           1861      LEA     LetterW,A2
000020D8  4EB8 183E               1862      JSR     addBuffer
000020DC  45F9 0000541F           1863      LEA     space,A2
000020E2  4EB8 183E               1864      JSR     addBuffer
000020E6  7011                    1865      MOVE.L  #$00000011,D0
000020E8  4EB9 000043DE           1866      JSR     compareEAModeSUBQ
000020EE                          1867      
000020EE  6000 F0BE               1868      BRA     askForNextCode
000020F2                          1869  OPsubql
000020F2  4EB8 1596               1870      JSR     getNext2Bytes
000020F6  45F9 00005407           1871      LEA     LetterS,A2
000020FC  4EB8 183E               1872      JSR     addBuffer
00002100  45F9 00005409           1873      LEA     LetterU,A2
00002106  4EB8 183E               1874      JSR     addBuffer
0000210A  45F9 000053F6           1875      LEA     LetterB,A2
00002110  4EB8 183E               1876      JSR     addBuffer
00002114  45F9 00005405           1877      LEA     LetterQ,A2
0000211A  4EB8 183E               1878      JSR     addBuffer
0000211E  45F9 00005421           1879      LEA     period,A2
00002124  4EB8 183E               1880      JSR     addBuffer
00002128  45F9 00005400           1881      LEA     LetterL,A2
0000212E  4EB8 183E               1882      JSR     addBuffer
00002132  45F9 0000541F           1883      LEA     space,A2
00002138  4EB8 183E               1884      JSR     addBuffer
0000213C  7010                    1885      MOVE.L  #$00000010,D0
0000213E  4EB9 000043DE           1886      JSR     compareEAModeSUBQ
00002144                          1887      
00002144  6000 F068               1888      BRA     askForNextCode
00002148                          1889  
00002148                          1890  *********************************************************************************
00002148                          1891  * Method Name: OPneg
00002148                          1892  * Description: OPcode is neg, runs respective EA method and size
00002148                          1893  *********************************************************************************   
00002148                          1894  OPneg
00002148  4EB8 1596               1895      JSR     getNext2Bytes
0000214C                          1896      
0000214C  0C02 0000               1897      CMPI.B  #$00,D2
00002150  6700 0016               1898      BEQ     OPnegb
00002154                          1899      
00002154  0C02 0001               1900      CMPI.B  #$01,D2
00002158  6700 0058               1901      BEQ     OPnegw
0000215C                          1902      
0000215C  0C02 0010               1903      CMPI.B  #$10,D2
00002160  6700 009A               1904      BEQ     OPnegl
00002164                          1905      
00002164  6000 F49A               1906      BRA     OPdata
00002168                          1907  OPnegb
00002168  4EB8 1596               1908      JSR     getNext2Bytes
0000216C                          1909      
0000216C  45F9 00005402           1910      LEA     LetterN,A2
00002172  4EB8 183E               1911      JSR     addBuffer
00002176  45F9 000053F9           1912      LEA     LetterE,A2
0000217C  4EB8 183E               1913      JSR     addBuffer
00002180  45F9 000053FB           1914      LEA     LetterG,A2
00002186  4EB8 183E               1915      JSR     addBuffer
0000218A  45F9 00005421           1916      LEA     period,A2
00002190  4EB8 183E               1917      JSR     addBuffer
00002194  45F9 000053F6           1918      LEA     LetterB,A2
0000219A  4EB8 183E               1919      JSR     addBuffer
0000219E  45F9 0000541F           1920      LEA     space,A2
000021A4  4EB8 183E               1921      JSR     addBuffer
000021A8  4EB9 00004346           1922      JSR     compareEAModeNEG
000021AE                          1923      
000021AE  6000 EFFE               1924      BRA     askForNextCode
000021B2                          1925  OPnegw
000021B2  4EB8 1596               1926      JSR     getNext2Bytes
000021B6                          1927      
000021B6  45F9 00005402           1928      LEA     LetterN,A2
000021BC  4EB8 183E               1929      JSR     addBuffer
000021C0  45F9 000053F9           1930      LEA     LetterE,A2
000021C6  4EB8 183E               1931      JSR     addBuffer
000021CA  45F9 000053FB           1932      LEA     LetterG,A2
000021D0  4EB8 183E               1933      JSR     addBuffer
000021D4  45F9 00005421           1934      LEA     period,A2
000021DA  4EB8 183E               1935      JSR     addBuffer
000021DE  45F9 0000540B           1936      LEA     LetterW,A2
000021E4  4EB8 183E               1937      JSR     addBuffer
000021E8  45F9 0000541F           1938      LEA     space,A2
000021EE  4EB8 183E               1939      JSR     addBuffer
000021F2  4EB9 00004346           1940      JSR     compareEAModeNEG
000021F8                          1941      
000021F8  6000 EFB4               1942      BRA     askForNextCode
000021FC                          1943  OPnegl
000021FC  4EB8 1596               1944      JSR     getNext2Bytes
00002200                          1945      
00002200  45F9 00005402           1946      LEA     LetterN,A2
00002206  4EB8 183E               1947      JSR     addBuffer
0000220A  45F9 000053F9           1948      LEA     LetterE,A2
00002210  4EB8 183E               1949      JSR     addBuffer
00002214  45F9 000053FB           1950      LEA     LetterG,A2
0000221A  4EB8 183E               1951      JSR     addBuffer
0000221E  45F9 00005421           1952      LEA     period,A2
00002224  4EB8 183E               1953      JSR     addBuffer
00002228  45F9 00005400           1954      LEA     LetterL,A2
0000222E  4EB8 183E               1955      JSR     addBuffer
00002232  45F9 0000541F           1956      LEA     space,A2
00002238  4EB8 183E               1957      JSR     addBuffer
0000223C  4EB9 00004346           1958      JSR     compareEAModeNEG
00002242                          1959      
00002242  6000 EF6A               1960      BRA     askForNextCode
00002246                          1961  
00002246                          1962  *********************************************************************************
00002246                          1963  * Method Name: OPmovem
00002246                          1964  * Description: OPcode is movem, runs respective EA method and size. Runs a different
00002246                          1965  * method based on whether it is from register to memory or memory to register
00002246                          1966  *********************************************************************************   
00002246                          1967  OPmovemw
00002246  0C00 0010               1968      CMPI.B  #$10,D0
0000224A  6700 001A               1969      BEQ     OPmovemwregtomem
0000224E                          1970      
0000224E  0C00 0011               1971      CMPI.B  #$11,D0
00002252  6700 00CE               1972      BEQ     OPmovemwmemtoreg
00002256                          1973  OPmoveml
00002256  0C00 0010               1974      CMPI.B  #$10,D0
0000225A  6700 0068               1975      BEQ     OPmovemlregtomem
0000225E                          1976      
0000225E  0C00 0011               1977      CMPI.B  #$11,D0
00002262  6700 011C               1978      BEQ     OPmovemlmemtoreg
00002266                          1979   
00002266                          1980  OPmovemwregtomem
00002266  4EB8 1596               1981      JSR     getNext2Bytes
0000226A                          1982  
0000226A  45F9 00005401           1983      LEA     LetterM,A2
00002270  4EB8 183E               1984      JSR     addBuffer
00002274  45F9 00005403           1985      LEA     LetterO,A2
0000227A  4EB8 183E               1986      JSR     addBuffer
0000227E  45F9 0000540A           1987      LEA     LetterV,A2
00002284  4EB8 183E               1988      JSR     addBuffer
00002288  45F9 000053F9           1989      LEA     LetterE,A2
0000228E  4EB8 183E               1990      JSR     addBuffer
00002292  45F9 00005401           1991      LEA     LetterM,A2
00002298  4EB8 183E               1992      JSR     addBuffer
0000229C  45F9 00005421           1993      LEA     period,A2
000022A2  4EB8 183E               1994      JSR     addBuffer
000022A6  45F9 0000540B           1995      LEA     LetterW,A2
000022AC  4EB8 183E               1996      JSR     addBuffer
000022B0  45F9 0000541F           1997      LEA     space,A2
000022B6  4EB8 183E               1998      JSR     addBuffer
000022BA                          1999  
000022BA  4EB9 00004520           2000      JSR     compareEAModeMOVEMreg
000022C0                          2001      
000022C0  6000 EEEC               2002      BRA     askForNextCode
000022C4                          2003      
000022C4                          2004  OPmovemlregtomem
000022C4  4EB8 1596               2005      JSR     getNext2Bytes
000022C8                          2006      
000022C8  45F9 00005401           2007      LEA     LetterM,A2
000022CE  4EB8 183E               2008      JSR     addBuffer
000022D2  45F9 00005403           2009      LEA     LetterO,A2
000022D8  4EB8 183E               2010      JSR     addBuffer
000022DC  45F9 0000540A           2011      LEA     LetterV,A2
000022E2  4EB8 183E               2012      JSR     addBuffer
000022E6  45F9 000053F9           2013      LEA     LetterE,A2
000022EC  4EB8 183E               2014      JSR     addBuffer
000022F0  45F9 00005401           2015      LEA     LetterM,A2
000022F6  4EB8 183E               2016      JSR     addBuffer
000022FA  45F9 00005421           2017      LEA     period,A2
00002300  4EB8 183E               2018      JSR     addBuffer
00002304  45F9 00005400           2019      LEA     LetterL,A2
0000230A  4EB8 183E               2020      JSR     addBuffer
0000230E  45F9 0000541F           2021      LEA     space,A2
00002314  4EB8 183E               2022      JSR     addBuffer
00002318                          2023      
00002318  4EB9 00004520           2024      JSR     compareEAModeMOVEMreg
0000231E                          2025      
0000231E  6000 EE8E               2026      BRA     askForNextCode
00002322                          2027    
00002322                          2028  OPmovemwmemtoreg
00002322  4EB8 1596               2029      JSR     getNext2Bytes
00002326                          2030      
00002326  45F9 00005401           2031      LEA     LetterM,A2
0000232C  4EB8 183E               2032      JSR     addBuffer
00002330  45F9 00005403           2033      LEA     LetterO,A2
00002336  4EB8 183E               2034      JSR     addBuffer
0000233A  45F9 0000540A           2035      LEA     LetterV,A2
00002340  4EB8 183E               2036      JSR     addBuffer
00002344  45F9 000053F9           2037      LEA     LetterE,A2
0000234A  4EB8 183E               2038      JSR     addBuffer
0000234E  45F9 00005401           2039      LEA     LetterM,A2
00002354  4EB8 183E               2040      JSR     addBuffer
00002358  45F9 00005421           2041      LEA     period,A2
0000235E  4EB8 183E               2042      JSR     addBuffer
00002362  45F9 0000540B           2043      LEA     LetterW,A2
00002368  4EB8 183E               2044      JSR     addBuffer
0000236C  45F9 0000541F           2045      LEA     space,A2
00002372  4EB8 183E               2046      JSR     addBuffer
00002376                          2047      
00002376  4EB9 00004690           2048      JSR     compareEAModeMOVEMmem
0000237C                          2049      
0000237C  6000 EE30               2050      BRA     askForNextCode
00002380                          2051      
00002380                          2052  OPmovemlmemtoreg
00002380  4EB8 1596               2053      JSR     getNext2Bytes
00002384                          2054      
00002384  45F9 00005401           2055      LEA     LetterM,A2
0000238A  4EB8 183E               2056      JSR     addBuffer
0000238E  45F9 00005403           2057      LEA     LetterO,A2
00002394  4EB8 183E               2058      JSR     addBuffer
00002398  45F9 0000540A           2059      LEA     LetterV,A2
0000239E  4EB8 183E               2060      JSR     addBuffer
000023A2  45F9 000053F9           2061      LEA     LetterE,A2
000023A8  4EB8 183E               2062      JSR     addBuffer
000023AC  45F9 00005401           2063      LEA     LetterM,A2
000023B2  4EB8 183E               2064      JSR     addBuffer
000023B6  45F9 00005421           2065      LEA     period,A2
000023BC  4EB8 183E               2066      JSR     addBuffer
000023C0  45F9 00005400           2067      LEA     LetterL,A2
000023C6  4EB8 183E               2068      JSR     addBuffer
000023CA  45F9 0000541F           2069      LEA     space,A2
000023D0  4EB8 183E               2070      JSR     addBuffer
000023D4                          2071      
000023D4  4EB9 00004690           2072      JSR     compareEAModeMOVEMmem
000023DA                          2073      
000023DA  6000 EDD2               2074      BRA     askForNextCode
000023DE                          2075  
000023DE                          2076  *********************************************************************************
000023DE                          2077  * Method Name: OPjsr
000023DE                          2078  * Description: OPcode is jsr, runs respective EA method and size
000023DE                          2079  *********************************************************************************       
000023DE                          2080  OPjsr
000023DE  4EB8 1596               2081      JSR     getNext2Bytes
000023E2  45F9 000053FE           2082      LEA     LetterJ,A2
000023E8  4EB8 183E               2083      JSR     addBuffer
000023EC  45F9 00005407           2084      LEA     LetterS,A2
000023F2  4EB8 183E               2085      JSR     addBuffer
000023F6  45F9 00005406           2086      LEA     LetterR,A2
000023FC  4EB8 183E               2087      JSR     addBuffer
00002400  45F9 0000541F           2088      LEA     space,A2
00002406  4EB8 183E               2089      JSR     addBuffer
0000240A                          2090      
0000240A  4EB9 0000408C           2091      JSR     compareEAModeJSR
00002410  6000 ED9C               2092      BRA     askForNextCode
00002414                          2093  *********************************************************************************
00002414                          2094  * Method Name: OPnop
00002414                          2095  * Description: OPcode is nop, runs respective EA method and size
00002414                          2096  *********************************************************************************       
00002414                          2097  OPnop
00002414  45F9 00005402           2098      LEA     LetterN,A2
0000241A  4EB8 183E               2099      JSR     addBuffer
0000241E  45F9 00005403           2100      LEA     LetterO,A2
00002424  4EB8 183E               2101      JSR     addBuffer
00002428  45F9 00005404           2102      LEA     LetterP,A2
0000242E  4EB8 183E               2103      JSR     addBuffer
00002432  6000 ED7A               2104      BRA     askForNextCode
00002436                          2105  *********************************************************************************
00002436                          2106  * Method Name: OPrts
00002436                          2107  * Description: OPcode is rts, runs respective EA method and size
00002436                          2108  *********************************************************************************       
00002436                          2109  OPrts
00002436  45F9 00005406           2110      LEA     LetterR,A2
0000243C  4EB8 183E               2111      JSR     addBuffer
00002440  45F9 00005408           2112      LEA     LetterT,A2
00002446  4EB8 183E               2113      JSR     addBuffer
0000244A  45F9 00005407           2114      LEA     LetterS,A2
00002450  4EB8 183E               2115      JSR     addBuffer
00002454  45F9 0000541F           2116      LEA     space,A2
0000245A  4EB8 183E               2117      JSR     addBuffer
0000245E                          2118      
0000245E  6000 ED4E               2119      BRA     askForNextCode
00002462                          2120  *********************************************************************************
00002462                          2121  * Method Name: OPlea
00002462                          2122  * Description: OPcode is lea, runs respective EA method and size
00002462                          2123  *********************************************************************************       
00002462                          2124  OPlea
00002462  284A                    2125      MOVE.L  A2,A4   *****restoring original LEA EA******
00002464  200C                    2126      MOVE.L  A4,D0
00002466  5540                    2127      SUBI    #2,D0
00002468  2840                    2128      MOVE.L  D0,A4
0000246A  4EB8 1596               2129      JSR     getNext2Bytes
0000246E                          2130      
0000246E  45F9 00005400           2131      LEA     LetterL,A2
00002474  4EB8 183E               2132      JSR     addBuffer
00002478  45F9 000053F9           2133      LEA     LetterE,A2
0000247E  4EB8 183E               2134      JSR     addBuffer
00002482  45F9 000053F5           2135      LEA     LetterA,A2
00002488  4EB8 183E               2136      JSR     addBuffer
0000248C  45F9 0000541F           2137      LEA     space,A2
00002492  4EB8 183E               2138      JSR     addBuffer
00002496                          2139      
00002496  4EB9 00004178           2140      JSR     compareEAModeLea
0000249C                          2141      
0000249C  6000 ED10               2142      BRA     askForNextCode
000024A0                          2143  *********************************************************************************
000024A0                          2144  * Method Name: OPbcc and others
000024A0                          2145  * Description: OPcode is bcc, runs respective EA method and size
000024A0                          2146  *********************************************************************************       
000024A0                          2147  OPbcc
000024A0  2602                    2148      MOVE.L  D2,D3
000024A2  E18B                    2149      LSL.L   #$08,D3
000024A4  4EB8 1596               2150      JSR     getNext2Bytes
000024A8  D642                    2151      ADD     D2,D3
000024AA                          2152      
000024AA  0C43 0100               2153      CMPI.W  #$0100,D3
000024AE  6700 0026               2154      BEQ     OPbccprint
000024B2                          2155      
000024B2  0C43 0101               2156      CMPI.W  #$0101,D3
000024B6  6700 0054               2157      BEQ     OPbcs
000024BA                          2158      
000024BA  0C43 1100               2159      CMPI.W  #$1100,D3
000024BE  6700 0082               2160      BEQ     OPbge
000024C2                          2161      
000024C2  0C43 1101               2162      CMPI.W  #$1101,D3
000024C6  6700 00B0               2163      BEQ     OPblt
000024CA                          2164      
000024CA  0C43 1000               2165      CMPI.W  #$1000,D3
000024CE  6700 00DE               2166      BEQ     OPbvc
000024D2                          2167      
000024D2  6000 F12C               2168      BRA     OPdata
000024D6                          2169      
000024D6                          2170  OPbccprint
000024D6  4EB8 1596               2171      JSR     getNext2Bytes
000024DA                          2172      
000024DA  45F9 000053F6           2173      LEA     LetterB,A2
000024E0  4EB8 183E               2174      JSR     addBuffer
000024E4  45F9 000053F7           2175      LEA     LetterC,A2
000024EA  4EB8 183E               2176      JSR     addBuffer
000024EE  45F9 000053F7           2177      LEA     LetterC,A2
000024F4  4EB8 183E               2178      JSR     addBuffer
000024F8  45F9 0000541F           2179      LEA     space,A2
000024FE  4EB8 183E               2180      JSR     addBuffer
00002502  4EB9 00004BB8           2181      JSR     compareLabelBcc
00002508                          2182      
00002508  6000 ECA4               2183      BRA     askForNextCode
0000250C                          2184      
0000250C                          2185  OPbcs
0000250C  4EB8 1596               2186      JSR     getNext2Bytes
00002510                          2187      
00002510  45F9 000053F6           2188      LEA     LetterB,A2
00002516  4EB8 183E               2189      JSR     addBuffer
0000251A  45F9 000053F7           2190      LEA     LetterC,A2
00002520  4EB8 183E               2191      JSR     addBuffer
00002524  45F9 00005407           2192      LEA     LetterS,A2
0000252A  4EB8 183E               2193      JSR     addBuffer
0000252E  45F9 0000541F           2194      LEA     space,A2
00002534  4EB8 183E               2195      JSR     addBuffer
00002538  4EB9 00004BB8           2196      JSR     compareLabelBcc
0000253E                          2197      
0000253E  6000 EC6E               2198      BRA     askForNextCode
00002542                          2199      
00002542                          2200  OPbge
00002542  4EB8 1596               2201      JSR     getNext2Bytes
00002546                          2202      
00002546  45F9 000053F6           2203      LEA     LetterB,A2
0000254C  4EB8 183E               2204      JSR     addBuffer
00002550  45F9 000053FB           2205      LEA     LetterG,A2
00002556  4EB8 183E               2206      JSR     addBuffer
0000255A  45F9 000053F9           2207      LEA     LetterE,A2
00002560  4EB8 183E               2208      JSR     addBuffer
00002564  45F9 0000541F           2209      LEA     space,A2
0000256A  4EB8 183E               2210      JSR     addBuffer
0000256E  4EB9 00004BB8           2211      JSR     compareLabelBcc
00002574                          2212      
00002574  6000 EC38               2213      BRA     askForNextCode
00002578                          2214      
00002578                          2215  OPblt
00002578  4EB8 1596               2216      JSR     getNext2Bytes
0000257C                          2217      
0000257C  45F9 000053F6           2218      LEA     LetterB,A2
00002582  4EB8 183E               2219      JSR     addBuffer
00002586  45F9 00005400           2220      LEA     LetterL,A2
0000258C  4EB8 183E               2221      JSR     addBuffer
00002590  45F9 00005408           2222      LEA     LetterT,A2
00002596  4EB8 183E               2223      JSR     addBuffer
0000259A  45F9 0000541F           2224      LEA     space,A2
000025A0  4EB8 183E               2225      JSR     addBuffer
000025A4  4EB9 00004BB8           2226      JSR     compareLabelBcc
000025AA                          2227      
000025AA  6000 EC02               2228      BRA     askForNextCode
000025AE                          2229      
000025AE                          2230  OPbvc
000025AE  4EB8 1596               2231      JSR     getNext2Bytes
000025B2                          2232      
000025B2  45F9 000053F6           2233      LEA     LetterB,A2
000025B8  4EB8 183E               2234      JSR     addBuffer
000025BC  45F9 0000540A           2235      LEA     LetterV,A2
000025C2  4EB8 183E               2236      JSR     addBuffer
000025C6  45F9 000053F7           2237      LEA     LetterC,A2
000025CC  4EB8 183E               2238      JSR     addBuffer
000025D0  45F9 0000541F           2239      LEA     space,A2
000025D6  4EB8 183E               2240      JSR     addBuffer
000025DA  4EB9 00004BB8           2241      JSR     compareLabelBcc
000025E0                          2242      
000025E0  6000 EBCC               2243      BRA     askForNextCode
000025E4                          2244      
000025E4                          2245  *********************************************************************************
000025E4                          2246  * Method Name: get12bit10
000025E4                          2247  * Description: grabs the next 2 bits and runs a method based on what they
000025E4                          2248  * are equal to
000025E4                          2249  *********************************************************************************   
000025E4                          2250  get12bit10
000025E4  4EB8 1596               2251      JSR     getNext2Bytes
000025E8                          2252      
000025E8  0C02 0000               2253      CMPI.B  #$00,D2
000025EC  6700 0016               2254      BEQ     get34bit00v3 
000025F0                          2255  
000025F0  0C02 0001               2256      CMPI.B  #$01,D2
000025F4  6700 03F2               2257      BEQ     OPsub
000025F8                          2258  
000025F8  0C02 0011               2259      CMPI.B  #$11,D2
000025FC  6700 0042               2260      BEQ     get34bit11v3  
00002600                          2261      
00002600  6000 EFFE               2262      BRA     OPdata
00002604                          2263  
00002604                          2264  *********************************************************************************
00002604                          2265  * Method Name: get34bit00v3
00002604                          2266  * Description: grabs the next 2 bits and runs a method based on what they
00002604                          2267  * are equal to. Also checks for OR
00002604                          2268  *********************************************************************************      
00002604                          2269  get34bit00v3
00002604  264C                    2270      MOVE.L  A4,A3   ******saving location of register for DIVUW and OR*********
00002606                          2271  
00002606  4EB8 1596               2272      JSR     getNext2Bytes
0000260A  4EB8 1596               2273      JSR     getNext2Bytes
0000260E  2602                    2274      MOVE.L  D2,D3
00002610  E18B                    2275      LSL.L   #$08,D3
00002612  4EB8 1596               2276      JSR     getNext2Bytes
00002616  D682                    2277      ADD.L   D2,D3
00002618  C6BC 00000111           2278      AND.L     #$00000111,D3
0000261E                          2279      
0000261E  0C43 0111               2280      CMPI.W  #$0111,D3
00002622  6700 036C               2281      BEQ     OPdivsw
00002626                          2282      
00002626                          2283      **************saving opmode for OR**************
00002626  284B                    2284      MOVE.L  A3,A4
00002628  4EB8 1596               2285      JSR     getNext2Bytes
0000262C                          2286      
0000262C  2602                    2287      MOVE.L  D2,D3
0000262E  C6BC 00000001           2288      AND.L     #$00000001,D3
00002634  E98B                    2289      LSL.L   #$04,D3
00002636                          2290      
00002636  4EB8 1596               2291      JSR     getNext2Bytes
0000263A                          2292      
0000263A  D642                    2293      ADD     D2,D3
0000263C                          2294      
0000263C  6000 0172               2295      BRA     OPor 
00002640                          2296  
00002640                          2297  *********************************************************************************
00002640                          2298  * Method Name: get34bit11v3
00002640                          2299  * Description: grabs the next 2 bits and runs a method based on what they
00002640                          2300  * are equal to and checks for EOR and CMP
00002640                          2301  *********************************************************************************      
00002640                          2302  get34bit11v3
00002640  264C                    2303      MOVE.L  A4,A3   **saving EOR register location
00002642                          2304      
00002642  4EB8 1596               2305      JSR     getNext2Bytes
00002646  4EB8 1596               2306      JSR     getNext2Bytes
0000264A  2602                    2307      MOVE.L  D2,D3
0000264C  E18B                    2308      LSL.L   #$08,D3
0000264E  4EB8 1596               2309      JSR     getNext2Bytes
00002652  D642                    2310      ADD     D2,D3
00002654  C6BC 00000111           2311      AND.L   #$00000111,D3
0000265A                          2312      
0000265A  284B                    2313      MOVE.L  A3,A4
0000265C                          2314      
0000265C  0C43 0100               2315      CMPI.W  #$0100,D3
00002660  6700 002E               2316      BEQ     OPeorb
00002664                          2317      
00002664  0C43 0101               2318      CMPI.W  #$0101,D3
00002668  6700 0086               2319      BEQ     OPeorw
0000266C                          2320      
0000266C  0C43 0110               2321      CMPI.W  #$0110,D3
00002670  6700 00DE               2322      BEQ     OPeorl
00002674                          2323      
00002674  0C43 0000               2324      CMPI.W  #$0000,D3
00002678  6700 0564               2325      BEQ     OPcmpb
0000267C                          2326      
0000267C  0C43 0001               2327      CMPI.W  #$0001,D3
00002680  6700 05BE               2328      BEQ     OPcmpw
00002684                          2329      
00002684  0C43 0010               2330      CMPI.W  #$0010,D3
00002688  6700 0618               2331      BEQ     OPcmpl
0000268C                          2332      
0000268C  6000 EF72               2333      BRA     OPdata
00002690                          2334      
00002690                          2335  OPeorb
00002690  4EB8 1596               2336      JSR     getNext2Bytes
00002694  2A02                    2337      MOVE.L  D2,D5
00002696  E18D                    2338      LSL.L   #08,D5
00002698  4EB8 1596               2339      JSR     getNext2Bytes
0000269C  DA82                    2340      ADD.L   D2,D5
0000269E  E88D                    2341      LSR.L   #04,D5
000026A0  2C05                    2342      MOVE.L  D5,D6
000026A2  4EB8 1596               2343      JSR     getNext2Bytes
000026A6  4EB8 1596               2344      JSR     getNext2Bytes
000026AA  45F9 000053F9           2345      LEA     LetterE,A2
000026B0  4EB8 183E               2346      JSR     addBuffer
000026B4  45F9 00005403           2347      LEA     LetterO,A2
000026BA  4EB8 183E               2348      JSR     addBuffer
000026BE  45F9 00005406           2349      LEA     LetterR,A2
000026C4  4EB8 183E               2350      JSR     addBuffer
000026C8  45F9 00005421           2351      LEA     period,A2
000026CE  4EB8 183E               2352      JSR     addBuffer
000026D2  45F9 000053F6           2353      LEA     LetterB,A2
000026D8  4EB8 183E               2354      JSR     addBuffer
000026DC  45F9 0000541F           2355      LEA     space,A2
000026E2  4EB8 183E               2356      JSR     addBuffer
000026E6  4EB9 00004254           2357      JSR     compareEAModeEOR
000026EC                          2358      
000026EC  6000 EAC0               2359      BRA     askForNextCode
000026F0                          2360  OPeorw
000026F0  4EB8 1596               2361      JSR     getNext2Bytes
000026F4  2A02                    2362      MOVE.L  D2,D5
000026F6  E18D                    2363      LSL.L   #08,D5
000026F8  4EB8 1596               2364      JSR     getNext2Bytes
000026FC  DA82                    2365      ADD.L   D2,D5
000026FE  E88D                    2366      LSR.L   #04,D5
00002700  2C05                    2367      MOVE.L  D5,D6
00002702  4EB8 1596               2368      JSR     getNext2Bytes
00002706  4EB8 1596               2369      JSR     getNext2Bytes
0000270A  45F9 000053F9           2370      LEA     LetterE,A2
00002710  4EB8 183E               2371      JSR     addBuffer
00002714  45F9 00005403           2372      LEA     LetterO,A2
0000271A  4EB8 183E               2373      JSR     addBuffer
0000271E  45F9 00005406           2374      LEA     LetterR,A2
00002724  4EB8 183E               2375      JSR     addBuffer
00002728  45F9 00005421           2376      LEA     period,A2
0000272E  4EB8 183E               2377      JSR     addBuffer
00002732  45F9 0000540B           2378      LEA     LetterW,A2
00002738  4EB8 183E               2379      JSR     addBuffer
0000273C  45F9 0000541F           2380      LEA     space,A2
00002742  4EB8 183E               2381      JSR     addBuffer
00002746  4EB9 00004254           2382      JSR     compareEAModeEOR
0000274C                          2383      
0000274C  6000 EA60               2384      BRA     askForNextCode
00002750                          2385  OPeorl
00002750  4EB8 1596               2386      JSR     getNext2Bytes
00002754  2A02                    2387      MOVE.L  D2,D5
00002756  E18D                    2388      LSL.L   #08,D5
00002758  4EB8 1596               2389      JSR     getNext2Bytes
0000275C  DA82                    2390      ADD.L   D2,D5
0000275E  E88D                    2391      LSR.L   #04,D5
00002760  2C05                    2392      MOVE.L  D5,D6
00002762  4EB8 1596               2393      JSR     getNext2Bytes
00002766  4EB8 1596               2394      JSR     getNext2Bytes
0000276A  45F9 000053F9           2395      LEA     LetterE,A2
00002770  4EB8 183E               2396      JSR     addBuffer
00002774  45F9 00005403           2397      LEA     LetterO,A2
0000277A  4EB8 183E               2398      JSR     addBuffer
0000277E  45F9 00005406           2399      LEA     LetterR,A2
00002784  4EB8 183E               2400      JSR     addBuffer
00002788  45F9 00005421           2401      LEA     period,A2
0000278E  4EB8 183E               2402      JSR     addBuffer
00002792  45F9 00005400           2403      LEA     LetterL,A2
00002798  4EB8 183E               2404      JSR     addBuffer
0000279C  45F9 0000541F           2405      LEA     space,A2
000027A2  4EB8 183E               2406      JSR     addBuffer
000027A6  4EB9 00004254           2407      JSR     compareEAModeEOR
000027AC                          2408      
000027AC  6000 EA00               2409      BRA     askForNextCode 
000027B0                          2410  
000027B0                          2411  *********************************************************************************
000027B0                          2412  * Method Name: OPor
000027B0                          2413  * Description: OP code is OR so run respective EA method based on size. Or ea code
000027B0                          2414  * is the same as ADD, so we just use the same method
000027B0                          2415  *********************************************************************************      
000027B0                          2416  OPor
000027B0  284B                    2417      MOVE.L  A3,A4
000027B2  4EB8 1596               2418      JSR     getNext2Bytes
000027B6  4EB8 1596               2419      JSR     getNext2Bytes
000027BA  4EB8 1596               2420      JSR     getNext2Bytes
000027BE  4EB8 1596               2421      JSR     getNext2Bytes
000027C2  4EB8 1596               2422      JSR     getNext2Bytes
000027C6  C4BC 00000001           2423      AND.L   #$00000001,D2
000027CC  0C82 00000001           2424      CMPI.L  #$00000001,D2
000027D2  6700 EE2C               2425      BEQ     OPdata
000027D6                          2426  
000027D6  284B                    2427      MOVE.L  A3,A4   loading back the start of EA for OR
000027D8  4EB8 1596               2428      JSR     getNext2Bytes
000027DC  4EB8 1596               2429      JSR     getNext2Bytes
000027E0  2602                    2430      MOVE.L  D2,D3
000027E2  E14B                    2431      LSL.W   #08,D3
000027E4  4EB8 1596               2432      JSR     getNext2Bytes
000027E8  D682                    2433      ADD.L   D2,D3
000027EA  C67C 0111               2434      AND     #$00000111,D3
000027EE                          2435      
000027EE  284B                    2436      MOVE.L  A3,A4
000027F0  4EB8 1596               2437      JSR     getNext2Bytes
000027F4                          2438      
000027F4  0C43 0000               2439      CMPI.W  #$0000,D3
000027F8  6700 002E               2440      BEQ     OPorb
000027FC                          2441       
000027FC  0C43 0100               2442      CMPI.W  #$0100,D3
00002800  6700 0062               2443      BEQ     OPorbv2
00002804                          2444      
00002804  0C43 0001               2445      CMPI.W  #$0001,D3
00002808  6700 0096               2446      BEQ     OPorw
0000280C                          2447      
0000280C  0C43 0101               2448      CMPI.W  #$0101,D3
00002810  6700 00CA               2449      BEQ     OPorwv2
00002814                          2450      
00002814  0C43 0010               2451      CMPI.W  #$0010,D3
00002818  6700 00FE               2452      BEQ     OPorl
0000281C                          2453      
0000281C  0C43 0110               2454      CMPI.W  #$0110,D3
00002820  6700 0132               2455      BEQ     OPorlv2
00002824                          2456      
00002824  6000 EDDA               2457      BRA     OPdata
00002828                          2458  OPorb
00002828  45F9 00005403           2459      LEA     LetterO,A2
0000282E  4EB8 183E               2460      JSR     addBuffer
00002832  45F9 00005406           2461      LEA     LetterR,A2
00002838  4EB8 183E               2462      JSR     addBuffer
0000283C  45F9 00005421           2463      LEA     period,A2
00002842  4EB8 183E               2464      JSR     addBuffer
00002846  45F9 000053F6           2465      LEA     LetterB,A2
0000284C  4EB8 183E               2466      JSR     addBuffer
00002850  45F9 0000541F           2467      LEA     space,A2
00002856  4EB8 183E               2468      JSR     addBuffer
0000285A                          2469      
0000285A  4EB9 00004102           2470      JSR     compareEAModeADDv1
00002860                          2471      
00002860  6000 E94C               2472      BRA     askForNextCode
00002864                          2473  OPorbv2
00002864  45F9 00005403           2474      LEA     LetterO,A2
0000286A  4EB8 183E               2475      JSR     addBuffer
0000286E  45F9 00005406           2476      LEA     LetterR,A2
00002874  4EB8 183E               2477      JSR     addBuffer
00002878  45F9 00005421           2478      LEA     period,A2
0000287E  4EB8 183E               2479      JSR     addBuffer
00002882  45F9 000053F6           2480      LEA     LetterB,A2
00002888  4EB8 183E               2481      JSR     addBuffer
0000288C  45F9 0000541F           2482      LEA     space,A2
00002892  4EB8 183E               2483      JSR     addBuffer
00002896                          2484      
00002896  4EB9 0000412E           2485      JSR     compareEAModeADDv2
0000289C                          2486      
0000289C  6000 E910               2487      BRA     askForNextCode
000028A0                          2488  OPorw
000028A0  45F9 00005403           2489      LEA     LetterO,A2
000028A6  4EB8 183E               2490      JSR     addBuffer
000028AA  45F9 00005406           2491      LEA     LetterR,A2
000028B0  4EB8 183E               2492      JSR     addBuffer
000028B4  45F9 00005421           2493      LEA     period,A2
000028BA  4EB8 183E               2494      JSR     addBuffer
000028BE  45F9 0000540B           2495      LEA     LetterW,A2
000028C4  4EB8 183E               2496      JSR     addBuffer
000028C8  45F9 0000541F           2497      LEA     space,A2
000028CE  4EB8 183E               2498      JSR     addBuffer
000028D2                          2499      
000028D2  4EB9 00004102           2500      JSR     compareEAModeADDv1
000028D8                          2501      
000028D8  6000 E8D4               2502      BRA     askForNextCode
000028DC                          2503  OPorwv2
000028DC  45F9 00005403           2504      LEA     LetterO,A2
000028E2  4EB8 183E               2505      JSR     addBuffer
000028E6  45F9 00005406           2506      LEA     LetterR,A2
000028EC  4EB8 183E               2507      JSR     addBuffer
000028F0  45F9 00005421           2508      LEA     period,A2
000028F6  4EB8 183E               2509      JSR     addBuffer
000028FA  45F9 0000540B           2510      LEA     LetterW,A2
00002900  4EB8 183E               2511      JSR     addBuffer
00002904  45F9 0000541F           2512      LEA     space,A2
0000290A  4EB8 183E               2513      JSR     addBuffer
0000290E                          2514      
0000290E  4EB9 0000412E           2515      JSR     compareEAModeADDv2
00002914                          2516      
00002914  6000 E898               2517      BRA     askForNextCode
00002918                          2518  OPorl
00002918  45F9 00005403           2519      LEA     LetterO,A2
0000291E  4EB8 183E               2520      JSR     addBuffer
00002922  45F9 00005406           2521      LEA     LetterR,A2
00002928  4EB8 183E               2522      JSR     addBuffer
0000292C  45F9 00005421           2523      LEA     period,A2
00002932  4EB8 183E               2524      JSR     addBuffer
00002936  45F9 00005400           2525      LEA     LetterL,A2
0000293C  4EB8 183E               2526      JSR     addBuffer
00002940  45F9 0000541F           2527      LEA     space,A2
00002946  4EB8 183E               2528      JSR     addBuffer
0000294A                          2529      
0000294A  4EB9 00004102           2530      JSR     compareEAModeADDv1
00002950                          2531      
00002950  6000 E85C               2532      BRA     askForNextCode
00002954                          2533  OPorlv2
00002954  45F9 00005403           2534      LEA     LetterO,A2
0000295A  4EB8 183E               2535      JSR     addBuffer
0000295E  45F9 00005406           2536      LEA     LetterR,A2
00002964  4EB8 183E               2537      JSR     addBuffer
00002968  45F9 00005421           2538      LEA     period,A2
0000296E  4EB8 183E               2539      JSR     addBuffer
00002972  45F9 00005400           2540      LEA     LetterL,A2
00002978  4EB8 183E               2541      JSR     addBuffer
0000297C  45F9 0000541F           2542      LEA     space,A2
00002982  4EB8 183E               2543      JSR     addBuffer
00002986                          2544      
00002986  4EB9 0000412E           2545      JSR     compareEAModeADDv2
0000298C                          2546      
0000298C  6000 E820               2547      BRA     askForNextCode
00002990                          2548  
00002990                          2549  *********************************************************************************
00002990                          2550  * Method Name: OPdivsw
00002990                          2551  * Description: OPcode is divsw so run respective method based on EA
00002990                          2552  *********************************************************************************  
00002990                          2553  OPdivsw    
00002990  284B                    2554      MOVE.L  A3,A4
00002992  4EB8 1596               2555      JSR     getNext2Bytes
00002996                          2556      
00002996  45F9 000053F8           2557      LEA     LetterD,A2
0000299C  4EB8 183E               2558      JSR     addBuffer
000029A0  45F9 000053FD           2559      LEA     LetterI,A2
000029A6  4EB8 183E               2560      JSR     addBuffer
000029AA  45F9 0000540A           2561      LEA     LetterV,A2
000029B0  4EB8 183E               2562      JSR     addBuffer
000029B4  45F9 00005407           2563      LEA     LetterS,A2
000029BA  4EB8 183E               2564      JSR     addBuffer
000029BE  45F9 00005421           2565      LEA     period,A2
000029C4  4EB8 183E               2566      JSR     addBuffer
000029C8  45F9 0000540B           2567      LEA     LetterW,A2
000029CE  4EB8 183E               2568      JSR     addBuffer
000029D2  45F9 0000541F           2569      LEA     space,A2
000029D8  4EB8 183E               2570      JSR     addBuffer
000029DC                          2571      
000029DC  7011                    2572       MOVE.L  #$00000011,D0
000029DE  4EB9 000043AA           2573      JSR     compareEAModeDIVS
000029E4                          2574      
000029E4  6000 E7C8               2575      BRA     askForNextCode
000029E8                          2576  
000029E8                          2577  *********************************************************************************
000029E8                          2578  * Method Name: OPsub
000029E8                          2579  * Description: OPcode is sub so run respective EA method based on size. Same EA
000029E8                          2580  * types as add so we use the add method.
000029E8                          2581  *********************************************************************************      
000029E8                          2582  OPsub
000029E8  264C                    2583      MOVE.L  A4,A3
000029EA  4EB8 1596               2584      JSR     getNext2Bytes
000029EE  4EB8 1596               2585      JSR     getNext2Bytes
000029F2  2602                    2586      MOVE.L  D2,D3
000029F4  E14B                    2587      LSL.W   #08,D3
000029F6  4EB8 1596               2588      JSR     getNext2Bytes
000029FA  D682                    2589      ADD.L   D2,D3
000029FC  C67C 0111               2590      AND     #$00000111,D3
00002A00                          2591      
00002A00  284B                    2592      MOVE.L  A3,A4
00002A02  4EB8 1596               2593      JSR     getNext2Bytes
00002A06                          2594      
00002A06  0C43 0000               2595      CMPI.W  #$0000,D3
00002A0A  6700 002E               2596      BEQ     OPsubb
00002A0E                          2597       
00002A0E  0C43 0100               2598      CMPI.W  #$0100,D3
00002A12  6700 006C               2599      BEQ     OPsubbv2
00002A16                          2600      
00002A16  0C43 0001               2601      CMPI.W  #$0001,D3
00002A1A  6700 00AA               2602      BEQ     OPsubw
00002A1E                          2603      
00002A1E  0C43 0101               2604      CMPI.W  #$0101,D3
00002A22  6700 00E8               2605      BEQ     OPsubwv2
00002A26                          2606      
00002A26  0C43 0010               2607      CMPI.W  #$0010,D3
00002A2A  6700 0126               2608      BEQ     OPsubl
00002A2E                          2609      
00002A2E  0C43 0110               2610      CMPI.W  #$0110,D3
00002A32  6700 0164               2611      BEQ     OPsublv2
00002A36                          2612      
00002A36  6000 EBC8               2613      BRA     OPdata
00002A3A                          2614  OPsubb
00002A3A  45F9 00005407           2615      LEA     LetterS,A2
00002A40  4EB8 183E               2616      JSR     addBuffer
00002A44  45F9 00005409           2617      LEA     LetterU,A2
00002A4A  4EB8 183E               2618      JSR     addBuffer
00002A4E  45F9 000053F6           2619      LEA     LetterB,A2
00002A54  4EB8 183E               2620      JSR     addBuffer
00002A58  45F9 00005421           2621      LEA     period,A2
00002A5E  4EB8 183E               2622      JSR     addBuffer
00002A62  45F9 000053F6           2623      LEA     LetterB,A2
00002A68  4EB8 183E               2624      JSR     addBuffer
00002A6C  45F9 0000541F           2625      LEA     space,A2
00002A72  4EB8 183E               2626      JSR     addBuffer
00002A76                          2627      
00002A76  4EB9 00004102           2628      JSR     compareEAModeADDv1
00002A7C                          2629      
00002A7C  6000 E730               2630      BRA     askForNextCode
00002A80                          2631  OPsubbv2
00002A80  45F9 00005407           2632      LEA     LetterS,A2
00002A86  4EB8 183E               2633      JSR     addBuffer
00002A8A  45F9 00005409           2634      LEA     LetterU,A2
00002A90  4EB8 183E               2635      JSR     addBuffer
00002A94  45F9 000053F6           2636      LEA     LetterB,A2
00002A9A  4EB8 183E               2637      JSR     addBuffer
00002A9E  45F9 00005421           2638      LEA     period,A2
00002AA4  4EB8 183E               2639      JSR     addBuffer
00002AA8  45F9 000053F6           2640      LEA     LetterB,A2
00002AAE  4EB8 183E               2641      JSR     addBuffer
00002AB2  45F9 0000541F           2642      LEA     space,A2
00002AB8  4EB8 183E               2643      JSR     addBuffer
00002ABC                          2644      
00002ABC  4EB9 0000412E           2645      JSR     compareEAModeADDv2
00002AC2                          2646      
00002AC2  6000 E6EA               2647      BRA     askForNextCode
00002AC6                          2648  OPsubw
00002AC6  45F9 00005407           2649      LEA     LetterS,A2
00002ACC  4EB8 183E               2650      JSR     addBuffer
00002AD0  45F9 00005409           2651      LEA     LetterU,A2
00002AD6  4EB8 183E               2652      JSR     addBuffer
00002ADA  45F9 000053F6           2653      LEA     LetterB,A2
00002AE0  4EB8 183E               2654      JSR     addBuffer
00002AE4  45F9 00005421           2655      LEA     period,A2
00002AEA  4EB8 183E               2656      JSR     addBuffer
00002AEE  45F9 0000540B           2657      LEA     LetterW,A2
00002AF4  4EB8 183E               2658      JSR     addBuffer
00002AF8  45F9 0000541F           2659      LEA     space,A2
00002AFE  4EB8 183E               2660      JSR     addBuffer
00002B02                          2661      
00002B02  4EB9 00004102           2662      JSR     compareEAModeADDv1
00002B08                          2663      
00002B08  6000 E6A4               2664      BRA     askForNextCode
00002B0C                          2665  OPsubwv2
00002B0C  45F9 00005407           2666      LEA     LetterS,A2
00002B12  4EB8 183E               2667      JSR     addBuffer
00002B16  45F9 00005409           2668      LEA     LetterU,A2
00002B1C  4EB8 183E               2669      JSR     addBuffer
00002B20  45F9 000053F6           2670      LEA     LetterB,A2
00002B26  4EB8 183E               2671      JSR     addBuffer
00002B2A  45F9 00005421           2672      LEA     period,A2
00002B30  4EB8 183E               2673      JSR     addBuffer
00002B34  45F9 0000540B           2674      LEA     LetterW,A2
00002B3A  4EB8 183E               2675      JSR     addBuffer
00002B3E  45F9 0000541F           2676      LEA     space,A2
00002B44  4EB8 183E               2677      JSR     addBuffer
00002B48                          2678      
00002B48  4EB9 0000412E           2679      JSR     compareEAModeADDv2
00002B4E                          2680      
00002B4E  6000 E65E               2681      BRA     askForNextCode
00002B52                          2682  OPsubl
00002B52  45F9 00005407           2683      LEA     LetterS,A2
00002B58  4EB8 183E               2684      JSR     addBuffer
00002B5C  45F9 00005409           2685      LEA     LetterU,A2
00002B62  4EB8 183E               2686      JSR     addBuffer
00002B66  45F9 000053F6           2687      LEA     LetterB,A2
00002B6C  4EB8 183E               2688      JSR     addBuffer
00002B70  45F9 00005421           2689      LEA     period,A2
00002B76  4EB8 183E               2690      JSR     addBuffer
00002B7A  45F9 00005400           2691      LEA     LetterL,A2
00002B80  4EB8 183E               2692      JSR     addBuffer
00002B84  45F9 0000541F           2693      LEA     space,A2
00002B8A  4EB8 183E               2694      JSR     addBuffer
00002B8E                          2695      
00002B8E  4EB9 00004102           2696      JSR     compareEAModeADDv1
00002B94                          2697      
00002B94  6000 E618               2698      BRA     askForNextCode
00002B98                          2699  OPsublv2
00002B98  45F9 00005407           2700      LEA     LetterS,A2
00002B9E  4EB8 183E               2701      JSR     addBuffer
00002BA2  45F9 00005409           2702      LEA     LetterU,A2
00002BA8  4EB8 183E               2703      JSR     addBuffer
00002BAC  45F9 000053F6           2704      LEA     LetterB,A2
00002BB2  4EB8 183E               2705      JSR     addBuffer
00002BB6  45F9 00005421           2706      LEA     period,A2
00002BBC  4EB8 183E               2707      JSR     addBuffer
00002BC0  45F9 00005400           2708      LEA     LetterL,A2
00002BC6  4EB8 183E               2709      JSR     addBuffer
00002BCA  45F9 0000541F           2710      LEA     space,A2
00002BD0  4EB8 183E               2711      JSR     addBuffer
00002BD4                          2712      
00002BD4  4EB9 0000412E           2713      JSR     compareEAModeADDv2
00002BDA                          2714      
00002BDA  6000 E5D2               2715      BRA     askForNextCode
00002BDE                          2716  
00002BDE                          2717  *********************************************************************************
00002BDE                          2718  * Method Name: OPcmpb
00002BDE                          2719  * Description: OPcode is cmp so run respective EA method based on size
00002BDE                          2720  *********************************************************************************      
00002BDE                          2721  OPcmpb
00002BDE  284B                    2722      MOVE.L  A3,A4
00002BE0  4EB8 1596               2723      JSR     getNext2Bytes
00002BE4  2602                    2724      MOVE.L  D2,D3
00002BE6  E18B                    2725      LSL.L   #$08,D3
00002BE8  4EB8 1596               2726      JSR     getNext2Bytes
00002BEC  D682                    2727      ADD.L   D2,D3
00002BEE  E88B                    2728      LSR.L   #04,D3
00002BF0  4EB8 1596               2729      JSR     getNext2Bytes
00002BF4  4EB8 1596               2730      JSR     getNext2Bytes
00002BF8                          2731      
00002BF8  45F9 000053F7           2732      LEA     LetterC,A2
00002BFE  4EB8 183E               2733      JSR     addBuffer
00002C02  45F9 00005401           2734      LEA     LetterM,A2
00002C08  4EB8 183E               2735      JSR     addBuffer
00002C0C  45F9 00005404           2736      LEA     LetterP,A2
00002C12  4EB8 183E               2737      JSR     addBuffer
00002C16  45F9 00005421           2738      LEA     period,A2
00002C1C  4EB8 183E               2739      JSR     addBuffer
00002C20  45F9 000053F6           2740      LEA     LetterB,A2
00002C26  4EB8 183E               2741      JSR     addBuffer
00002C2A  45F9 0000541F           2742      LEA     space,A2
00002C30  4EB8 183E               2743      JSR     addBuffer
00002C34                          2744      
00002C34  7001                    2745      MOVE.L  #$00000001,D0
00002C36  4EB9 00004294           2746      JSR     compareEAModeCMP
00002C3C                          2747    
00002C3C  6000 E570               2748      BRA     askForNextCode
00002C40                          2749      
00002C40                          2750  OPcmpw
00002C40  284B                    2751      MOVE.L  A3,A4
00002C42  4EB8 1596               2752      JSR     getNext2Bytes
00002C46  2602                    2753      MOVE.L  D2,D3
00002C48  E18B                    2754      LSL.L   #$08,D3
00002C4A  4EB8 1596               2755      JSR     getNext2Bytes
00002C4E  D682                    2756      ADD.L   D2,D3
00002C50  E88B                    2757      LSR.L   #04,D3
00002C52  4EB8 1596               2758      JSR     getNext2Bytes
00002C56  4EB8 1596               2759      JSR     getNext2Bytes
00002C5A                          2760      
00002C5A  45F9 000053F7           2761      LEA     LetterC,A2
00002C60  4EB8 183E               2762      JSR     addBuffer
00002C64  45F9 00005401           2763      LEA     LetterM,A2
00002C6A  4EB8 183E               2764      JSR     addBuffer
00002C6E  45F9 00005404           2765      LEA     LetterP,A2
00002C74  4EB8 183E               2766      JSR     addBuffer
00002C78  45F9 00005421           2767      LEA     period,A2
00002C7E  4EB8 183E               2768      JSR     addBuffer
00002C82  45F9 0000540B           2769      LEA     LetterW,A2
00002C88  4EB8 183E               2770      JSR     addBuffer
00002C8C  45F9 0000541F           2771      LEA     space,A2
00002C92  4EB8 183E               2772      JSR     addBuffer
00002C96  7011                    2773      MOVE.L  #$00000011,D0
00002C98  4EB9 00004294           2774      JSR     compareEAModeCMP
00002C9E                          2775      
00002C9E  6000 E50E               2776      BRA     askForNextCode
00002CA2                          2777      
00002CA2                          2778  OPcmpl
00002CA2  284B                    2779      MOVE.L  A3,A4
00002CA4  4EB8 1596               2780      JSR     getNext2Bytes
00002CA8  2602                    2781      MOVE.L  D2,D3
00002CAA  E18B                    2782      LSL.L   #$08,D3
00002CAC  4EB8 1596               2783      JSR     getNext2Bytes
00002CB0  D682                    2784      ADD.L   D2,D3
00002CB2  E88B                    2785      LSR.L   #04,D3
00002CB4  4EB8 1596               2786      JSR     getNext2Bytes
00002CB8  4EB8 1596               2787      JSR     getNext2Bytes
00002CBC                          2788      
00002CBC  45F9 000053F7           2789      LEA     LetterC,A2
00002CC2  4EB8 183E               2790      JSR     addBuffer
00002CC6  45F9 00005401           2791      LEA     LetterM,A2
00002CCC  4EB8 183E               2792      JSR     addBuffer
00002CD0  45F9 00005404           2793      LEA     LetterP,A2
00002CD6  4EB8 183E               2794      JSR     addBuffer
00002CDA  45F9 00005421           2795      LEA     period,A2
00002CE0  4EB8 183E               2796      JSR     addBuffer
00002CE4  45F9 00005400           2797      LEA     LetterL,A2
00002CEA  4EB8 183E               2798      JSR     addBuffer
00002CEE  45F9 0000541F           2799      LEA     space,A2
00002CF4  4EB8 183E               2800      JSR     addBuffer
00002CF8  7010                    2801      MOVE.L  #$00000010,D0
00002CFA  4EB9 00004294           2802      JSR     compareEAModeCMP
00002D00                          2803      
00002D00  6000 E4AC               2804      BRA     askForNextCode
00002D04                          2805      
00002D04                          2806  *********************************************************************************
00002D04                          2807  * Method Name: get12bit11
00002D04                          2808  * Description: grabs the next 2 bits and runs a method based on what they
00002D04                          2809  * are equal to
00002D04                          2810  *********************************************************************************  
00002D04                          2811  get12bit11
00002D04  4EB8 1596               2812      JSR     getNext2Bytes
00002D08  264C                    2813      MOVE.L  A4,A3   ************saving EA location for certain op codes************
00002D0A                          2814      
00002D0A  0C02 0000               2815      CMPI.B  #$00,D2
00002D0E  6700 0016               2816      BEQ     get34bit00v4
00002D12                          2817      
00002D12  0C02 0001               2818      CMPI.B  #$01,D2
00002D16  6700 0034               2819      BEQ     get34bit01v4
00002D1A                          2820      
00002D1A  0C02 0010               2821      CMPI.B  #$10,D2
00002D1E  6700 0056               2822      BEQ     get34bit10v4
00002D22                          2823      
00002D22  6000 E8DC               2824      BRA     OPdata
00002D26                          2825  *********************************************************************************
00002D26                          2826  * Method Name: get34bit00v4
00002D26                          2827  * Description: grabs the next 2 bits and runs a method based on what they
00002D26                          2828  * are equal to
00002D26                          2829  *********************************************************************************      
00002D26                          2830  get34bit00v4
00002D26  284B                    2831      MOVE.L  A3,A4
00002D28  4EB8 1596               2832      JSR     getNext2Bytes
00002D2C  4EB8 1596               2833      JSR     getNext2Bytes
00002D30  2602                    2834      MOVE.L  D2,D3
00002D32  E18B                    2835      LSL.L   #$08,D3
00002D34  4EB8 1596               2836      JSR     getNext2Bytes
00002D38  D642                    2837      ADD     D2,D3
00002D3A  C6BC 00000111           2838      AND.L     #$00000111,D3
00002D40  0C43 0111               2839      CMPI.W  #$0111,D3
00002D44  6700 0170               2840      BEQ     OPmuls
00002D48                          2841      
00002D48  6000 E8B6               2842      BRA     OPdata
00002D4C                          2843  
00002D4C                          2844  *********************************************************************************
00002D4C                          2845  * Method Name: get34bit01v4
00002D4C                          2846  * Description: grabs the next 2 bits and runs a method based on what they
00002D4C                          2847  * are equal to also checks for addA
00002D4C                          2848  *********************************************************************************      
00002D4C                          2849  get34bit01v4
00002D4C  4EB8 1596               2850      JSR     getNext2Bytes
00002D50  4EB8 1596               2851      JSR     getNext2Bytes
00002D54                          2852      
00002D54                          2853      *********storing OP code for addA*********
00002D54  2602                    2854      MOVE.L  D2,D3
00002D56  C6BC 00000001           2855      AND.L   #$00000001,D3
00002D5C  E18B                    2856      LSL.L   #08,D3
00002D5E                          2857      *****************************************
00002D5E                          2858      
00002D5E  847C 0010               2859      OR      #$00000010,D2
00002D62  0C02 0010               2860      CMPI.B  #$10,D2
00002D66  6700 013C               2861      BEQ     get78bitxxv4part2
00002D6A                          2862      
00002D6A  0C02 0011               2863      CMPI.B  #$11,D2
00002D6E  6700 0134               2864      BEQ     get78bitxxv4part2
00002D72                          2865      
00002D72  6000 E88C               2866      BRA     OPdata
00002D76                          2867  
00002D76                          2868  *********************************************************************************
00002D76                          2869  * Method Name: get34bit10v4
00002D76                          2870  * Description: grabs the next 2 bits and runs a method based on what they
00002D76                          2871  * are equal to. Checks for any of the shifts (lsl, lsr, etc)
00002D76                          2872  *********************************************************************************      
00002D76                          2873  get34bit10v4
00002D76                          2874      ****saving location of count/reg****
00002D76  284B                    2875      MOVE.L  A3,A4
00002D78  4EB8 1596               2876      JSR     getNext2Bytes
00002D7C                          2877      
00002D7C                          2878      
00002D7C  2602                    2879      MOVE.L  D2,D3
00002D7E  E18B                    2880      LSL.L   #08,D3
00002D80  4EB8 1596               2881      JSR     getNext2Bytes
00002D84  D682                    2882      ADD.L   D2,D3
00002D86  E18B                    2883      LSL.L   #08,D3
00002D88  4EB8 1596               2884      JSR     getNext2Bytes
00002D8C  D682                    2885      ADD.L   D2,D3
00002D8E                          2886      
00002D8E  284B                    2887      MOVE.L  A3,A4
00002D90  4EB8 1596               2888      JSR     getNext2Bytes
00002D94  4EB8 1596               2889      JSR     getNext2Bytes
00002D98  4EB8 1596               2890      JSR     getNext2Bytes
00002D9C                          2891      
00002D9C  0C83 00000011           2892      CMPI.L  #$00000011,D3
00002DA2  6700 041A               2893      BEQ     OPasrmem
00002DA6  0C83 00000111           2894      CMPI.L  #$00000111,D3
00002DAC  6700 0446               2895      BEQ     OPaslmem
00002DB0  0C83 00001011           2896      CMPI.L  #$00001011,D3
00002DB6  6700 0472               2897      BEQ     OPlsrmem
00002DBA  0C83 00001111           2898      CMPI.L  #$00001111,D3
00002DC0  6700 049E               2899      BEQ     OPlslmem
00002DC4  0C83 00011011           2900      CMPI.L  #$00011011,D3
00002DCA  6700 04CA               2901      BEQ     OPrormem
00002DCE  0C83 00011111           2902      CMPI.L  #$00011111,D3
00002DD4  6700 04F6               2903      BEQ     OProlmem
00002DD8                          2904      
00002DD8  284B                    2905      MOVE.L  A3,A4
00002DDA  4EB8 1596               2906      JSR     getNext2Bytes
00002DDE  4EB8 1596               2907      JSR     getNext2Bytes
00002DE2                          2908  
00002DE2  C4BC 00000001           2909      AND.L    #$00000001,D2
00002DE8  0C02 0000               2910      CMPI.B  #$00,D2
00002DEC  6700 000E               2911      BEQ     checkShiftRight
00002DF0  0C02 0001               2912      CMPI.B  #$01,D2
00002DF4  6700 005A               2913      BEQ     checkShiftLeft
00002DF8                          2914      
00002DF8  6000 E806               2915      BRA     OPdata
00002DFC                          2916  *********************************************************************************
00002DFC                          2917  * Method Name: checkShiftRight/Left
00002DFC                          2918  * Description: runs the EA method based on the method and direction. Load the count
00002DFC                          2919  * or register into D3, load the size into D4 and load i/r into D5. 
00002DFC                          2920  *********************************************************************************      
00002DFC                          2921  checkShiftRight
00002DFC  4EB8 1596               2922      JSR     getNext2Bytes
00002E00  4EB8 1596               2923      JSR     getNext2Bytes
00002E04  2002                    2924      MOVE.L  D2,D0
00002E06  E148                    2925      LSL.W   #08,D0
00002E08  4EB8 1596               2926      JSR     getNext2Bytes
00002E0C  D082                    2927      ADD.L   D2,D0
00002E0E  284B                    2928      MOVE.L  A3,A4
00002E10                          2929  
00002E10                          2930      
00002E10                          2931      *D3 == count? register + dr
00002E10                          2932      *D4 == size
00002E10                          2933      *D5 == i/r + 0
00002E10                          2934      
00002E10  4EB8 1596               2935      JSR     getNext2Bytes
00002E14  2602                    2936      MOVE.L  D2,D3
00002E16  E14B                    2937      LSL.W   #08,D3
00002E18  4EB8 1596               2938      JSR     getNext2Bytes
00002E1C  D682                    2939      ADD.L   D2,D3
00002E1E                          2940      
00002E1E  4EB8 1596               2941      JSR     getNext2Bytes
00002E22  2802                    2942      MOVE.L  D2,D4
00002E24                          2943      
00002E24  4EB8 1596               2944      JSR     getNext2Bytes
00002E28  2A02                    2945      MOVE.L  D2,D5
00002E2A  CA7C 0010               2946      AND     #$00000010,D5
00002E2E                          2947      
00002E2E  E848                    2948      LSR.W   #04,D0
00002E30  0C00 0000               2949      CMPI.B  #$00,D0
00002E34  6700 04CC               2950      BEQ     OPasrreg
00002E38  0C00 0001               2951      CMPI.B  #$01,D0
00002E3C  6700 06BA               2952      BEQ     OPlsrreg
00002E40  0C00 0010               2953      CMPI.B  #$10,D0
00002E44  6700 08A8               2954      BEQ     OProrreg
00002E48  0C00 0011               2955      CMPI.B  #$11,D0
00002E4C  6700 08A0               2956      BEQ     OProrreg
00002E50                          2957  
00002E50                          2958  checkShiftLeft
00002E50  4EB8 1596               2959      JSR     getNext2Bytes
00002E54  4EB8 1596               2960      JSR     getNext2Bytes
00002E58  2002                    2961      MOVE.L  D2,D0
00002E5A  E148                    2962      LSL.W   #08,D0
00002E5C  4EB8 1596               2963      JSR     getNext2Bytes
00002E60  D082                    2964      ADD.L   D2,D0
00002E62                          2965      
00002E62  284B                    2966      MOVE.L  A3,A4
00002E64                          2967      
00002E64  4EB8 1596               2968      JSR     getNext2Bytes
00002E68  2602                    2969      MOVE.L  D2,D3
00002E6A  E14B                    2970      LSL.W   #08,D3
00002E6C  4EB8 1596               2971      JSR     getNext2Bytes
00002E70  D682                    2972      ADD.L   D2,D3
00002E72                          2973      
00002E72  4EB8 1596               2974      JSR     getNext2Bytes
00002E76  2802                    2975      MOVE.L  D2,D4
00002E78                          2976      
00002E78  4EB8 1596               2977      JSR     getNext2Bytes
00002E7C  2A02                    2978      MOVE.L  D2,D5
00002E7E  CA7C 0010               2979      AND     #$00000010,D5
00002E82                          2980      
00002E82  E848                    2981      LSR.W   #04,D0
00002E84  0C00 0000               2982      CMPI.B  #$00,D0
00002E88  6700 0A5A               2983      BEQ     OPaslreg
00002E8C  0C00 0001               2984      CMPI.B  #$01,D0
00002E90  6700 0C48               2985      BEQ     OPlslreg
00002E94  0C00 0010               2986      CMPI.B  #$10,D0
00002E98  6700 0E36               2987      BEQ     OProlreg
00002E9C  0C00 0011               2988      CMPI.B  #$11,D0
00002EA0  6700 0E2E               2989      BEQ     OProlreg
00002EA4                          2990  
00002EA4                          2991  *********************************************************************************
00002EA4                          2992  * Method Name: get78bitxxv4part2
00002EA4                          2993  * Description: grabs the next 2 bits and runs a method based on what they
00002EA4                          2994  * are equal to
00002EA4                          2995  *********************************************************************************      
00002EA4                          2996  get78bitxxv4part2
00002EA4  4EB8 1596               2997      JSR     getNext2Bytes
00002EA8                          2998      
00002EA8                          2999      ********Adding final op code piece (for ADDA and ADD)***********
00002EA8  D642                    3000      ADD     D2,D3
00002EAA                          3001      
00002EAA  0C02 0011               3002      CMPI.B  #$11,D2
00002EAE  6700 005E               3003      BEQ     OPadda
00002EB2                          3004      
00002EB2  6000 0114               3005      BRA     OPadd
00002EB6                          3006      
00002EB6                          3007  *********************************************************************************
00002EB6                          3008  * Method Name: OPmuls
00002EB6                          3009  * Description: OP code is muls so run respective EA method based on size
00002EB6                          3010  *********************************************************************************      
00002EB6                          3011  OPmuls
00002EB6  284B                    3012      MOVE.L  A3,A4   
00002EB8  4EB8 1596               3013      JSR     getNext2Bytes
00002EBC                          3014  
00002EBC  45F9 00005401           3015      LEA     LetterM,A2
00002EC2  4EB8 183E               3016      JSR     addBuffer
00002EC6  45F9 00005409           3017      LEA     LetterU,A2
00002ECC  4EB8 183E               3018      JSR     addBuffer
00002ED0  45F9 00005400           3019      LEA     LetterL,A2
00002ED6  4EB8 183E               3020      JSR     addBuffer
00002EDA  45F9 00005407           3021      LEA     LetterS,A2
00002EE0  4EB8 183E               3022      JSR     addBuffer
00002EE4  45F9 00005421           3023      LEA     period,A2
00002EEA  4EB8 183E               3024      JSR     addBuffer
00002EEE  45F9 0000540B           3025      LEA     LetterW,A2
00002EF4  4EB8 183E               3026      JSR     addBuffer
00002EF8  45F9 0000541F           3027      LEA     space,A2
00002EFE  4EB8 183E               3028      JSR     addBuffer
00002F02                          3029      
00002F02  7011                    3030      MOVE.L  #$00000011,D0
00002F04  4EB9 00004376           3031      JSR     compareEAModeMULS
00002F0A                          3032      
00002F0A  6000 E2A2               3033      BRA     askForNextCode
00002F0E                          3034  
00002F0E                          3035  *********************************************************************************
00002F0E                          3036  * Method Name: OPadda
00002F0E                          3037  * Description: OPcode is adda so run respective EA method based on size
00002F0E                          3038  *********************************************************************************      
00002F0E                          3039  OPadda
00002F0E  284B                    3040      MOVE.L  A3,A4   loading back the start of EA for ADDA
00002F10  4EB8 1596               3041      JSR     getNext2Bytes
00002F14                          3042  
00002F14  0C43 0011               3043      CMPI.W  #$0011,D3
00002F18  6700 000A               3044      BEQ     OPaddaw
00002F1C                          3045      
00002F1C  0C43 0111               3046      CMPI.W  #$0111,D3
00002F20  6700 0054               3047      BEQ     OPaddal
00002F24                          3048  OPaddaw
00002F24  45F9 000053F5           3049      LEA     LetterA,A2
00002F2A  4EB8 183E               3050      JSR     addBuffer
00002F2E  45F9 000053F8           3051      LEA     LetterD,A2
00002F34  4EB8 183E               3052      JSR     addBuffer
00002F38  45F9 000053F8           3053      LEA     LetterD,A2
00002F3E  4EB8 183E               3054      JSR     addBuffer
00002F42  45F9 000053F5           3055      LEA     LetterA,A2
00002F48  4EB8 183E               3056      JSR     addBuffer
00002F4C  45F9 00005421           3057      LEA     period,A2
00002F52  4EB8 183E               3058      JSR     addBuffer
00002F56  45F9 0000540B           3059      LEA     LetterW,A2
00002F5C  4EB8 183E               3060      JSR     addBuffer
00002F60  45F9 0000541F           3061      LEA     space,A2
00002F66  4EB8 183E               3062      JSR     addBuffer
00002F6A  7011                    3063      MOVE.L  #$00000011,D0
00002F6C                          3064      
00002F6C  4EB9 000041C0           3065      JSR     compareEAModeADDA
00002F72                          3066      
00002F72  6000 E23A               3067      BRA     askForNextCode
00002F76                          3068  OPaddal
00002F76  45F9 000053F5           3069      LEA     LetterA,A2
00002F7C  4EB8 183E               3070      JSR     addBuffer
00002F80  45F9 000053F8           3071      LEA     LetterD,A2
00002F86  4EB8 183E               3072      JSR     addBuffer
00002F8A  45F9 000053F8           3073      LEA     LetterD,A2
00002F90  4EB8 183E               3074      JSR     addBuffer
00002F94  45F9 000053F5           3075      LEA     LetterA,A2
00002F9A  4EB8 183E               3076      JSR     addBuffer
00002F9E  45F9 00005421           3077      LEA     period,A2
00002FA4  4EB8 183E               3078      JSR     addBuffer
00002FA8  45F9 00005400           3079      LEA     LetterL,A2
00002FAE  4EB8 183E               3080      JSR     addBuffer
00002FB2  45F9 0000541F           3081      LEA     space,A2
00002FB8  4EB8 183E               3082      JSR     addBuffer
00002FBC  7010                    3083      MOVE.L  #$00000010,D0
00002FBE  4EB9 000041C0           3084      JSR     compareEAModeADDA
00002FC4                          3085      
00002FC4  6000 E1E8               3086      BRA     askForNextCode 
00002FC8                          3087  
00002FC8                          3088  *********************************************************************************
00002FC8                          3089  * Method Name: OPadd
00002FC8                          3090  * Description: OP code is add so run respective EA method based on size
00002FC8                          3091  *********************************************************************************      
00002FC8                          3092  OPadd
00002FC8  284B                    3093      MOVE.L  A3,A4   loading back the start of EA for ADD
00002FCA  4EB8 1596               3094      JSR     getNext2Bytes
00002FCE  4EB8 1596               3095      JSR     getNext2Bytes
00002FD2  2602                    3096      MOVE.L  D2,D3
00002FD4  E14B                    3097      LSL.W   #08,D3
00002FD6  4EB8 1596               3098      JSR     getNext2Bytes
00002FDA  D682                    3099      ADD.L   D2,D3
00002FDC  C67C 0111               3100      AND     #$00000111,D3
00002FE0                          3101      
00002FE0  284B                    3102      MOVE.L  A3,A4
00002FE2  4EB8 1596               3103      JSR     getNext2Bytes
00002FE6                          3104      
00002FE6  0C43 0000               3105      CMPI.W  #$0000,D3
00002FEA  6700 002E               3106      BEQ     OPaddb
00002FEE                          3107       
00002FEE  0C43 0100               3108      CMPI.W  #$0100,D3
00002FF2  6700 006C               3109      BEQ     OPaddbv2
00002FF6                          3110      
00002FF6  0C43 0001               3111      CMPI.W  #$0001,D3
00002FFA  6700 00AA               3112      BEQ     OPaddw
00002FFE                          3113      
00002FFE  0C43 0101               3114      CMPI.W  #$0101,D3
00003002  6700 00E8               3115      BEQ     OPaddwv2
00003006                          3116      
00003006  0C43 0010               3117      CMPI.W  #$0010,D3
0000300A  6700 0126               3118      BEQ     OPaddl
0000300E                          3119      
0000300E  0C43 0110               3120      CMPI.W  #$0110,D3
00003012  6700 0164               3121      BEQ     OPaddlv2
00003016                          3122      
00003016  6000 E5E8               3123      BRA     OPdata
0000301A                          3124  OPaddb
0000301A  45F9 000053F5           3125      LEA     LetterA,A2
00003020  4EB8 183E               3126      JSR     addBuffer
00003024  45F9 000053F8           3127      LEA     LetterD,A2
0000302A  4EB8 183E               3128      JSR     addBuffer
0000302E  45F9 000053F8           3129      LEA     LetterD,A2
00003034  4EB8 183E               3130      JSR     addBuffer
00003038  45F9 00005421           3131      LEA     period,A2
0000303E  4EB8 183E               3132      JSR     addBuffer
00003042  45F9 000053F6           3133      LEA     LetterB,A2
00003048  4EB8 183E               3134      JSR     addBuffer
0000304C  45F9 0000541F           3135      LEA     space,A2
00003052  4EB8 183E               3136      JSR     addBuffer
00003056                          3137      
00003056  4EB9 00004102           3138      JSR     compareEAModeADDv1
0000305C                          3139      
0000305C  6000 E150               3140      BRA     askForNextCode
00003060                          3141  OPaddbv2
00003060  45F9 000053F5           3142      LEA     LetterA,A2
00003066  4EB8 183E               3143      JSR     addBuffer
0000306A  45F9 000053F8           3144      LEA     LetterD,A2
00003070  4EB8 183E               3145      JSR     addBuffer
00003074  45F9 000053F8           3146      LEA     LetterD,A2
0000307A  4EB8 183E               3147      JSR     addBuffer
0000307E  45F9 00005421           3148      LEA     period,A2
00003084  4EB8 183E               3149      JSR     addBuffer
00003088  45F9 000053F6           3150      LEA     LetterB,A2
0000308E  4EB8 183E               3151      JSR     addBuffer
00003092  45F9 0000541F           3152      LEA     space,A2
00003098  4EB8 183E               3153      JSR     addBuffer
0000309C                          3154      
0000309C  4EB9 0000412E           3155      JSR     compareEAModeADDv2
000030A2                          3156      
000030A2  6000 E10A               3157      BRA     askForNextCode
000030A6                          3158  OPaddw
000030A6  45F9 000053F5           3159      LEA     LetterA,A2
000030AC  4EB8 183E               3160      JSR     addBuffer
000030B0  45F9 000053F8           3161      LEA     LetterD,A2
000030B6  4EB8 183E               3162      JSR     addBuffer
000030BA  45F9 000053F8           3163      LEA     LetterD,A2
000030C0  4EB8 183E               3164      JSR     addBuffer
000030C4  45F9 00005421           3165      LEA     period,A2
000030CA  4EB8 183E               3166      JSR     addBuffer
000030CE  45F9 0000540B           3167      LEA     LetterW,A2
000030D4  4EB8 183E               3168      JSR     addBuffer
000030D8  45F9 0000541F           3169      LEA     space,A2
000030DE  4EB8 183E               3170      JSR     addBuffer
000030E2                          3171      
000030E2  4EB9 00004102           3172      JSR     compareEAModeADDv1
000030E8                          3173      
000030E8  6000 E0C4               3174      BRA     askForNextCode
000030EC                          3175  OPaddwv2
000030EC  45F9 000053F5           3176      LEA     LetterA,A2
000030F2  4EB8 183E               3177      JSR     addBuffer
000030F6  45F9 000053F8           3178      LEA     LetterD,A2
000030FC  4EB8 183E               3179      JSR     addBuffer
00003100  45F9 000053F8           3180      LEA     LetterD,A2
00003106  4EB8 183E               3181      JSR     addBuffer
0000310A  45F9 00005421           3182      LEA     period,A2
00003110  4EB8 183E               3183      JSR     addBuffer
00003114  45F9 0000540B           3184      LEA     LetterW,A2
0000311A  4EB8 183E               3185      JSR     addBuffer
0000311E  45F9 0000541F           3186      LEA     space,A2
00003124  4EB8 183E               3187      JSR     addBuffer
00003128                          3188      
00003128  4EB9 0000412E           3189      JSR     compareEAModeADDv2
0000312E                          3190      
0000312E  6000 E07E               3191      BRA     askForNextCode
00003132                          3192  OPaddl
00003132  45F9 000053F5           3193      LEA     LetterA,A2
00003138  4EB8 183E               3194      JSR     addBuffer
0000313C  45F9 000053F8           3195      LEA     LetterD,A2
00003142  4EB8 183E               3196      JSR     addBuffer
00003146  45F9 000053F8           3197      LEA     LetterD,A2
0000314C  4EB8 183E               3198      JSR     addBuffer
00003150  45F9 00005421           3199      LEA     period,A2
00003156  4EB8 183E               3200      JSR     addBuffer
0000315A  45F9 00005400           3201      LEA     LetterL,A2
00003160  4EB8 183E               3202      JSR     addBuffer
00003164  45F9 0000541F           3203      LEA     space,A2
0000316A  4EB8 183E               3204      JSR     addBuffer
0000316E                          3205      
0000316E  4EB9 00004102           3206      JSR     compareEAModeADDv1
00003174                          3207      
00003174  6000 E038               3208      BRA     askForNextCode
00003178                          3209  OPaddlv2
00003178  45F9 000053F5           3210      LEA     LetterA,A2
0000317E  4EB8 183E               3211      JSR     addBuffer
00003182  45F9 000053F8           3212      LEA     LetterD,A2
00003188  4EB8 183E               3213      JSR     addBuffer
0000318C  45F9 000053F8           3214      LEA     LetterD,A2
00003192  4EB8 183E               3215      JSR     addBuffer
00003196  45F9 00005421           3216      LEA     period,A2
0000319C  4EB8 183E               3217      JSR     addBuffer
000031A0  45F9 00005400           3218      LEA     LetterL,A2
000031A6  4EB8 183E               3219      JSR     addBuffer
000031AA  45F9 0000541F           3220      LEA     space,A2
000031B0  4EB8 183E               3221      JSR     addBuffer
000031B4                          3222      
000031B4  4EB9 0000412E           3223      JSR     compareEAModeADDv2
000031BA                          3224      
000031BA  6000 DFF2               3225      BRA     askForNextCode
000031BE                          3226  
000031BE                          3227  *********************************************************************************
000031BE                          3228  * Method Name: OPasrmem - rolmem etc etc
000031BE                          3229  * Description: Runs a method based on the OPcode
000031BE                          3230  *********************************************************************************      
000031BE                          3231  OPasrmem
000031BE  4EB8 1596               3232      JSR     getNext2Bytes
000031C2  45F9 000053F5           3233      LEA     LetterA,A2
000031C8  4EB8 183E               3234      JSR     addBuffer
000031CC  45F9 00005407           3235      LEA     LetterS,A2
000031D2  4EB8 183E               3236      JSR     addBuffer
000031D6  45F9 00005406           3237      LEA     LetterR,A2
000031DC  4EB8 183E               3238      JSR     addBuffer
000031E0  45F9 0000541F           3239      LEA     space,A2
000031E6  4EB8 183E               3240      JSR     addBuffer
000031EA  4EB9 00003FD4           3241      JSR     compareEAModeShiftEA
000031F0                          3242      
000031F0  6000 DFBC               3243      BRA     askForNextCode
000031F4                          3244      
000031F4                          3245  OPaslmem
000031F4  4EB8 1596               3246      JSR     getNext2Bytes
000031F8  45F9 000053F5           3247      LEA     LetterA,A2
000031FE  4EB8 183E               3248      JSR     addBuffer
00003202  45F9 00005407           3249      LEA     LetterS,A2
00003208  4EB8 183E               3250      JSR     addBuffer
0000320C  45F9 00005400           3251      LEA     LetterL,A2
00003212  4EB8 183E               3252      JSR     addBuffer
00003216  45F9 0000541F           3253      LEA     space,A2
0000321C  4EB8 183E               3254      JSR     addBuffer
00003220  4EB9 00003FD4           3255      JSR     compareEAModeShiftEA
00003226                          3256      
00003226  6000 DF86               3257      BRA     askForNextCode
0000322A                          3258      
0000322A                          3259  OPlsrmem
0000322A  4EB8 1596               3260      JSR     getNext2Bytes
0000322E  45F9 00005400           3261      LEA     LetterL,A2
00003234  4EB8 183E               3262      JSR     addBuffer
00003238  45F9 00005407           3263      LEA     LetterS,A2
0000323E  4EB8 183E               3264      JSR     addBuffer
00003242  45F9 00005406           3265      LEA     LetterR,A2
00003248  4EB8 183E               3266      JSR     addBuffer
0000324C  45F9 0000541F           3267      LEA     space,A2
00003252  4EB8 183E               3268      JSR     addBuffer
00003256  4EB9 00003FD4           3269      JSR     compareEAModeShiftEA
0000325C                          3270      
0000325C  6000 DF50               3271      BRA     askForNextCode
00003260                          3272      
00003260                          3273  OPlslmem
00003260  4EB8 1596               3274      JSR     getNext2Bytes
00003264  45F9 00005400           3275      LEA     LetterL,A2
0000326A  4EB8 183E               3276      JSR     addBuffer
0000326E  45F9 00005407           3277      LEA     LetterS,A2
00003274  4EB8 183E               3278      JSR     addBuffer
00003278  45F9 00005400           3279      LEA     LetterL,A2
0000327E  4EB8 183E               3280      JSR     addBuffer
00003282  45F9 0000541F           3281      LEA     space,A2
00003288  4EB8 183E               3282      JSR     addBuffer
0000328C  4EB9 00003FD4           3283      JSR     compareEAModeShiftEA
00003292                          3284      
00003292  6000 DF1A               3285      BRA     askForNextCode
00003296                          3286      
00003296                          3287  OPrormem
00003296  4EB8 1596               3288      JSR     getNext2Bytes
0000329A  45F9 00005406           3289      LEA     LetterR,A2
000032A0  4EB8 183E               3290      JSR     addBuffer
000032A4  45F9 00005403           3291      LEA     LetterO,A2
000032AA  4EB8 183E               3292      JSR     addBuffer
000032AE  45F9 00005406           3293      LEA     LetterR,A2
000032B4  4EB8 183E               3294      JSR     addBuffer
000032B8  45F9 0000541F           3295      LEA     space,A2
000032BE  4EB8 183E               3296      JSR     addBuffer
000032C2  4EB9 00003FD4           3297      JSR     compareEAModeShiftEA
000032C8                          3298      
000032C8  6000 DEE4               3299      BRA     askForNextCode
000032CC                          3300      
000032CC                          3301  OProlmem
000032CC  4EB8 1596               3302      JSR     getNext2Bytes
000032D0  45F9 00005406           3303      LEA     LetterR,A2
000032D6  4EB8 183E               3304      JSR     addBuffer
000032DA  45F9 00005403           3305      LEA     LetterO,A2
000032E0  4EB8 183E               3306      JSR     addBuffer
000032E4  45F9 00005400           3307      LEA     LetterL,A2
000032EA  4EB8 183E               3308      JSR     addBuffer
000032EE  45F9 0000541F           3309      LEA     space,A2
000032F4  4EB8 183E               3310      JSR     addBuffer
000032F8  4EB9 00003FD4           3311      JSR     compareEAModeShiftEA
000032FE                          3312      
000032FE  6000 DEAE               3313      BRA     askForNextCode
00003302                          3314      
00003302                          3315  *********************************************************
00003302                          3316  * IMPORTANT: the methods for all shift insructions like
00003302                          3317  * asr, lsl, etc are the same format. They all run a method
00003302                          3318  * based on whether i/r is 1 or 0. They then all run a methof
00003302                          3319  * based on the size.
00003302                          3320  *
00003302                          3321  *********************************************************
00003302                          3322  
00003302                          3323  *********************************************************************************
00003302                          3324  * Method Name: OPasrreg - lslreg etc
00003302                          3325  * Description: Runs a method based on whether I is 0 or 1. 
00003302                          3326  *********************************************************************************      
00003302                          3327  OPasrreg
00003302                          3328      *D3 == count? register + dr
00003302                          3329      *D4 == size
00003302                          3330      *D5 == i/r + 0
00003302  4EB8 1596               3331      JSR     getNext2Bytes   *****now pointing to 0 + start of register
00003306                          3332      
00003306  E88B                    3333      LSR.L   #04,D3  ****D3 now holds the count or register
00003308                          3334      
00003308  0C05 0010               3335      CMPI.B  #$10,D5
0000330C  6700 000E               3336      BEQ     OPasrregI1
00003310                          3337      
00003310  0C05 0000               3338      CMPI.B  #$00,D5
00003314  6700 0022               3339      BEQ     OPasrregI0
00003318                          3340      
00003318  6000 E2E6               3341      BRA     OPdata
0000331C                          3342  
0000331C                          3343  *********************************************************************************
0000331C                          3344  * Method Name: OPasrregI1, I0, lslregI1, etc etc
0000331C                          3345  * Description: Runs a method based on the size
0000331C                          3346  ********************************************************************************* 
0000331C                          3347  OPasrregI1
0000331C  0C04 0000               3348      CMPI.B  #$00,D4
00003320  6700 0032               3349      BEQ     OPasrregbi1
00003324                          3350      
00003324  0C04 0001               3351      CMPI.B  #$01,D4
00003328  6700 0070               3352      BEQ     OPasrregwi1
0000332C                          3353      
0000332C  0C04 0010               3354      CMPI.B  #$10,D4
00003330  6700 00AE               3355      BEQ     OPasrregli1
00003334                          3356      
00003334  6000 E2CA               3357      BRA     OPdata
00003338                          3358      
00003338                          3359  OPasrregI0
00003338  0C04 0000               3360      CMPI.B  #$00,D4
0000333C  6700 00E8               3361      BEQ     OPasrregbi0
00003340                          3362      
00003340  0C04 0001               3363      CMPI.B  #$01,D4
00003344  6700 0126               3364      BEQ     OPasrregwi0
00003348                          3365      
00003348  0C04 0010               3366      CMPI.B  #$10,D4
0000334C  6700 0164               3367      BEQ     OPasrregli0
00003350                          3368      
00003350  6000 E2AE               3369      BRA     OPdata
00003354                          3370  
00003354                          3371  OPasrregbi1
00003354  45F9 000053F5           3372      LEA     LetterA,A2
0000335A  4EB8 183E               3373      JSR     addBuffer
0000335E  45F9 00005407           3374      LEA     LetterS,A2
00003364  4EB8 183E               3375      JSR     addBuffer
00003368  45F9 00005406           3376      LEA     LetterR,A2
0000336E  4EB8 183E               3377      JSR     addBuffer
00003372  45F9 00005421           3378      LEA     period,A2
00003378  4EB8 183E               3379      JSR     addBuffer
0000337C  45F9 000053F6           3380      LEA     LetterB,A2
00003382  4EB8 183E               3381      JSR     addBuffer
00003386  45F9 0000541F           3382      LEA     space,A2
0000338C  4EB8 183E               3383      JSR     addBuffer
00003390  4EB9 00003F74           3384      JSR     compareEAModeShift2Data
00003396                          3385      
00003396  6000 DE16               3386      BRA     askForNextCode
0000339A                          3387  OPasrregwi1
0000339A  45F9 000053F5           3388      LEA     LetterA,A2
000033A0  4EB8 183E               3389      JSR     addBuffer
000033A4  45F9 00005407           3390      LEA     LetterS,A2
000033AA  4EB8 183E               3391      JSR     addBuffer
000033AE  45F9 00005406           3392      LEA     LetterR,A2
000033B4  4EB8 183E               3393      JSR     addBuffer
000033B8  45F9 00005421           3394      LEA     period,A2
000033BE  4EB8 183E               3395      JSR     addBuffer
000033C2  45F9 0000540B           3396      LEA     LetterW,A2
000033C8  4EB8 183E               3397      JSR     addBuffer
000033CC  45F9 0000541F           3398      LEA     space,A2
000033D2  4EB8 183E               3399      JSR     addBuffer
000033D6  4EB9 00003F74           3400      JSR     compareEAModeShift2Data
000033DC                          3401      
000033DC  6000 DDD0               3402      BRA     askForNextCode
000033E0                          3403  OPasrregli1
000033E0  45F9 000053F5           3404      LEA     LetterA,A2
000033E6  4EB8 183E               3405      JSR     addBuffer
000033EA  45F9 00005407           3406      LEA     LetterS,A2
000033F0  4EB8 183E               3407      JSR     addBuffer
000033F4  45F9 00005406           3408      LEA     LetterR,A2
000033FA  4EB8 183E               3409      JSR     addBuffer
000033FE  45F9 00005421           3410      LEA     period,A2
00003404  4EB8 183E               3411      JSR     addBuffer
00003408  45F9 00005400           3412      LEA     LetterL,A2
0000340E  4EB8 183E               3413      JSR     addBuffer
00003412  45F9 0000541F           3414      LEA     space,A2
00003418  4EB8 183E               3415      JSR     addBuffer
0000341C  4EB9 00003F74           3416      JSR     compareEAModeShift2Data
00003422                          3417      
00003422  6000 DD8A               3418      BRA     askForNextCode
00003426                          3419  OPasrregbi0
00003426  45F9 000053F5           3420      LEA     LetterA,A2
0000342C  4EB8 183E               3421      JSR     addBuffer
00003430  45F9 00005407           3422      LEA     LetterS,A2
00003436  4EB8 183E               3423      JSR     addBuffer
0000343A  45F9 00005406           3424      LEA     LetterR,A2
00003440  4EB8 183E               3425      JSR     addBuffer
00003444  45F9 00005421           3426      LEA     period,A2
0000344A  4EB8 183E               3427      JSR     addBuffer
0000344E  45F9 000053F6           3428      LEA     LetterB,A2
00003454  4EB8 183E               3429      JSR     addBuffer
00003458  45F9 0000541F           3430      LEA     space,A2
0000345E  4EB8 183E               3431      JSR     addBuffer
00003462  4EB9 00003FA0           3432      JSR     compareEAModeShiftCount
00003468                          3433      
00003468  6000 DD44               3434      BRA     askForNextCode
0000346C                          3435  OPasrregwi0
0000346C  45F9 000053F5           3436      LEA     LetterA,A2
00003472  4EB8 183E               3437      JSR     addBuffer
00003476  45F9 00005407           3438      LEA     LetterS,A2
0000347C  4EB8 183E               3439      JSR     addBuffer
00003480  45F9 00005406           3440      LEA     LetterR,A2
00003486  4EB8 183E               3441      JSR     addBuffer
0000348A  45F9 00005421           3442      LEA     period,A2
00003490  4EB8 183E               3443      JSR     addBuffer
00003494  45F9 0000540B           3444      LEA     LetterW,A2
0000349A  4EB8 183E               3445      JSR     addBuffer
0000349E  45F9 0000541F           3446      LEA     space,A2
000034A4  4EB8 183E               3447      JSR     addBuffer
000034A8  4EB9 00003FA0           3448      JSR     compareEAModeShiftCount
000034AE                          3449      
000034AE  6000 DCFE               3450      BRA     askForNextCode
000034B2                          3451  OPasrregli0
000034B2  45F9 000053F5           3452      LEA     LetterA,A2
000034B8  4EB8 183E               3453      JSR     addBuffer
000034BC  45F9 00005407           3454      LEA     LetterS,A2
000034C2  4EB8 183E               3455      JSR     addBuffer
000034C6  45F9 00005406           3456      LEA     LetterR,A2
000034CC  4EB8 183E               3457      JSR     addBuffer
000034D0  45F9 00005421           3458      LEA     period,A2
000034D6  4EB8 183E               3459      JSR     addBuffer
000034DA  45F9 00005400           3460      LEA     LetterL,A2
000034E0  4EB8 183E               3461      JSR     addBuffer
000034E4  45F9 0000541F           3462      LEA     space,A2
000034EA  4EB8 183E               3463      JSR     addBuffer
000034EE  4EB9 00003FA0           3464      JSR     compareEAModeShiftCount
000034F4                          3465      
000034F4  6000 DCB8               3466      BRA     askForNextCode
000034F8                          3467      
000034F8                          3468  OPlsrreg
000034F8                          3469      *D3 == count? register + dr
000034F8                          3470      *D4 == size
000034F8                          3471      *D5 == i/r + 0
000034F8  4EB8 1596               3472      JSR     getNext2Bytes
000034FC                          3473      
000034FC  E88B                    3474      LSR.L   #04,D3  ****D3 now holds the count or register
000034FE                          3475      
000034FE  0C05 0010               3476      CMPI.B  #$10,D5
00003502  6700 000E               3477      BEQ     OPisrregI1
00003506                          3478      
00003506  0C05 0000               3479      CMPI.B  #$00,D5
0000350A  6700 0022               3480      BEQ     OPisrregI0
0000350E                          3481      
0000350E  6000 E0F0               3482      BRA     OPdata
00003512                          3483  OPisrregI1
00003512  0C04 0000               3484      CMPI.B  #$00,D4
00003516  6700 0032               3485      BEQ     OPisrregbi1
0000351A                          3486      
0000351A  0C04 0001               3487      CMPI.B  #$01,D4
0000351E  6700 0070               3488      BEQ     OPisrregwi1
00003522                          3489      
00003522  0C04 0010               3490      CMPI.B  #$10,D4
00003526  6700 00AE               3491      BEQ     OPisrregli1
0000352A                          3492      
0000352A  6000 E0D4               3493      BRA     OPdata
0000352E                          3494  OPisrregI0
0000352E  0C04 0000               3495      CMPI.B  #$00,D4
00003532  6700 00E8               3496      BEQ     OPisrregbi0
00003536                          3497      
00003536  0C04 0001               3498      CMPI.B  #$01,D4
0000353A  6700 0126               3499      BEQ     OPisrregwi0
0000353E                          3500      
0000353E  0C04 0010               3501      CMPI.B  #$10,D4
00003542  6700 0164               3502      BEQ     OPisrregli0
00003546                          3503      
00003546  6000 E0B8               3504      BRA     OPdata
0000354A                          3505  OPisrregbi1
0000354A  45F9 00005400           3506      LEA     LetterL,A2
00003550  4EB8 183E               3507      JSR     addBuffer
00003554  45F9 00005407           3508      LEA     LetterS,A2
0000355A  4EB8 183E               3509      JSR     addBuffer
0000355E  45F9 00005406           3510      LEA     LetterR,A2
00003564  4EB8 183E               3511      JSR     addBuffer
00003568  45F9 00005421           3512      LEA     period,A2
0000356E  4EB8 183E               3513      JSR     addBuffer
00003572  45F9 000053F6           3514      LEA     LetterB,A2
00003578  4EB8 183E               3515      JSR     addBuffer
0000357C  45F9 0000541F           3516      LEA     space,A2
00003582  4EB8 183E               3517      JSR     addBuffer
00003586  4EB9 00003F74           3518      JSR     compareEAModeShift2Data
0000358C                          3519      
0000358C  6000 DC20               3520      BRA     askForNextCode
00003590                          3521  OPisrregwi1
00003590  45F9 00005400           3522      LEA     LetterL,A2
00003596  4EB8 183E               3523      JSR     addBuffer
0000359A  45F9 00005407           3524      LEA     LetterS,A2
000035A0  4EB8 183E               3525      JSR     addBuffer
000035A4  45F9 00005406           3526      LEA     LetterR,A2
000035AA  4EB8 183E               3527      JSR     addBuffer
000035AE  45F9 00005421           3528      LEA     period,A2
000035B4  4EB8 183E               3529      JSR     addBuffer
000035B8  45F9 0000540B           3530      LEA     LetterW,A2
000035BE  4EB8 183E               3531      JSR     addBuffer
000035C2  45F9 0000541F           3532      LEA     space,A2
000035C8  4EB8 183E               3533      JSR     addBuffer
000035CC  4EB9 00003F74           3534      JSR     compareEAModeShift2Data
000035D2                          3535      
000035D2  6000 DBDA               3536      BRA     askForNextCode
000035D6                          3537  OPisrregli1
000035D6  45F9 00005400           3538      LEA     LetterL,A2
000035DC  4EB8 183E               3539      JSR     addBuffer
000035E0  45F9 00005407           3540      LEA     LetterS,A2
000035E6  4EB8 183E               3541      JSR     addBuffer
000035EA  45F9 00005406           3542      LEA     LetterR,A2
000035F0  4EB8 183E               3543      JSR     addBuffer
000035F4  45F9 00005421           3544      LEA     period,A2
000035FA  4EB8 183E               3545      JSR     addBuffer
000035FE  45F9 00005400           3546      LEA     LetterL,A2
00003604  4EB8 183E               3547      JSR     addBuffer
00003608  45F9 0000541F           3548      LEA     space,A2
0000360E  4EB8 183E               3549      JSR     addBuffer
00003612  4EB9 00003F74           3550      JSR     compareEAModeShift2Data
00003618                          3551      
00003618  6000 DB94               3552      BRA     askForNextCode
0000361C                          3553  OPisrregbi0
0000361C  45F9 00005400           3554      LEA     LetterL,A2
00003622  4EB8 183E               3555      JSR     addBuffer
00003626  45F9 00005407           3556      LEA     LetterS,A2
0000362C  4EB8 183E               3557      JSR     addBuffer
00003630  45F9 00005406           3558      LEA     LetterR,A2
00003636  4EB8 183E               3559      JSR     addBuffer
0000363A  45F9 00005421           3560      LEA     period,A2
00003640  4EB8 183E               3561      JSR     addBuffer
00003644  45F9 000053F6           3562      LEA     LetterB,A2
0000364A  4EB8 183E               3563      JSR     addBuffer
0000364E  45F9 0000541F           3564      LEA     space,A2
00003654  4EB8 183E               3565      JSR     addBuffer
00003658  4EB9 00003FA0           3566      JSR     compareEAModeShiftCount
0000365E                          3567      
0000365E  6000 DB4E               3568      BRA     askForNextCode
00003662                          3569  OPisrregwi0
00003662  45F9 00005400           3570      LEA     LetterL,A2
00003668  4EB8 183E               3571      JSR     addBuffer
0000366C  45F9 00005407           3572      LEA     LetterS,A2
00003672  4EB8 183E               3573      JSR     addBuffer
00003676  45F9 00005406           3574      LEA     LetterR,A2
0000367C  4EB8 183E               3575      JSR     addBuffer
00003680  45F9 00005421           3576      LEA     period,A2
00003686  4EB8 183E               3577      JSR     addBuffer
0000368A  45F9 0000540B           3578      LEA     LetterW,A2
00003690  4EB8 183E               3579      JSR     addBuffer
00003694  45F9 0000541F           3580      LEA     space,A2
0000369A  4EB8 183E               3581      JSR     addBuffer
0000369E  4EB9 00003FA0           3582      JSR     compareEAModeShiftCount
000036A4                          3583      
000036A4  6000 DB08               3584      BRA     askForNextCode
000036A8                          3585  OPisrregli0
000036A8  45F9 00005400           3586      LEA     LetterL,A2
000036AE  4EB8 183E               3587      JSR     addBuffer
000036B2  45F9 00005407           3588      LEA     LetterS,A2
000036B8  4EB8 183E               3589      JSR     addBuffer
000036BC  45F9 00005406           3590      LEA     LetterR,A2
000036C2  4EB8 183E               3591      JSR     addBuffer
000036C6  45F9 00005421           3592      LEA     period,A2
000036CC  4EB8 183E               3593      JSR     addBuffer
000036D0  45F9 00005400           3594      LEA     LetterL,A2
000036D6  4EB8 183E               3595      JSR     addBuffer
000036DA  45F9 0000541F           3596      LEA     space,A2
000036E0  4EB8 183E               3597      JSR     addBuffer
000036E4  4EB9 00003FA0           3598      JSR     compareEAModeShiftCount
000036EA                          3599      
000036EA  6000 DAC2               3600      BRA     askForNextCode
000036EE                          3601      
000036EE                          3602  OProrreg
000036EE                          3603      *D3 == count? register + dr
000036EE                          3604      *D4 == size
000036EE                          3605      *D5 == i/r + 0
000036EE  4EB8 1596               3606      JSR     getNext2Bytes
000036F2                          3607      
000036F2  E88B                    3608      LSR.L   #04,D3  ****D3 now holds the count or register
000036F4                          3609      
000036F4  0C05 0010               3610      CMPI.B  #$10,D5
000036F8  6700 000E               3611      BEQ     OProrregI1
000036FC                          3612      
000036FC  0C05 0000               3613      CMPI.B  #$00,D5
00003700  6700 0022               3614      BEQ     OProrregI0
00003704                          3615      
00003704  6000 DEFA               3616      BRA     OPdata
00003708                          3617  OProrregI1
00003708  0C04 0000               3618      CMPI.B  #$00,D4
0000370C  6700 0032               3619      BEQ     OProrregbi1
00003710                          3620      
00003710  0C04 0001               3621      CMPI.B  #$01,D4
00003714  6700 0070               3622      BEQ     OProrregwi1
00003718                          3623      
00003718  0C04 0010               3624      CMPI.B  #$10,D4
0000371C  6700 00AE               3625      BEQ     OProrregli1
00003720                          3626      
00003720  6000 DEDE               3627      BRA     OPdata
00003724                          3628  OProrregI0
00003724  0C04 0000               3629      CMPI.B  #$00,D4
00003728  6700 00E8               3630      BEQ     OProrregbi0
0000372C                          3631      
0000372C  0C04 0001               3632      CMPI.B  #$01,D4
00003730  6700 0126               3633      BEQ     OProrregwi0
00003734                          3634      
00003734  0C04 0010               3635      CMPI.B  #$10,D4
00003738  6700 0164               3636      BEQ     OProrregli0
0000373C                          3637      
0000373C  6000 DEC2               3638      BRA     OPdata
00003740                          3639  OProrregbi1
00003740  45F9 00005406           3640      LEA     LetterR,A2
00003746  4EB8 183E               3641      JSR     addBuffer
0000374A  45F9 00005403           3642      LEA     LetterO,A2
00003750  4EB8 183E               3643      JSR     addBuffer
00003754  45F9 00005406           3644      LEA     LetterR,A2
0000375A  4EB8 183E               3645      JSR     addBuffer
0000375E  45F9 00005421           3646      LEA     period,A2
00003764  4EB8 183E               3647      JSR     addBuffer
00003768  45F9 000053F6           3648      LEA     LetterB,A2
0000376E  4EB8 183E               3649      JSR     addBuffer
00003772  45F9 0000541F           3650      LEA     space,A2
00003778  4EB8 183E               3651      JSR     addBuffer
0000377C  4EB9 00003F74           3652      JSR     compareEAModeShift2Data
00003782                          3653      
00003782  6000 DA2A               3654      BRA     askForNextCode
00003786                          3655  OProrregwi1
00003786  45F9 00005406           3656      LEA     LetterR,A2
0000378C  4EB8 183E               3657      JSR     addBuffer
00003790  45F9 00005403           3658      LEA     LetterO,A2
00003796  4EB8 183E               3659      JSR     addBuffer
0000379A  45F9 00005406           3660      LEA     LetterR,A2
000037A0  4EB8 183E               3661      JSR     addBuffer
000037A4  45F9 00005421           3662      LEA     period,A2
000037AA  4EB8 183E               3663      JSR     addBuffer
000037AE  45F9 0000540B           3664      LEA     LetterW,A2
000037B4  4EB8 183E               3665      JSR     addBuffer
000037B8  45F9 0000541F           3666      LEA     space,A2
000037BE  4EB8 183E               3667      JSR     addBuffer
000037C2  4EB9 00003F74           3668      JSR     compareEAModeShift2Data
000037C8                          3669      
000037C8  6000 D9E4               3670      BRA     askForNextCode
000037CC                          3671  OProrregli1
000037CC  45F9 00005406           3672      LEA     LetterR,A2
000037D2  4EB8 183E               3673      JSR     addBuffer
000037D6  45F9 00005403           3674      LEA     LetterO,A2
000037DC  4EB8 183E               3675      JSR     addBuffer
000037E0  45F9 00005406           3676      LEA     LetterR,A2
000037E6  4EB8 183E               3677      JSR     addBuffer
000037EA  45F9 00005421           3678      LEA     period,A2
000037F0  4EB8 183E               3679      JSR     addBuffer
000037F4  45F9 00005400           3680      LEA     LetterL,A2
000037FA  4EB8 183E               3681      JSR     addBuffer
000037FE  45F9 0000541F           3682      LEA     space,A2
00003804  4EB8 183E               3683      JSR     addBuffer
00003808  4EB9 00003F74           3684      JSR     compareEAModeShift2Data
0000380E                          3685      
0000380E  6000 D99E               3686      BRA     askForNextCode
00003812                          3687  OProrregbi0
00003812  45F9 00005406           3688      LEA     LetterR,A2
00003818  4EB8 183E               3689      JSR     addBuffer
0000381C  45F9 00005403           3690      LEA     LetterO,A2
00003822  4EB8 183E               3691      JSR     addBuffer
00003826  45F9 00005406           3692      LEA     LetterR,A2
0000382C  4EB8 183E               3693      JSR     addBuffer
00003830  45F9 00005421           3694      LEA     period,A2
00003836  4EB8 183E               3695      JSR     addBuffer
0000383A  45F9 000053F6           3696      LEA     LetterB,A2
00003840  4EB8 183E               3697      JSR     addBuffer
00003844  45F9 0000541F           3698      LEA     space,A2
0000384A  4EB8 183E               3699      JSR     addBuffer
0000384E  4EB9 00003FA0           3700      JSR     compareEAModeShiftCount
00003854                          3701      
00003854  6000 D958               3702      BRA     askForNextCode
00003858                          3703  OProrregwi0
00003858  45F9 00005406           3704      LEA     LetterR,A2
0000385E  4EB8 183E               3705      JSR     addBuffer
00003862  45F9 00005403           3706      LEA     LetterO,A2
00003868  4EB8 183E               3707      JSR     addBuffer
0000386C  45F9 00005406           3708      LEA     LetterR,A2
00003872  4EB8 183E               3709      JSR     addBuffer
00003876  45F9 00005421           3710      LEA     period,A2
0000387C  4EB8 183E               3711      JSR     addBuffer
00003880  45F9 0000540B           3712      LEA     LetterW,A2
00003886  4EB8 183E               3713      JSR     addBuffer
0000388A  45F9 0000541F           3714      LEA     space,A2
00003890  4EB8 183E               3715      JSR     addBuffer
00003894  4EB9 00003FA0           3716      JSR     compareEAModeShiftCount
0000389A                          3717      
0000389A  6000 D912               3718      BRA     askForNextCode
0000389E                          3719  OProrregli0
0000389E  45F9 00005406           3720      LEA     LetterR,A2
000038A4  4EB8 183E               3721      JSR     addBuffer
000038A8  45F9 00005403           3722      LEA     LetterO,A2
000038AE  4EB8 183E               3723      JSR     addBuffer
000038B2  45F9 00005406           3724      LEA     LetterR,A2
000038B8  4EB8 183E               3725      JSR     addBuffer
000038BC  45F9 00005421           3726      LEA     period,A2
000038C2  4EB8 183E               3727      JSR     addBuffer
000038C6  45F9 00005400           3728      LEA     LetterL,A2
000038CC  4EB8 183E               3729      JSR     addBuffer
000038D0  45F9 0000541F           3730      LEA     space,A2
000038D6  4EB8 183E               3731      JSR     addBuffer
000038DA  4EB9 00003FA0           3732      JSR     compareEAModeShiftCount
000038E0                          3733      
000038E0  6000 D8CC               3734      BRA     askForNextCode
000038E4                          3735      
000038E4                          3736  OPaslreg
000038E4                          3737      *D3 == count? register + dr
000038E4                          3738      *D4 == size
000038E4                          3739      *D5 == i/r + 0
000038E4  4EB8 1596               3740      JSR     getNext2Bytes
000038E8                          3741      
000038E8  E88B                    3742      LSR.L   #04,D3  ****D3 now holds the count or register
000038EA                          3743      
000038EA  0C05 0010               3744      CMPI.B  #$10,D5
000038EE  6700 000E               3745      BEQ     OPaslregI1
000038F2                          3746      
000038F2  0C05 0000               3747      CMPI.B  #$00,D5
000038F6  6700 0022               3748      BEQ     OPaslregI0
000038FA                          3749      
000038FA  6000 DD04               3750      BRA     OPdata
000038FE                          3751  OPaslregI1
000038FE  0C04 0000               3752      CMPI.B  #$00,D4
00003902  6700 0032               3753      BEQ     OPaslregbi1
00003906                          3754      
00003906  0C04 0001               3755      CMPI.B  #$01,D4
0000390A  6700 0070               3756      BEQ     OPaslregwi1
0000390E                          3757      
0000390E  0C04 0010               3758      CMPI.B  #$10,D4
00003912  6700 00AE               3759      BEQ     OPaslregli1
00003916                          3760      
00003916  6000 DCE8               3761      BRA     OPdata
0000391A                          3762  OPaslregI0
0000391A  0C04 0000               3763      CMPI.B  #$00,D4
0000391E  6700 00E8               3764      BEQ     OPaslregbi0
00003922                          3765      
00003922  0C04 0001               3766      CMPI.B  #$01,D4
00003926  6700 0126               3767      BEQ     OPaslregwi0
0000392A                          3768      
0000392A  0C04 0010               3769      CMPI.B  #$10,D4
0000392E  6700 0164               3770      BEQ     OPaslregli0
00003932                          3771      
00003932  6000 DCCC               3772      BRA     OPdata
00003936                          3773  OPaslregbi1
00003936  45F9 000053F5           3774      LEA     LetterA,A2
0000393C  4EB8 183E               3775      JSR     addBuffer
00003940  45F9 00005407           3776      LEA     LetterS,A2
00003946  4EB8 183E               3777      JSR     addBuffer
0000394A  45F9 00005400           3778      LEA     LetterL,A2
00003950  4EB8 183E               3779      JSR     addBuffer
00003954  45F9 00005421           3780      LEA     period,A2
0000395A  4EB8 183E               3781      JSR     addBuffer
0000395E  45F9 000053F6           3782      LEA     LetterB,A2
00003964  4EB8 183E               3783      JSR     addBuffer
00003968  45F9 0000541F           3784      LEA     space,A2
0000396E  4EB8 183E               3785      JSR     addBuffer
00003972  4EB9 00003F74           3786      JSR     compareEAModeShift2Data
00003978                          3787      
00003978  6000 D834               3788      BRA     askForNextCode
0000397C                          3789  OPaslregwi1
0000397C  45F9 000053F5           3790      LEA     LetterA,A2
00003982  4EB8 183E               3791      JSR     addBuffer
00003986  45F9 00005407           3792      LEA     LetterS,A2
0000398C  4EB8 183E               3793      JSR     addBuffer
00003990  45F9 00005400           3794      LEA     LetterL,A2
00003996  4EB8 183E               3795      JSR     addBuffer
0000399A  45F9 00005421           3796      LEA     period,A2
000039A0  4EB8 183E               3797      JSR     addBuffer
000039A4  45F9 0000540B           3798      LEA     LetterW,A2
000039AA  4EB8 183E               3799      JSR     addBuffer
000039AE  45F9 0000541F           3800      LEA     space,A2
000039B4  4EB8 183E               3801      JSR     addBuffer
000039B8  4EB9 00003F74           3802      JSR     compareEAModeShift2Data
000039BE                          3803      
000039BE  6000 D7EE               3804      BRA     askForNextCode
000039C2                          3805  OPaslregli1
000039C2  45F9 000053F5           3806      LEA     LetterA,A2
000039C8  4EB8 183E               3807      JSR     addBuffer
000039CC  45F9 00005407           3808      LEA     LetterS,A2
000039D2  4EB8 183E               3809      JSR     addBuffer
000039D6  45F9 00005400           3810      LEA     LetterL,A2
000039DC  4EB8 183E               3811      JSR     addBuffer
000039E0  45F9 00005421           3812      LEA     period,A2
000039E6  4EB8 183E               3813      JSR     addBuffer
000039EA  45F9 00005400           3814      LEA     LetterL,A2
000039F0  4EB8 183E               3815      JSR     addBuffer
000039F4  45F9 0000541F           3816      LEA     space,A2
000039FA  4EB8 183E               3817      JSR     addBuffer
000039FE  4EB9 00003F74           3818      JSR     compareEAModeShift2Data
00003A04                          3819      
00003A04  6000 D7A8               3820      BRA     askForNextCode
00003A08                          3821  OPaslregbi0
00003A08  45F9 000053F5           3822      LEA     LetterA,A2
00003A0E  4EB8 183E               3823      JSR     addBuffer
00003A12  45F9 00005407           3824      LEA     LetterS,A2
00003A18  4EB8 183E               3825      JSR     addBuffer
00003A1C  45F9 00005400           3826      LEA     LetterL,A2
00003A22  4EB8 183E               3827      JSR     addBuffer
00003A26  45F9 00005421           3828      LEA     period,A2
00003A2C  4EB8 183E               3829      JSR     addBuffer
00003A30  45F9 000053F6           3830      LEA     LetterB,A2
00003A36  4EB8 183E               3831      JSR     addBuffer
00003A3A  45F9 0000541F           3832      LEA     space,A2
00003A40  4EB8 183E               3833      JSR     addBuffer
00003A44  4EB9 00003FA0           3834      JSR     compareEAModeShiftCount
00003A4A                          3835      
00003A4A  6000 D762               3836      BRA     askForNextCode
00003A4E                          3837  OPaslregwi0
00003A4E  45F9 000053F5           3838      LEA     LetterA,A2
00003A54  4EB8 183E               3839      JSR     addBuffer
00003A58  45F9 00005407           3840      LEA     LetterS,A2
00003A5E  4EB8 183E               3841      JSR     addBuffer
00003A62  45F9 00005400           3842      LEA     LetterL,A2
00003A68  4EB8 183E               3843      JSR     addBuffer
00003A6C  45F9 00005421           3844      LEA     period,A2
00003A72  4EB8 183E               3845      JSR     addBuffer
00003A76  45F9 0000540B           3846      LEA     LetterW,A2
00003A7C  4EB8 183E               3847      JSR     addBuffer
00003A80  45F9 0000541F           3848      LEA     space,A2
00003A86  4EB8 183E               3849      JSR     addBuffer
00003A8A  4EB9 00003FA0           3850      JSR     compareEAModeShiftCount
00003A90                          3851      
00003A90  6000 D71C               3852      BRA     askForNextCode
00003A94                          3853  OPaslregli0
00003A94  45F9 000053F5           3854      LEA     LetterA,A2
00003A9A  4EB8 183E               3855      JSR     addBuffer
00003A9E  45F9 00005407           3856      LEA     LetterS,A2
00003AA4  4EB8 183E               3857      JSR     addBuffer
00003AA8  45F9 00005400           3858      LEA     LetterL,A2
00003AAE  4EB8 183E               3859      JSR     addBuffer
00003AB2  45F9 00005421           3860      LEA     period,A2
00003AB8  4EB8 183E               3861      JSR     addBuffer
00003ABC  45F9 00005400           3862      LEA     LetterL,A2
00003AC2  4EB8 183E               3863      JSR     addBuffer
00003AC6  45F9 0000541F           3864      LEA     space,A2
00003ACC  4EB8 183E               3865      JSR     addBuffer
00003AD0  4EB9 00003FA0           3866      JSR     compareEAModeShiftCount
00003AD6                          3867      
00003AD6  6000 D6D6               3868      BRA     askForNextCode
00003ADA                          3869      
00003ADA                          3870  OPlslreg
00003ADA                          3871      *D3 == count? register + dr
00003ADA                          3872      *D4 == size
00003ADA                          3873      *D5 == i/r + 0
00003ADA  4EB8 1596               3874      JSR     getNext2Bytes
00003ADE                          3875      
00003ADE  E88B                    3876      LSR.L   #04,D3  ****D3 now holds the count or register
00003AE0                          3877      
00003AE0  0C05 0010               3878      CMPI.B  #$10,D5
00003AE4  6700 000E               3879      BEQ     OPlslregI1
00003AE8                          3880      
00003AE8  0C05 0000               3881      CMPI.B  #$00,D5
00003AEC  6700 0022               3882      BEQ     OPlslregI0
00003AF0                          3883      
00003AF0  6000 DB0E               3884      BRA     OPdata
00003AF4                          3885  OPlslregI1
00003AF4  0C04 0000               3886      CMPI.B  #$00,D4
00003AF8  6700 0032               3887      BEQ     OPlslregbi1
00003AFC                          3888      
00003AFC  0C04 0001               3889      CMPI.B  #$01,D4
00003B00  6700 0070               3890      BEQ     OPlslregwi1
00003B04                          3891      
00003B04  0C04 0010               3892      CMPI.B  #$10,D4
00003B08  6700 00AE               3893      BEQ     OPlslregli1
00003B0C                          3894      
00003B0C  6000 DAF2               3895      BRA     OPdata
00003B10                          3896  OPlslregI0
00003B10  0C04 0000               3897      CMPI.B  #$00,D4
00003B14  6700 00E8               3898      BEQ     OPlslregbi0
00003B18                          3899      
00003B18  0C04 0001               3900      CMPI.B  #$01,D4
00003B1C  6700 0126               3901      BEQ     OPlslregwi0
00003B20                          3902      
00003B20  0C04 0010               3903      CMPI.B  #$10,D4
00003B24  6700 0164               3904      BEQ     OPlslregli0
00003B28                          3905      
00003B28  6000 DAD6               3906      BRA     OPdata
00003B2C                          3907  OPlslregbi1
00003B2C  45F9 00005400           3908      LEA     LetterL,A2
00003B32  4EB8 183E               3909      JSR     addBuffer
00003B36  45F9 00005407           3910      LEA     LetterS,A2
00003B3C  4EB8 183E               3911      JSR     addBuffer
00003B40  45F9 00005400           3912      LEA     LetterL,A2
00003B46  4EB8 183E               3913      JSR     addBuffer
00003B4A  45F9 00005421           3914      LEA     period,A2
00003B50  4EB8 183E               3915      JSR     addBuffer
00003B54  45F9 000053F6           3916      LEA     LetterB,A2
00003B5A  4EB8 183E               3917      JSR     addBuffer
00003B5E  45F9 0000541F           3918      LEA     space,A2
00003B64  4EB8 183E               3919      JSR     addBuffer
00003B68  4EB9 00003F74           3920      JSR     compareEAModeShift2Data
00003B6E                          3921      
00003B6E  6000 D63E               3922      BRA     askForNextCode
00003B72                          3923  OPlslregwi1
00003B72  45F9 00005400           3924      LEA     LetterL,A2
00003B78  4EB8 183E               3925      JSR     addBuffer
00003B7C  45F9 00005407           3926      LEA     LetterS,A2
00003B82  4EB8 183E               3927      JSR     addBuffer
00003B86  45F9 00005400           3928      LEA     LetterL,A2
00003B8C  4EB8 183E               3929      JSR     addBuffer
00003B90  45F9 00005421           3930      LEA     period,A2
00003B96  4EB8 183E               3931      JSR     addBuffer
00003B9A  45F9 0000540B           3932      LEA     LetterW,A2
00003BA0  4EB8 183E               3933      JSR     addBuffer
00003BA4  45F9 0000541F           3934      LEA     space,A2
00003BAA  4EB8 183E               3935      JSR     addBuffer
00003BAE  4EB9 00003F74           3936      JSR     compareEAModeShift2Data
00003BB4                          3937      
00003BB4  6000 D5F8               3938      BRA     askForNextCode
00003BB8                          3939  OPlslregli1
00003BB8  45F9 00005400           3940      LEA     LetterL,A2
00003BBE  4EB8 183E               3941      JSR     addBuffer
00003BC2  45F9 00005407           3942      LEA     LetterS,A2
00003BC8  4EB8 183E               3943      JSR     addBuffer
00003BCC  45F9 00005400           3944      LEA     LetterL,A2
00003BD2  4EB8 183E               3945      JSR     addBuffer
00003BD6  45F9 00005421           3946      LEA     period,A2
00003BDC  4EB8 183E               3947      JSR     addBuffer
00003BE0  45F9 00005400           3948      LEA     LetterL,A2
00003BE6  4EB8 183E               3949      JSR     addBuffer
00003BEA  45F9 0000541F           3950      LEA     space,A2
00003BF0  4EB8 183E               3951      JSR     addBuffer
00003BF4  4EB9 00003F74           3952      JSR     compareEAModeShift2Data
00003BFA                          3953      
00003BFA  6000 D5B2               3954      BRA     askForNextCode
00003BFE                          3955  OPlslregbi0
00003BFE  45F9 00005400           3956      LEA     LetterL,A2
00003C04  4EB8 183E               3957      JSR     addBuffer
00003C08  45F9 00005407           3958      LEA     LetterS,A2
00003C0E  4EB8 183E               3959      JSR     addBuffer
00003C12  45F9 00005400           3960      LEA     LetterL,A2
00003C18  4EB8 183E               3961      JSR     addBuffer
00003C1C  45F9 00005421           3962      LEA     period,A2
00003C22  4EB8 183E               3963      JSR     addBuffer
00003C26  45F9 000053F6           3964      LEA     LetterB,A2
00003C2C  4EB8 183E               3965      JSR     addBuffer
00003C30  45F9 0000541F           3966      LEA     space,A2
00003C36  4EB8 183E               3967      JSR     addBuffer
00003C3A  4EB9 00003FA0           3968      JSR     compareEAModeShiftCount
00003C40                          3969      
00003C40  6000 D56C               3970      BRA     askForNextCode
00003C44                          3971  OPlslregwi0
00003C44  45F9 00005400           3972      LEA     LetterL,A2
00003C4A  4EB8 183E               3973      JSR     addBuffer
00003C4E  45F9 00005407           3974      LEA     LetterS,A2
00003C54  4EB8 183E               3975      JSR     addBuffer
00003C58  45F9 00005400           3976      LEA     LetterL,A2
00003C5E  4EB8 183E               3977      JSR     addBuffer
00003C62  45F9 00005421           3978      LEA     period,A2
00003C68  4EB8 183E               3979      JSR     addBuffer
00003C6C  45F9 0000540B           3980      LEA     LetterW,A2
00003C72  4EB8 183E               3981      JSR     addBuffer
00003C76  45F9 0000541F           3982      LEA     space,A2
00003C7C  4EB8 183E               3983      JSR     addBuffer
00003C80  4EB9 00003FA0           3984      JSR     compareEAModeShiftCount
00003C86                          3985      
00003C86  6000 D526               3986      BRA     askForNextCode
00003C8A                          3987  OPlslregli0
00003C8A  45F9 00005400           3988      LEA     LetterL,A2
00003C90  4EB8 183E               3989      JSR     addBuffer
00003C94  45F9 00005407           3990      LEA     LetterS,A2
00003C9A  4EB8 183E               3991      JSR     addBuffer
00003C9E  45F9 00005400           3992      LEA     LetterL,A2
00003CA4  4EB8 183E               3993      JSR     addBuffer
00003CA8  45F9 00005421           3994      LEA     period,A2
00003CAE  4EB8 183E               3995      JSR     addBuffer
00003CB2  45F9 00005400           3996      LEA     LetterL,A2
00003CB8  4EB8 183E               3997      JSR     addBuffer
00003CBC  45F9 0000541F           3998      LEA     space,A2
00003CC2  4EB8 183E               3999      JSR     addBuffer
00003CC6  4EB9 00003FA0           4000      JSR     compareEAModeShiftCount
00003CCC                          4001      
00003CCC  6000 D4E0               4002      BRA     askForNextCode
00003CD0                          4003      
00003CD0                          4004  OProlreg
00003CD0                          4005      *D3 == count? register + dr
00003CD0                          4006      *D4 == size
00003CD0                          4007      *D5 == i/r + 0
00003CD0  4EB8 1596               4008      JSR     getNext2Bytes
00003CD4                          4009      
00003CD4  E88B                    4010      LSR.L   #04,D3  ****D3 now holds the count or register
00003CD6                          4011      
00003CD6  0C05 0010               4012      CMPI.B  #$10,D5
00003CDA  6700 000E               4013      BEQ     OProlregi1
00003CDE                          4014      
00003CDE  0C05 0000               4015      CMPI.B  #$00,D5
00003CE2  6700 0022               4016      BEQ     OProlregi0
00003CE6                          4017      
00003CE6  6000 D918               4018      BRA     OPdata
00003CEA                          4019  OProlregI1
00003CEA  0C04 0000               4020      CMPI.B  #$00,D4
00003CEE  6700 0032               4021      BEQ     OProlregbi1
00003CF2                          4022      
00003CF2  0C04 0001               4023      CMPI.B  #$01,D4
00003CF6  6700 0070               4024      BEQ     OProlregwi1
00003CFA                          4025      
00003CFA  0C04 0010               4026      CMPI.B  #$10,D4
00003CFE  6700 00AE               4027      BEQ     OProlregli1
00003D02                          4028      
00003D02  6000 D8FC               4029      BRA     OPdata
00003D06                          4030  OProlregI0
00003D06  0C04 0000               4031      CMPI.B  #$00,D4
00003D0A  6700 00E8               4032      BEQ     OProlregbi0
00003D0E                          4033      
00003D0E  0C04 0001               4034      CMPI.B  #$01,D4
00003D12  6700 0126               4035      BEQ     OProlregwi0
00003D16                          4036      
00003D16  0C04 0010               4037      CMPI.B  #$10,D4
00003D1A  6700 0164               4038      BEQ     OProlregli0
00003D1E                          4039      
00003D1E  6000 D8E0               4040      BRA     OPdata
00003D22                          4041  OProlregbi1
00003D22  45F9 00005406           4042      LEA     LetterR,A2
00003D28  4EB8 183E               4043      JSR     addBuffer
00003D2C  45F9 00005403           4044      LEA     LetterO,A2
00003D32  4EB8 183E               4045      JSR     addBuffer
00003D36  45F9 00005400           4046      LEA     LetterL,A2
00003D3C  4EB8 183E               4047      JSR     addBuffer
00003D40  45F9 00005421           4048      LEA     period,A2
00003D46  4EB8 183E               4049      JSR     addBuffer
00003D4A  45F9 000053F6           4050      LEA     LetterB,A2
00003D50  4EB8 183E               4051      JSR     addBuffer
00003D54  45F9 0000541F           4052      LEA     space,A2
00003D5A  4EB8 183E               4053      JSR     addBuffer
00003D5E  4EB9 00003F74           4054      JSR     compareEAModeShift2Data
00003D64                          4055      
00003D64  6000 D448               4056      BRA     askForNextCode
00003D68                          4057  OProlregwi1
00003D68  45F9 00005406           4058      LEA     LetterR,A2
00003D6E  4EB8 183E               4059      JSR     addBuffer
00003D72  45F9 00005403           4060      LEA     LetterO,A2
00003D78  4EB8 183E               4061      JSR     addBuffer
00003D7C  45F9 00005400           4062      LEA     LetterL,A2
00003D82  4EB8 183E               4063      JSR     addBuffer
00003D86  45F9 00005421           4064      LEA     period,A2
00003D8C  4EB8 183E               4065      JSR     addBuffer
00003D90  45F9 0000540B           4066      LEA     LetterW,A2
00003D96  4EB8 183E               4067      JSR     addBuffer
00003D9A  45F9 0000541F           4068      LEA     space,A2
00003DA0  4EB8 183E               4069      JSR     addBuffer
00003DA4  4EB9 00003F74           4070      JSR     compareEAModeShift2Data
00003DAA                          4071      
00003DAA  6000 D402               4072      BRA     askForNextCode
00003DAE                          4073  OProlregli1
00003DAE  45F9 00005406           4074      LEA     LetterR,A2
00003DB4  4EB8 183E               4075      JSR     addBuffer
00003DB8  45F9 00005403           4076      LEA     LetterO,A2
00003DBE  4EB8 183E               4077      JSR     addBuffer
00003DC2  45F9 00005400           4078      LEA     LetterL,A2
00003DC8  4EB8 183E               4079      JSR     addBuffer
00003DCC  45F9 00005421           4080      LEA     period,A2
00003DD2  4EB8 183E               4081      JSR     addBuffer
00003DD6  45F9 00005400           4082      LEA     LetterL,A2
00003DDC  4EB8 183E               4083      JSR     addBuffer
00003DE0  45F9 0000541F           4084      LEA     space,A2
00003DE6  4EB8 183E               4085      JSR     addBuffer
00003DEA  4EB9 00003F74           4086      JSR     compareEAModeShift2Data
00003DF0                          4087      
00003DF0  6000 D3BC               4088      BRA     askForNextCode
00003DF4                          4089  OProlregbi0
00003DF4  45F9 00005406           4090      LEA     LetterR,A2
00003DFA  4EB8 183E               4091      JSR     addBuffer
00003DFE  45F9 00005403           4092      LEA     LetterO,A2
00003E04  4EB8 183E               4093      JSR     addBuffer
00003E08  45F9 00005400           4094      LEA     LetterL,A2
00003E0E  4EB8 183E               4095      JSR     addBuffer
00003E12  45F9 00005421           4096      LEA     period,A2
00003E18  4EB8 183E               4097      JSR     addBuffer
00003E1C  45F9 000053F6           4098      LEA     LetterB,A2
00003E22  4EB8 183E               4099      JSR     addBuffer
00003E26  45F9 0000541F           4100      LEA     space,A2
00003E2C  4EB8 183E               4101      JSR     addBuffer
00003E30  4EB9 00003FA0           4102      JSR     compareEAModeShiftCount
00003E36                          4103      
00003E36  6000 D376               4104      BRA     askForNextCode
00003E3A                          4105  OProlregwi0
00003E3A  45F9 00005406           4106      LEA     LetterR,A2
00003E40  4EB8 183E               4107      JSR     addBuffer
00003E44  45F9 00005403           4108      LEA     LetterO,A2
00003E4A  4EB8 183E               4109      JSR     addBuffer
00003E4E  45F9 00005400           4110      LEA     LetterL,A2
00003E54  4EB8 183E               4111      JSR     addBuffer
00003E58  45F9 00005421           4112      LEA     period,A2
00003E5E  4EB8 183E               4113      JSR     addBuffer
00003E62  45F9 0000540B           4114      LEA     LetterW,A2
00003E68  4EB8 183E               4115      JSR     addBuffer
00003E6C  45F9 0000541F           4116      LEA     space,A2
00003E72  4EB8 183E               4117      JSR     addBuffer
00003E76  4EB9 00003FA0           4118      JSR     compareEAModeShiftCount
00003E7C                          4119      
00003E7C  6000 D330               4120      BRA     askForNextCode
00003E80                          4121  OProlregli0
00003E80  45F9 00005406           4122      LEA     LetterR,A2
00003E86  4EB8 183E               4123      JSR     addBuffer
00003E8A  45F9 00005403           4124      LEA     LetterO,A2
00003E90  4EB8 183E               4125      JSR     addBuffer
00003E94  45F9 00005400           4126      LEA     LetterL,A2
00003E9A  4EB8 183E               4127      JSR     addBuffer
00003E9E  45F9 00005421           4128      LEA     period,A2
00003EA4  4EB8 183E               4129      JSR     addBuffer
00003EA8  45F9 00005400           4130      LEA     LetterL,A2
00003EAE  4EB8 183E               4131      JSR     addBuffer
00003EB2  45F9 0000541F           4132      LEA     space,A2
00003EB8  4EB8 183E               4133      JSR     addBuffer
00003EBC  4EB9 00003FA0           4134      JSR     compareEAModeShiftCount
00003EC2                          4135      
00003EC2  6000 D2EA               4136      BRA     askForNextCode
00003EC6                          4137      
00003EC6                          4138  * Loads D5 and D6 with the MODE and EAXn bits respectively
00003EC6                          4139  * Precondition: OPCode bits are valid
00003EC6                          4140  * Postcondition: D5 holds the 3 MODE bits and D6 holds the 3 EAXn bits
00003EC6                          4141  EALoadBits
00003EC6  7A00                    4142      MOVE.L      #$00000000,D5
00003EC8  7C00                    4143      MOVE.L      #$00000000,D6
00003ECA                          4144      ************Effective Address Mode = 000 001
00003ECA  2A02                    4145      MOVE.L      D2,D5               *D5 now holds 0000 0000*
00003ECC  E18D                    4146      LSL.L       #08,D5              *Shifts D5 to the left by 2*
00003ECE  4EB8 1596               4147      JSR         getNext2Bytes       *Grabs the next 2 bits... D2 now holds 0000 0000*
00003ED2  DA82                    4148      ADD.L       D2,D5               *D5 now holds 0000 0000*
00003ED4  E18D                    4149      LSL.L       #08,D5              *D5 now holds 0000 0000*
00003ED6  4EB8 1596               4150      JSR         getNext2Bytes       *Grabs the next 2 bits... D2 now holds 0000 0001*
00003EDA  DA82                    4151      ADD.L       D2,D5               *D5 now holds the 6 bits of EA: 0000 0001*
00003EDC  2C05                    4152      MOVE.L      D5,D6
00003EDE  CC7C 0111               4153      AND         #$00000111,D6       *D6 contains effective address register
00003EE2  E08D                    4154      LSR.L       #08,D5               *D5 shift right once. D5 contains effective address mode
00003EE4  E88D                    4155      LSR.L       #04,D5               *D5 shift right once. D5 contains effective address mode
00003EE6  4E75                    4156      RTS
00003EE8                          4157  
00003EE8                          4158  *********************************************************************************
00003EE8                          4159  * Method Name: EALoadBitsReverse
00003EE8                          4160  * Description: Loads the EA stuff into D5 and D6 but puts register into D5 and 
00003EE8                          4161  * mode in D6
00003EE8                          4162  *********************************************************************************      
00003EE8                          4163  EALoadBitsReverse
00003EE8  7A00                    4164      MOVE.L      #$00000000,D5
00003EEA  7C00                    4165      MOVE.L      #$00000000,D6
00003EEC                          4166    
00003EEC  2C02                    4167      MOVE.L      D2,D6               
00003EEE  E18E                    4168      LSL.L       #08,D6              
00003EF0  4EB8 1596               4169      JSR         getNext2Bytes       
00003EF4  DC82                    4170      ADD.L       D2,D6               
00003EF6  E18E                    4171      LSL.L       #08,D6              
00003EF8  4EB8 1596               4172      JSR         getNext2Bytes       
00003EFC  DC82                    4173      ADD.L       D2,D6               
00003EFE  2A06                    4174      MOVE.L      D6,D5
00003F00  CA7C 0111               4175      AND         #$00000111,D5       
00003F04  E08E                    4176      LSR.L       #08,D6              
00003F06  E88E                    4177      LSR.L       #04,D6              
00003F08  4E75                    4178      RTS
00003F0A                          4179  
00003F0A                          4180  *********************************************************************************
00003F0A                          4181  * Method Name: EALoadBitsDestinationFromD0
00003F0A                          4182  * Description: Grabs the EA stored in D0 and stores register in D5 and mode in D6
00003F0A                          4183  *********************************************************************************      
00003F0A                          4184  EALoadBitsDestinationFromD0
00003F0A  7A00                    4185      MOVE.L      #$00000000,D5
00003F0C  7C00                    4186      MOVE.L      #$00000000,D6
00003F0E  2A00                    4187      MOVE.L      D0,D5
00003F10  2C05                    4188      MOVE.L      D5,D6
00003F12  CC7C 0111               4189      AND         #$00000111,D6
00003F16  E08D                    4190      LSR.L       #08,D5
00003F18  E88D                    4191      LSR.L       #04,D5
00003F1A  4E75                    4192      RTS
00003F1C                          4193  
00003F1C                          4194  *********************************************************************************
00003F1C                          4195  * Method Name: EALoadBitsRevDestinationFromD0
00003F1C                          4196  * Description: Grabs EA in D0 and stores register in D6 and mode in D5
00003F1C                          4197  *********************************************************************************      
00003F1C                          4198  EALoadBitsRevDestinationFromD0
00003F1C  7A00                    4199      MOVE.L      #$00000000,D5
00003F1E  7C00                    4200      MOVE.L      #$00000000,D6
00003F20  2C00                    4201      MOVE.L      D0,D6
00003F22  2A06                    4202      MOVE.L      D6,D5
00003F24  CA7C 0111               4203      AND         #$00000111,D5       
00003F28  E08E                    4204      LSR.L       #08,D6              
00003F2A  E88E                    4205      LSR.L       #04,D6 
00003F2C  CC7C 0111               4206      AND         #$00000111,D6
00003F30  4E75                    4207      RTS
00003F32                          4208      
00003F32                          4209  *********************************************************************************
00003F32                          4210  * Method Name: EALoadBitsSource
00003F32                          4211  * Description: Clears D5 and D6, grabs the EA stuff from memory
00003F32                          4212  *********************************************************************************  
00003F32                          4213  EALoadBitsSource
00003F32  7A00                    4214      MOVE.L      #$00000000,D5
00003F34  7C00                    4215      MOVE.L      #$00000000,D6
00003F36                          4216      ************Effective Address Mode = 000 001
00003F36  2A02                    4217      MOVE.L      D2,D5               *D5 now holds 0000 0000*
00003F38  E18D                    4218      LSL.L       #08,D5              *Shifts D5 to the left by 2*
00003F3A  4EB8 1596               4219      JSR         getNext2Bytes       *Grabs the next 2 bits... D2 now holds 0000 0000*
00003F3E  DA82                    4220      ADD.L       D2,D5               *D5 now holds 0000 0000*
00003F40  E18D                    4221      LSL.L       #08,D5             *D5 now holds 0000 0000*
00003F42  4EB8 1596               4222      JSR         getNext2Bytes       *Grabs the next 2 bits... D2 now holds 0000 0001*
00003F46  DA82                    4223      ADD.L       D2,D5               *D5 now holds the 6 bits of EA: 0000 0001*
00003F48  2C05                    4224      MOVE.L      D5,D6
00003F4A  CC7C 0111               4225      AND         #$00000111,D6       *D6 contains effective address register
00003F4E  E08D                    4226      LSR.L       #08,D5               *D5 shift right once. D5 contains effective address mode
00003F50  E88D                    4227      LSR.L       #04,D5               *D5 shift right once. D5 contains effective address mode
00003F52  4E75                    4228      RTS
00003F54                          4229  
00003F54                          4230  *********************************************************************************
00003F54                          4231  * Method Name: EAPushToD0
00003F54                          4232  * Description: gets the EA information from memory and stores it in D0
00003F54                          4233  *********************************************************************************      
00003F54                          4234  EAPushToD0
00003F54  7A00                    4235      MOVE.L      #$00000000,D5
00003F56  7C00                    4236      MOVE.L      #$00000000,D6
00003F58                          4237      
00003F58  E188                    4238      LSL.L       #08,D0
00003F5A  E188                    4239      LSL.L       #08,D0
00003F5C  E188                    4240      LSL.L       #08,D0
00003F5E                          4241      
00003F5E  2A02                    4242      MOVE.L      D2,D5
00003F60  E18D                    4243      LSL.L       #08,D5
00003F62  4EB8 1596               4244      JSR         getNext2Bytes
00003F66  DA82                    4245      ADD.L       D2,D5
00003F68  E18D                    4246      LSL.L       #08,D5
00003F6A  4EB8 1596               4247      JSR         getNext2Bytes
00003F6E  DA82                    4248      ADD.L       D2,D5
00003F70  D085                    4249      ADD.L       D5,D0
00003F72                          4250      
00003F72  4E75                    4251      RTS
00003F74                          4252  
00003F74                          4253  *********************************************************************************
00003F74                          4254  * Method Name: compareEAModeShift2Data
00003F74                          4255  * Description: Compares the EA data and runs the respective methods for shift
00003F74                          4256  * Instructions in which 2 data regsiters are used
00003F74                          4257  *********************************************************************************      
00003F74                          4258  compareEAModeShift2Data
00003F74                          4259      ***D3 holds datax, D2 holds x+datay
00003F74                          4260      
00003F74  2A02                    4261      MOVE.L      D2,D5
00003F76  E14D                    4262      LSL.W       #08,D5
00003F78  4EB8 1596               4263      JSR         getNext2Bytes
00003F7C  DA82                    4264      ADD.L       D2,D5
00003F7E  CABC 00000111           4265      AND.L       #$00000111,D5
00003F84                          4266      **D5 now holds reg
00003F84                          4267      
00003F84  2C03                    4268      MOVE.L      D3,D6
00003F86  4EB9 00004DE4           4269      JSR         EAModeDataReg
00003F8C                          4270      
00003F8C  45F9 00005420           4271      LEA         comma,A2
00003F92  4EB8 183E               4272      JSR         addBuffer
00003F96                          4273      
00003F96  2C05                    4274      MOVE.L      D5,D6
00003F98  4EB9 00004DE4           4275      JSR         EAModeDataReg
00003F9E                          4276      
00003F9E  4E75                    4277      RTS
00003FA0                          4278  *********************************************************************************
00003FA0                          4279  * Method Name: compareEAModeShiftCount
00003FA0                          4280  * Description: Compares the EA data and runs the respective methods for shift
00003FA0                          4281  * Insturtions in which a data reg and immedate value are used
00003FA0                          4282  *********************************************************************************  
00003FA0                          4283  compareEAModeShiftCount
00003FA0  2A02                    4284      MOVE.L      D2,D5
00003FA2  E14D                    4285      LSL.W       #08,D5
00003FA4  4EB8 1596               4286      JSR         getNext2Bytes
00003FA8  DA82                    4287      ADD.L       D2,D5
00003FAA  CABC 00000111           4288      AND.L       #$00000111,D5
00003FB0                          4289  
00003FB0  45F9 0000541D           4290      LEA         NumberSign,A2
00003FB6  4EB8 183E               4291      JSR         addBuffer
00003FBA  4EB9 00004400           4292      JSR         getImmediateValue
00003FC0  45F9 00005420           4293      LEA         comma,A2
00003FC6  4EB8 183E               4294      JSR         addBuffer
00003FCA                          4295      
00003FCA  2C05                    4296      MOVE.L      D5,D6
00003FCC  4EB9 00004DE4           4297      JSR         EAModeDataReg
00003FD2                          4298      
00003FD2  4E75                    4299      RTS
00003FD4                          4300  *********************************************************************************
00003FD4                          4301  * Method Name: compareEAModeShiftEA
00003FD4                          4302  * Description: Compares EA data and runs respective methods for shift Instructions
00003FD4                          4303  * for where they just print an EA
00003FD4                          4304  *********************************************************************************  
00003FD4                          4305  compareEAModeShiftEA
00003FD4  4EB8 3EC6               4306      JSR         EALoadBits
00003FD8                          4307      
00003FD8  0C45 0010               4308      CMPI.W      #$0010,D5              ; Mode bits are 010
00003FDC  6700 0EB8               4309      BEQ         EAModeARIndirect 
00003FE0                          4310      
00003FE0  0C45 0011               4311      CMPI.W      #$0011,D5              ; Mode bits are 011
00003FE4  6700 0ECA               4312      BEQ         EAModeIncrement 
00003FE8                          4313      
00003FE8  0C45 0100               4314      CMPI.W      #$0100,D5              ; Mode bits are 101
00003FEC  6700 0ED2               4315      BEQ         EAModeDecrement 
00003FF0                          4316      
00003FF0  0C45 0111               4317      CMPI.W      #$0111,D5              ; Mode bits are 111
00003FF4  6700 0EDA               4318      BEQ         EAModeDirect
00003FF8                          4319      
00003FF8  6000 D606               4320      BRA         OPdata
00003FFC                          4321  *********************************************************************************
00003FFC                          4322  * Method Name: compareEAModeMOVE
00003FFC                          4323  * Description: Runs the respective EA methods based on the EA of move
00003FFC                          4324  *********************************************************************************  
00003FFC                          4325  compareEAModeMOVE
00003FFC  4EB8 3F54               4326      JSR         EAPushToD0
00004000  4EB8 1596               4327      JSR         getNext2Bytes
00004004  4EB8 3F32               4328      JSR         EALoadBitsSource
00004008  2400                    4329      MOVE.L      D0,D2
0000400A  E088                    4330      LSR.L       #08,D0
0000400C  E088                    4331      LSR.L       #08,D0
0000400E  E088                    4332      LSR.L       #08,D0
00004010                          4333      
00004010  4EB9 00004058           4334      JSR         OPmoveEASourcecheck
00004016  2002                    4335      MOVE.L      D2,D0
00004018  C0BC 00111111           4336      AND.L        #$00111111,D0
0000401E  45F9 00005420           4337      LEA         comma,A2
00004024  4EB8 183E               4338      JSR         addBuffer
00004028                          4339      
00004028  4EB8 3F1C               4340      JSR         EALoadBitsRevDestinationFromD0
0000402C                          4341      
0000402C  0C45 0000               4342      CMPI.W      #$0000,D5              ; Mode bits are 000
00004030  6700 0DB2               4343      BEQ         EAModeDataReg
00004034                          4344      
00004034  0C45 0010               4345      CMPI.W      #$0010,D5              ; Mode bits are 010
00004038  6700 0E5C               4346      BEQ         EAModeARIndirect 
0000403C                          4347      
0000403C  0C45 0011               4348      CMPI.W      #$0011,D5              ; Mode bits are 011
00004040  6700 0E6E               4349      BEQ         EAModeIncrement 
00004044                          4350      
00004044  0C45 0100               4351      CMPI.W      #$0100,D5              ; Mode bits are 101
00004048  6700 0E76               4352      BEQ         EAModeDecrement 
0000404C                          4353      
0000404C  0C45 0111               4354      CMPI.W      #$0111,D5              ; Mode bits are 111
00004050  6700 0E7E               4355      BEQ         EAModeDirect
00004054                          4356      
00004054  6000 D5AA               4357      BRA         OPdata
00004058                          4358      
00004058                          4359  *********************************************************************************
00004058                          4360  * Method Name: OPmoveEASourcecheck
00004058                          4361  * Description: Checks for all possible MOVE combinations for EA
00004058                          4362  *********************************************************************************     
00004058                          4363  OPmoveEASourcecheck
00004058  0C45 0000               4364       CMPI.W     #$0000,D5
0000405C  6700 0D86               4365       BEQ        EAModeDataReg
00004060                          4366       
00004060  0C45 0001               4367       CMPI.W     #$0001,D5
00004064  6700 0DD2               4368       BEQ        EAModeAddrReg
00004068                          4369       
00004068  0C45 0010               4370       CMPI.W     #$0010,D5
0000406C  6700 0E28               4371       BEQ        EAModeARIndirect
00004070                          4372       
00004070  0C45 0011               4373       CMPI.W     #$0011,D5
00004074  6700 0E3A               4374       BEQ        EAModeIncrement
00004078                          4375       
00004078  0C45 0100               4376       CMPI.W     #$0100,D5
0000407C  6700 0E42               4377       BEQ        EAModeDecrement
00004080                          4378       
00004080  0C45 0111               4379       CMPI.W     #$0111,D5
00004084  6700 0E5E               4380       BEQ        EAModeDirectOrImm  
00004088                          4381       
00004088  6000 D576               4382       BRA        OPdata
0000408C                          4383  
0000408C                          4384  *********************************************************************************
0000408C                          4385  * Method Name: compareEAModeJSR
0000408C                          4386  * Description: Checks for all possible JSR combinations for EA
0000408C                          4387  *********************************************************************************       
0000408C                          4388  compareEAModeJSR
0000408C  4EB8 3EC6               4389      JSR         EALoadBits
00004090                          4390      
00004090  0C45 0010               4391      CMPI.W      #$0010,D5
00004094  6700 0E00               4392      BEQ         EAModeARIndirect
00004098                          4393      
00004098  0C45 0111               4394      CMPI.W      #$0111,D5
0000409C  6700 0E32               4395      BEQ         EAModeDirect
000040A0                          4396  
000040A0                          4397  *********************************************************************************
000040A0                          4398  * Method Name: compareEAModeMOVEA
000040A0                          4399  * Description: Checks for all possible MOVEA combinations for EA
000040A0                          4400  *********************************************************************************      
000040A0                          4401  compareEAModeMOVEA
000040A0  E14A                    4402      LSL.W       #08,D2
000040A2  2602                    4403      MOVE.L      D2,D3
000040A4  4EB8 1596               4404      JSR         getNext2Bytes
000040A8  D682                    4405      ADD.L       D2,D3
000040AA  E88B                    4406      LSR.L       #04,D3
000040AC                          4407      
000040AC  4EB8 1596               4408      JSR         getNext2Bytes
000040B0  4EB8 1596               4409      JSR         getNext2Bytes
000040B4                          4410      
000040B4  4EB8 3EC6               4411      JSR         EALoadBits
000040B8  4EB9 000040CE           4412      JSR         allEA
000040BE                          4413      
000040BE  45F9 00005420           4414      LEA         comma,A2
000040C4  4EB8 183E               4415      JSR         addBuffer
000040C8                          4416      
000040C8  2C03                    4417      MOVE.L      D3,D6
000040CA  6000 0D6C               4418      BRA         EAModeAddrReg
000040CE                          4419  *********************************************************************************
000040CE                          4420  * Method Name: allEA
000040CE                          4421  * Description: Checks for all possible EA modes
000040CE                          4422  *********************************************************************************     
000040CE                          4423  allEA
000040CE  0C45 0000               4424      CMPI.W      #$0000,D5              ; Mode bits are 000
000040D2  6700 0D10               4425      BEQ         EAModeDataReg
000040D6                          4426      
000040D6  0C45 0001               4427      CMPI.W      #$0001,D5
000040DA  6700 0D5C               4428      BEQ         EAModeAddrReg
000040DE                          4429      
000040DE  0C45 0010               4430      CMPI.W      #$0010,D5              ; Mode bits are 010
000040E2  6700 0DB2               4431      BEQ         EAModeARIndirect 
000040E6                          4432      
000040E6  0C45 0011               4433      CMPI.W      #$0011,D5              ; Mode bits are 011
000040EA  6700 0DC4               4434      BEQ         EAModeIncrement 
000040EE                          4435      
000040EE  0C45 0100               4436      CMPI.W      #$0100,D5              ; Mode bits are 101
000040F2  6700 0DCC               4437      BEQ         EAModeDecrement 
000040F6                          4438      
000040F6  0C45 0111               4439      CMPI.W      #$0111,D5              ; Mode bits are 111
000040FA  6700 0DE8               4440      BEQ         EAModeDirectOrImm
000040FE                          4441      
000040FE  6000 D500               4442      BRA         OPdata
00004102                          4443  *********************************************************************************
00004102                          4444  * Method Name: compareEAModeADDv1
00004102                          4445  * Description: Checks for all possible ADD combinations for EA where data reg is
00004102                          4446  * printed second
00004102                          4447  *********************************************************************************     
00004102                          4448  compareEAModeADDv1
00004102  2602                    4449      MOVE.L      D2,D3
00004104  E18B                    4450      LSL.L       #08,D3
00004106  4EB8 1596               4451      JSR         getNext2Bytes
0000410A  D682                    4452      ADD.L       D2,D3
0000410C  E88B                    4453      LSR.L       #04,D3
0000410E                          4454      
0000410E  4EB8 1596               4455      JSR         getNext2Bytes
00004112  4EB8 1596               4456      JSR         getNext2Bytes
00004116                          4457      
00004116  4EB8 3EC6               4458      JSR         EALoadBits
0000411A  4EB8 40CE               4459      JSR         allEA
0000411E                          4460      
0000411E  45F9 00005420           4461      LEA         comma,A2
00004124  4EB8 183E               4462      JSR         addBuffer
00004128                          4463      
00004128  2C03                    4464      MOVE.L      D3,D6
0000412A  6000 0CB8               4465      BRA         EAModeDataReg
0000412E                          4466  
0000412E                          4467  *********************************************************************************
0000412E                          4468  * Method Name: compareEAModeADDv2
0000412E                          4469  * Description: Checks for all possible ADD combinations for EA where data reg is
0000412E                          4470  * printed first
0000412E                          4471  *********************************************************************************     
0000412E                          4472  compareEAModeADDv2
0000412E  2602                    4473      MOVE.L      D2,D3
00004130  E18B                    4474      LSL.L       #08,D3
00004132  4EB8 1596               4475      JSR         getNext2Bytes
00004136  D682                    4476      ADD.L       D2,D3
00004138  E88B                    4477      LSR.L       #04,D3
0000413A                          4478  
0000413A  2C03                    4479      MOVE.L      D3,D6
0000413C  4EB9 00004DE4           4480      JSR         EAModeDataReg
00004142                          4481  
00004142  45F9 00005420           4482      LEA         comma,A2
00004148  4EB8 183E               4483      JSR         addBuffer
0000414C                          4484  
0000414C  4EB8 1596               4485      JSR         getNext2Bytes
00004150  4EB8 1596               4486      JSR         getNext2Bytes
00004154                          4487  
00004154  4EB8 3EC6               4488      JSR         EALoadBits  
00004158  0C45 0010               4489      CMPI.W      #$0010,D5              ; Mode bits are 010
0000415C  6700 0D38               4490      BEQ         EAModeARIndirect 
00004160                          4491      
00004160  0C45 0011               4492      CMPI.W      #$0011,D5              ; Mode bits are 011
00004164  6700 0D4A               4493      BEQ         EAModeIncrement 
00004168                          4494      
00004168  0C45 0100               4495      CMPI.W      #$0100,D5              ; Mode bits are 101
0000416C  6700 0D52               4496      BEQ         EAModeDecrement 
00004170                          4497      
00004170  0C45 0111               4498      CMPI.W      #$0111,D5              ; Mode bits are 111
00004174  6700 0D5A               4499      BEQ         EAModeDirect  
00004178                          4500  *********************************************************************************
00004178                          4501  * Method Name: compareEAModeLEA
00004178                          4502  * Description: Checks for all possible LEA combinations for EA
00004178                          4503  ********************************************************************************* 
00004178                          4504  compareEAModeLEA
00004178  4EB8 1596               4505      JSR     getNext2Bytes
0000417C  2C02                    4506      MOVE.L  D2,D6
0000417E  E14E                    4507      LSL.W   #08,D6
00004180  4EB8 1596               4508      JSR     getNext2Bytes
00004184  DC82                    4509      ADD.L   D2,D6
00004186  E84E                    4510      LSR.W   #04,D6
00004188  2206                    4511      MOVE.L  D6,D1
0000418A                          4512      
0000418A  4EB8 1596               4513      JSR     getNext2Bytes
0000418E  4EB8 1596               4514      JSR     getNext2Bytes
00004192                          4515      
00004192  4EB8 3EC6               4516      JSR EALoadBits
00004196  4EB9 000041AC           4517      JSR     LEAmethod
0000419C                          4518      
0000419C  2C01                    4519      MOVE.L  D1,D6
0000419E                          4520      
0000419E  45F9 00005420           4521      LEA comma,A2
000041A4  4EB8 183E               4522      JSR addBuffer
000041A8  6000 0C8E               4523      BRA EAModeAddrReg
000041AC                          4524  LEAmethod
000041AC  0C45 0010               4525      CMPI.W      #$0010,D5
000041B0  6700 0CE4               4526      BEQ         EAModeARIndirect
000041B4                          4527      
000041B4  0C45 0111               4528      CMPI.W      #$0111,D5
000041B8  6700 0D16               4529      BEQ         EAModeDirect
000041BC                          4530      
000041BC  6000 D442               4531      BRA         OPdata
000041C0                          4532  *********************************************************************************
000041C0                          4533  * Method Name: compareEAModeADDA
000041C0                          4534  * Description: Checks for all possible ADDA combinations for EA
000041C0                          4535  ********************************************************************************* 
000041C0                          4536  compareEAModeADDA
000041C0  2602                    4537      MOVE.L      D2,D3
000041C2  E18B                    4538      LSL.L       #08,D3
000041C4  4EB8 1596               4539      JSR         getNext2Bytes
000041C8  D682                    4540      ADD.L       D2,D3
000041CA  E88B                    4541      LSR.L       #04,D3
000041CC                          4542      
000041CC  4EB8 1596               4543      JSR         getNext2Bytes
000041D0  4EB8 1596               4544      JSR         getNext2Bytes
000041D4                          4545      
000041D4  4EB8 3EC6               4546      JSR         EALoadBits
000041D8  4EB8 40CE               4547      JSR         allEA
000041DC                          4548      
000041DC  45F9 00005420           4549      LEA         comma,A2
000041E2  4EB8 183E               4550      JSR         addBuffer
000041E6                          4551      
000041E6  2C03                    4552      MOVE.L      D3,D6
000041E8  6000 0C4E               4553      BRA         EAModeAddrReg
000041EC                          4554  
000041EC                          4555  * Prints the <ea> for SUB
000041EC                          4556  * Supported Modes: All
000041EC                          4557  * Note: OPMODE bits determine the syntax    
000041EC                          4558  compareEAModeSUB
000041EC  4EB8 3EC6               4559      JSR         EALoadBits
000041F0                          4560      
000041F0  0C45 0000               4561      CMPI.W      #$0000,D5
000041F4  6700 0BEE               4562      BEQ         EAModeDataReg
000041F8                          4563      
000041F8  0C45 0001               4564      CMPI.W      #$0001,D5
000041FC  6700 0C3A               4565      BEQ         EAModeAddrReg
00004200                          4566      
00004200  0C45 0010               4567      CMPI.W      #$0010,D5
00004204  6700 0C90               4568      BEQ         EAModeARIndirect
00004208                          4569      
00004208  0C45 0011               4570      CMPI.W      #$0011,D5
0000420C  6700 0CA2               4571      BEQ         EAModeIncrement
00004210                          4572      
00004210  0C45 0100               4573      CMPI.W      #$0100,D5
00004214  6700 0CAA               4574      BEQ         EAModeDecrement
00004218                          4575      
00004218  0C45 0111               4576      CMPI.W      #$0111,D5
0000421C  6700 0CC6               4577      BEQ         EAModeDirectOrImm
00004220                          4578      
00004220  6000 D3DE               4579      BRA         OPdata
00004224                          4580      
00004224                          4581  * Prints the <ea> for OR
00004224                          4582  * Supported Modes: Dn, (An), (An)+, -(An), Direct, Immediate
00004224                          4583  compareEAModeOR
00004224  4EB8 3EC6               4584      JSR         EALoadBits
00004228                          4585      
00004228  0C45 0000               4586      CMPI.W      #$0000,D5
0000422C  6700 0BB6               4587      BEQ         EAModeDataReg
00004230                          4588      
00004230  0C45 0010               4589      CMPI.W      #$0010,D5
00004234  6700 0C60               4590      BEQ         EAModeARIndirect
00004238                          4591      
00004238  0C45 0011               4592      CMPI.W      #$0011,D5
0000423C  6700 0C72               4593      BEQ         EAModeIncrement
00004240                          4594      
00004240  0C45 0100               4595      CMPI.W      #$0100,D5
00004244  6700 0C7A               4596      BEQ         EAModeDecrement
00004248                          4597      
00004248  0C45 0111               4598      CMPI.W      #$0111,D5
0000424C  6700 0C96               4599      BEQ         EAModeDirectOrImm
00004250                          4600      
00004250  6000 D3AE               4601      BRA         OPdata
00004254                          4602      
00004254                          4603  * Prints the <ea> for EOR
00004254                          4604  * Supported Modes: Dn, (An), (An)+, -(An), Direct
00004254                          4605  compareEAModeEOR
00004254  4EB9 00004DE4           4606      JSR         EAModeDataReg
0000425A                          4607      
0000425A  45F9 00005420           4608      LEA         comma,A2
00004260  4EB8 183E               4609      JSR         addBuffer
00004264                          4610  
00004264  4EB8 3EC6               4611      JSR         EALoadBits
00004268                          4612      
00004268  0C45 0000               4613      CMPI.W      #$0000,D5
0000426C  6700 0B76               4614      BEQ         EAModeDataReg
00004270                          4615      
00004270  0C45 0010               4616      CMPI.W      #$0010,D5
00004274  6700 0C20               4617      BEQ         EAModeARIndirect
00004278                          4618      
00004278  0C45 0011               4619      CMPI.W      #$0011,D5
0000427C  6700 0C32               4620      BEQ         EAModeIncrement
00004280                          4621      
00004280  0C45 0100               4622      CMPI.W      #$0100,D5
00004284  6700 0C3A               4623      BEQ         EAModeDecrement
00004288                          4624      
00004288  0C45 0111               4625      CMPI.W      #$0111,D5
0000428C  6700 0C42               4626      BEQ         EAModeDirect
00004290                          4627      
00004290  6000 D36E               4628      BRA         OPdata
00004294                          4629  
00004294                          4630  * Prints the <ea> for CMP
00004294                          4631  * Supported Modes: All
00004294                          4632  compareEAModeCMP
00004294  4EB8 3EC6               4633      JSR         EALoadBits
00004298                          4634      
00004298  4EB8 40CE               4635      JSR         allEA
0000429C                          4636      
0000429C  45F9 00005420           4637      LEA         comma,A2
000042A2  4EB8 183E               4638      JSR         addBuffer
000042A6                          4639      
000042A6  2C03                    4640      MOVE.L      D3,D6
000042A8  6000 0B3A               4641      BRA         EAModeDataReg
000042AC                          4642      
000042AC  6000 D352               4643      BRA         OPdata
000042B0                          4644  
000042B0                          4645  *********************************************************************************
000042B0                          4646  * Method Name: compareEAModeBCLRDynamic
000042B0                          4647  * Description: Checks for all possible BCLR combinations when BCLR is dynamic
000042B0                          4648  ********************************************************************************* 
000042B0                          4649  compareEAModeBCLRDynamic
000042B0  4EB9 00004DE4           4650      JSR         EAModeDataReg
000042B6  45F9 00005420           4651      LEA         comma,A2
000042BC  4EB8 183E               4652      JSR         addBuffer
000042C0                          4653      
000042C0  4EB8 3EC6               4654      JSR         EALoadBits
000042C4                          4655  
000042C4  0C45 0000               4656      CMPI.W      #$0000,D5
000042C8  6700 0B1A               4657      BEQ         EAModeDataReg
000042CC                          4658      
000042CC  0C45 0001               4659      CMPI.W      #$0001,D5
000042D0  6700 0B66               4660      BEQ         EAModeAddrReg
000042D4                          4661      
000042D4  0C45 0010               4662      CMPI.W      #$0010,D5
000042D8  6700 0BBC               4663      BEQ         EAModeARIndirect
000042DC                          4664      
000042DC  0C45 0011               4665      CMPI.W      #$0011,D5
000042E0  6700 0BCE               4666      BEQ         EAModeIncrement
000042E4                          4667      
000042E4  0C45 0100               4668      CMPI.W      #$0100,D5
000042E8  6700 0BD6               4669      BEQ         EAModeDecrement
000042EC                          4670      
000042EC  0C45 0111               4671      CMPI.W      #$0111,D5
000042F0  6700 0BF2               4672      BEQ         EAModeDirectOrImm
000042F4                          4673      
000042F4  6000 D30A               4674      BRA         OPdata
000042F8                          4675  *********************************************************************************
000042F8                          4676  * Method Name: compareEAModeBCLRStatic
000042F8                          4677  * Description: Checks for all possible BCLR combinations when BCLR is static
000042F8                          4678  *********************************************************************************     
000042F8                          4679  compareEAModeBCLRStatic
000042F8  4EB8 3EC6               4680      JSR         EALoadBits
000042FC  2605                    4681      MOVE.L      D5,D3
000042FE  2806                    4682      MOVE.L      D6,D4
00004300                          4683      
00004300  7011                    4684      MOVE.L      #$00000011,D0
00004302  4EB9 00004FB2           4685      JSR         EAModeImmediate
00004308                          4686      
00004308  45F9 00005420           4687      LEA         comma,A2
0000430E  4EB8 183E               4688      JSR         addBuffer
00004312                          4689      
00004312  2A03                    4690      MOVE.L      D3,D5
00004314  2C04                    4691      MOVE.L      D4,D6
00004316                          4692      
00004316  0C45 0000               4693      CMPI.W      #$0000,D5
0000431A  6700 0AC8               4694      BEQ         EAModeDataReg
0000431E                          4695      
0000431E  0C45 0001               4696      CMPI.W      #$0001,D5
00004322  6700 0B14               4697      BEQ         EAModeAddrReg
00004326                          4698      
00004326  0C45 0010               4699      CMPI.W      #$0010,D5
0000432A  6700 0B6A               4700      BEQ         EAModeARIndirect
0000432E                          4701      
0000432E  0C45 0011               4702      CMPI.W      #$0011,D5
00004332  6700 0B7C               4703      BEQ         EAModeIncrement
00004336                          4704      
00004336  0C45 0100               4705      CMPI.W      #$0100,D5
0000433A  6700 0B84               4706      BEQ         EAModeDecrement
0000433E                          4707      
0000433E  0C45 0111               4708      CMPI.W      #$0111,D5
00004342  6700 0BA0               4709      BEQ         EAModeDirectOrImm
00004346                          4710  
00004346                          4711  * Prints the <ea> for NEG
00004346                          4712  * Supported Modes: Dn, (An), (An)+, -(An), Direct
00004346                          4713  compareEAModeNEG
00004346  4EB8 3EC6               4714      JSR         EALoadBits
0000434A                          4715      
0000434A  0C45 0000               4716      CMPI.W      #$0000,D5
0000434E  6700 0A94               4717      BEQ         EAModeDataReg
00004352                          4718      
00004352  0C45 0010               4719      CMPI.W      #$0010,D5
00004356  6700 0B3E               4720      BEQ         EAModeARIndirect
0000435A                          4721      
0000435A  0C45 0011               4722      CMPI.W      #$0011,D5
0000435E  6700 0B50               4723      BEQ         EAModeIncrement
00004362                          4724      
00004362  0C45 0100               4725      CMPI.W      #$0100,D5
00004366  6700 0B58               4726      BEQ         EAModeDecrement
0000436A                          4727      
0000436A  0C45 0111               4728      CMPI.W      #$0111,D5
0000436E  6700 0B60               4729      BEQ         EAModeDirect
00004372                          4730      
00004372  6000 D28C               4731      BRA         OPdata
00004376                          4732  
00004376                          4733  *********************************************************************************
00004376                          4734  * Method Name: compareEAModeMULS
00004376                          4735  * Description: Checks for all possible MULS combinations for EA
00004376                          4736  *********************************************************************************     
00004376                          4737  compareEAModeMULS
00004376  2602                    4738      MOVE.L      D2,D3
00004378  E14B                    4739      LSL.W       #08,D3
0000437A  4EB8 1596               4740      JSR         getNext2Bytes
0000437E  D682                    4741      ADD.L       D2,D3
00004380  E84B                    4742      LSR.W       #04,D3
00004382                          4743      
00004382  4EB8 1596               4744      JSR         getNext2Bytes
00004386  4EB8 1596               4745      JSR         getNext2Bytes
0000438A                          4746      
0000438A  4EB8 3EC6               4747      JSR         EALoadBits
0000438E                          4748      
0000438E  0C45 0001               4749      CMPI.W      #$0001,D5
00004392  6700 D26C               4750      BEQ         OPdata
00004396                          4751      
00004396  4EB8 40CE               4752      JSR         allEA
0000439A                          4753      
0000439A  45F9 00005420           4754      LEA         comma,A2
000043A0  4EB8 183E               4755      JSR         addBuffer
000043A4                          4756      
000043A4  2C03                    4757      MOVE.L      D3,D6
000043A6  6000 0A3C               4758      BRA         EAModeDataReg
000043AA                          4759  
000043AA                          4760  *********************************************************************************
000043AA                          4761  * Method Name: compareEAModeDIVS
000043AA                          4762  * Description: Checks for all possible DIVS combinations for EA
000043AA                          4763  *********************************************************************************     
000043AA                          4764  compareEAModeDIVS
000043AA  2602                    4765      MOVE.L      D2,D3
000043AC  E14B                    4766      LSL.W       #08,D3
000043AE  4EB8 1596               4767      JSR         getNext2Bytes
000043B2  D682                    4768      ADD.L       D2,D3
000043B4  E84B                    4769      LSR.W       #04,D3
000043B6                          4770      
000043B6  4EB8 1596               4771      JSR         getNext2Bytes
000043BA  4EB8 1596               4772      JSR         getNext2Bytes
000043BE                          4773      
000043BE  4EB8 3EC6               4774      JSR         EALoadBits
000043C2                          4775      
000043C2  0C45 0001               4776      CMPI.W      #$0001,D5
000043C6  6700 D238               4777      BEQ         OPdata
000043CA                          4778      
000043CA  4EB8 40CE               4779      JSR         allEA
000043CE                          4780      
000043CE  45F9 00005420           4781      LEA         comma,A2
000043D4  4EB8 183E               4782      JSR         addBuffer
000043D8                          4783      
000043D8  2C03                    4784      MOVE.L      D3,D6
000043DA  6000 0A08               4785      BRA         EAModeDataReg
000043DE                          4786  
000043DE                          4787  *********************************************************************************
000043DE                          4788  * Method Name: compareEAModeSUBQ
000043DE                          4789  * Description: Checks for all possible SUBQ combinations for EA
000043DE                          4790  *********************************************************************************     
000043DE                          4791  compareEAModeSUBQ
000043DE  4EB8 3EC6               4792      JSR         EALoadBits
000043E2                          4793      
000043E2  45F9 0000541D           4794      LEA         NumberSign,A2
000043E8  4EB8 183E               4795      JSR         addBuffer
000043EC  4EB9 00004400           4796      JSR         getImmediateValue
000043F2                          4797      
000043F2  45F9 00005420           4798      LEA         comma,A2
000043F8  4EB8 183E               4799      JSR         addBuffer
000043FC                          4800      
000043FC  6000 FCD0               4801      BRA         allEA
00004400                          4802  
00004400                          4803  *********************************************************************************
00004400                          4804  * Method Name: getImmediateValue
00004400                          4805  * Description: Writes a value to the string buffer based on the value in D3
00004400                          4806  ********************************************************************************* 
00004400                          4807  getImmediateValue
00004400  0C43 0000               4808      CMPI.W      #$0000,D3
00004404  6700 CF5A               4809      BEQ         write8
00004408                          4810      
00004408  0C43 0001               4811      CMPI.W      #$0001,D3
0000440C  6700 CEF0               4812      BEQ         write1
00004410                          4813      
00004410  0C43 0010               4814      CMPI.W      #$0010,D3
00004414  6700 CEF6               4815      BEQ         write2
00004418                          4816      
00004418  0C43 0011               4817      CMPI.W      #$0011,D3
0000441C  6700 CEFC               4818      BEQ         write3
00004420                          4819      
00004420  0C43 0100               4820      CMPI.W      #$0100,D3
00004424  6700 CF02               4821      BEQ         write4
00004428                          4822      
00004428  0C43 0101               4823      CMPI.W      #$0101,D3
0000442C  6700 CF08               4824      BEQ         write5
00004430                          4825      
00004430  0C43 0110               4826      CMPI.W      #$0110,D3
00004434  6700 CF0E               4827      BEQ         write6
00004438                          4828      
00004438  0C43 0111               4829      CMPI.W      #$0111,D3
0000443C  6700 CF14               4830      BEQ         write7
00004440                          4831  * Prints the <ea> for ORI
00004440                          4832  * Supported Modes: Dn, (An), (An)+, -(An), Direct
00004440                          4833  * Note: Syntax is ORI #<data>, <ea>, but EA bits come before the immediate bits
00004440                          4834  compareEAModeORI
00004440  280E                    4835      MOVE.L      A6,D4
00004442  260C                    4836      MOVE.L      A4,D3
00004444                          4837  
00004444  4EB8 3EC6               4838      JSR         EALoadBits
00004448                          4839      
00004448  4EB9 00004490           4840      JSR         OrigetNext
0000444E                          4841      
0000444E  5343                    4842      SUBI        #1,D3
00004450  2843                    4843      MOVE.L      D3,A4
00004452                          4844      
00004452  4EB8 1596               4845      JSR         getNext2Bytes
00004456  4EB8 3EC6               4846      JSR         EALoadBits
0000445A                          4847      
0000445A  45F9 00005420           4848      LEA         comma,A2
00004460  4EB8 183E               4849      JSR         addBuffer
00004464                          4850      
00004464  0C45 0000               4851      CMPI.W      #$0000,D5
00004468  6700 097A               4852      BEQ         EAModeDataReg
0000446C                          4853      
0000446C  0C45 0010               4854      CMPI.W      #$0010,D5
00004470  6700 0A24               4855      BEQ         EAModeARIndirect
00004474                          4856      
00004474  0C45 0011               4857      CMPI.W      #$0011,D5
00004478  6700 0A36               4858      BEQ         EAModeIncrement
0000447C                          4859      
0000447C  0C45 0100               4860      CMPI.W      #$0100,D5
00004480  6700 0A3E               4861      BEQ         EAModeDecrement
00004484                          4862      
00004484  0C45 0111               4863      CMPI.W      #$0111,D5
00004488  6700 0A46               4864      BEQ         EAModeDirect
0000448C                          4865      
0000448C  6000 D172               4866      BRA         OPdata
00004490                          4867  
00004490                          4868  *********************************************************************************
00004490                          4869  * Method Name: ORIget ---- ORI....
00004490                          4870  * Description: Checks for all possible ORI combinations for EA.
00004490                          4871  *********************************************************************************     
00004490                          4872  OrigetNext
00004490  0C40 0000               4873      CMPI        #$00,D0
00004494  6700 000A               4874      BEQ         Oriword
00004498                          4875      
00004498  0C40 0001               4876      CMPI        #$01,D0
0000449C  6700 000C               4877      BEQ         Orilong
000044A0                          4878  Oriword
000044A0  3A1E                    4879      MOVE.W      (A6)+,D5
000044A2  4EB9 000044B4           4880      JSR         OriprintLong
000044A8  4E75                    4881      RTS
000044AA                          4882  Orilong
000044AA  2A1E                    4883      MOVE.L      (A6)+,D5
000044AC  4EB9 000044B4           4884      JSR         OriprintLong
000044B2  4E75                    4885      RTS
000044B4                          4886      
000044B4                          4887  OriprintLong
000044B4                          4888      
000044B4  45F9 0000541E           4889      LEA         DollarSign,A2 ; Print $
000044BA  4EB8 183E               4890      JSR         addBuffer
000044BE                          4891      
000044BE  E99D                    4892      ROL.L       #4,D5
000044C0  1005                    4893      MOVE.B      D5,D0
000044C2  0200 000F               4894      ANDI.B      #$0F,D0
000044C6  4EB8 1270               4895      JSR         doEachHex
000044CA                          4896      
000044CA  E99D                    4897      ROL.L       #4,D5
000044CC  1005                    4898      MOVE.B      D5,D0
000044CE  0200 000F               4899      ANDI.B      #$0F,D0
000044D2  4EB8 1270               4900      JSR         doEachHex
000044D6                          4901      
000044D6  E99D                    4902      ROL.L       #4,D5
000044D8  1005                    4903      MOVE.B      D5,D0
000044DA  0200 000F               4904      ANDI.B      #$0F,D0
000044DE  4EB8 1270               4905      JSR         doEachHex
000044E2                          4906      
000044E2  E99D                    4907      ROL.L       #4,D5
000044E4  1005                    4908      MOVE.B      D5,D0
000044E6  0200 000F               4909      ANDI.B      #$0F,D0
000044EA  4EB8 1270               4910      JSR         doEachHex
000044EE                          4911      
000044EE  E99D                    4912      ROL.L       #4,D5
000044F0  1005                    4913      MOVE.B      D5,D0
000044F2  0200 000F               4914      ANDI.B      #$0F,D0
000044F6  4EB8 1270               4915      JSR         doEachHex
000044FA                          4916      
000044FA  E99D                    4917      ROL.L       #4,D5
000044FC  1005                    4918      MOVE.B      D5,D0
000044FE  0200 000F               4919      ANDI.B      #$0F,D0
00004502  4EB8 1270               4920      JSR         doEachHex
00004506                          4921      
00004506  E99D                    4922      ROL.L       #4,D5
00004508  1005                    4923      MOVE.B      D5,D0
0000450A  0200 000F               4924      ANDI.B      #$0F,D0
0000450E  4EB8 1270               4925      JSR         doEachHex
00004512                          4926      
00004512  E99D                    4927      ROL.L       #4,D5
00004514  1005                    4928      MOVE.B      D5,D0
00004516  0200 000F               4929      ANDI.B      #$0F,D0
0000451A  4EB8 1270               4930      JSR         doEachHex
0000451E                          4931      
0000451E  4E75                    4932      RTS
00004520                          4933  
00004520                          4934  *********************************************************************************
00004520                          4935  * Method Name: compareEAModeMOVEMreg
00004520                          4936  * Description: Checks for all possible MOVEM combinations for EA
00004520                          4937  *********************************************************************************     
00004520                          4938  compareEAModeMOVEMreg
00004520  4EB8 3EC6               4939      JSR         EALoadBits
00004524  4EB9 000047FA           4940      JSR         Movemword
0000452A                          4941      
0000452A  45F9 00005420           4942      LEA         comma,A2
00004530  4EB8 183E               4943      JSR         addBuffer
00004534                          4944      
00004534  0C45 0010               4945      CMPI.W      #$0010,D5
00004538  6700 095C               4946      BEQ         EAModeARIndirect
0000453C                          4947      
0000453C  0C45 0100               4948      CMPI.W      #$0100,D5
00004540  6700 097E               4949      BEQ         EAModeDecrement
00004544                          4950      
00004544  0C45 0111               4951      CMPI.W      #$0111,D5
00004548  6700 0986               4952      BEQ         EAModeDirect
0000454C                          4953  
0000454C                          4954  *********************************************************************************
0000454C                          4955  * Method Name: MOVEMmemhexcheck
0000454C                          4956  * Description: grabs 4 hex values and prints A0 - D7 based on whether they are 1 or not
0000454C                          4957  *********************************************************************************     
0000454C                          4958  MOVEMmemhexcheck
0000454C  E998                    4959      ROL.L       #4,D0
0000454E  E998                    4960      ROL.L       #4,D0
00004550  E998                    4961      ROL.L       #4,D0
00004552  E998                    4962      ROL.L       #4,D0
00004554                          4963      
00004554  E998                    4964      ROL.L       #4,D0
00004556  1600                    4965      MOVE.B      D0,D3
00004558  C63C 000F               4966      AND.B       #$0F,D3
0000455C  4EB9 0000480A           4967      JSR         hexToBinary
00004562                          4968      
00004562  E99C                    4969      ROL.L       #4,D4
00004564  E99C                    4970      ROL.L       #4,D4
00004566  E99C                    4971      ROL.L       #4,D4
00004568  E99C                    4972      ROL.L       #4,D4
0000456A                          4973      
0000456A  7200                    4974      MOVE.L      #$00000000,D1
0000456C                          4975      
0000456C  E99C                    4976      ROL.L       #4,D4
0000456E  2604                    4977      MOVE.L      D4,D3
00004570  C63C 0001               4978      AND.B       #$01,D3
00004574  4EB9 00004958           4979      JSR         checkA7
0000457A                          4980      
0000457A  E99C                    4981      ROL.L       #4,D4
0000457C  2604                    4982      MOVE.L      D4,D3
0000457E  C63C 0001               4983      AND.B       #$01,D3
00004582  4EB9 0000494E           4984      JSR         checkA6
00004588                          4985      
00004588  E99C                    4986      ROL.L       #4,D4
0000458A  2604                    4987      MOVE.L      D4,D3
0000458C  C63C 0001               4988      AND.B       #$01,D3
00004590  4EB9 00004944           4989      JSR         checkA5
00004596                          4990      
00004596  E99C                    4991      ROL.L       #4,D4
00004598  2604                    4992      MOVE.L      D4,D3
0000459A  C63C 0001               4993      AND.B       #$01,D3
0000459E  4EB9 0000493A           4994      JSR         checkA4
000045A4                          4995      
000045A4  E998                    4996      ROL.L       #4,D0
000045A6  1600                    4997      MOVE.B      D0,D3
000045A8  C63C 000F               4998      AND.B       #$0F,D3
000045AC  4EB9 0000480A           4999      JSR         hexToBinary
000045B2                          5000      
000045B2  E99C                    5001      ROL.L       #4,D4
000045B4  E99C                    5002      ROL.L       #4,D4
000045B6  E99C                    5003      ROL.L       #4,D4
000045B8  E99C                    5004      ROL.L       #4,D4
000045BA                          5005      
000045BA  E99C                    5006      ROL.L       #4,D4
000045BC  2604                    5007      MOVE.L      D4,D3
000045BE  C63C 0001               5008      AND.B       #$01,D3
000045C2  4EB9 00004930           5009      JSR         checkA3
000045C8                          5010      
000045C8  E99C                    5011      ROL.L       #4,D4
000045CA  2604                    5012      MOVE.L      D4,D3
000045CC  C63C 0001               5013      AND.B       #$01,D3
000045D0  4EB9 00004926           5014      JSR         checkA2
000045D6                          5015      
000045D6  E99C                    5016      ROL.L       #4,D4
000045D8  2604                    5017      MOVE.L      D4,D3
000045DA  C63C 0001               5018      AND.B       #$01,D3
000045DE  4EB9 0000491C           5019      JSR         checkA1
000045E4                          5020      
000045E4  E99C                    5021      ROL.L       #4,D4
000045E6  2604                    5022      MOVE.L      D4,D3
000045E8  C63C 0001               5023      AND.B       #$01,D3
000045EC  4EB9 00004912           5024      JSR         checkA0
000045F2                          5025      
000045F2  E998                    5026      ROL.L       #4,D0
000045F4  1600                    5027      MOVE.B      D0,D3
000045F6  C63C 000F               5028      AND.B       #$0F,D3
000045FA  4EB9 0000480A           5029      JSR         hexToBinary
00004600                          5030      
00004600  E99C                    5031      ROL.L       #4,D4
00004602  E99C                    5032      ROL.L       #4,D4
00004604  E99C                    5033      ROL.L       #4,D4
00004606  E99C                    5034      ROL.L       #4,D4
00004608                          5035      
00004608  E99C                    5036      ROL.L       #4,D4
0000460A  2604                    5037      MOVE.L      D4,D3
0000460C  C63C 0001               5038      AND.B       #$01,D3
00004610  4EB9 000049A8           5039      JSR         checkD7
00004616                          5040      
00004616  E99C                    5041      ROL.L       #4,D4
00004618  2604                    5042      MOVE.L      D4,D3
0000461A  C63C 0001               5043      AND.B       #$01,D3
0000461E  4EB9 0000499E           5044      JSR         checkD6
00004624                          5045  
00004624  E99C                    5046      ROL.L       #4,D4
00004626  2604                    5047      MOVE.L      D4,D3
00004628  C63C 0001               5048      AND.B       #$01,D3
0000462C  4EB9 00004994           5049      JSR         checkD5
00004632                          5050      
00004632  E99C                    5051      ROL.L       #4,D4
00004634  2604                    5052      MOVE.L      D4,D3
00004636  C63C 0001               5053      AND.B       #$01,D3
0000463A  4EB9 0000498A           5054      JSR         checkD4
00004640                          5055      
00004640  E998                    5056      ROL.L       #4,D0
00004642  1600                    5057      MOVE.B      D0,D3
00004644  C63C 000F               5058      AND.B       #$0F,D3
00004648  4EB9 0000480A           5059      JSR         hexToBinary
0000464E                          5060      
0000464E  E99C                    5061      ROL.L       #4,D4
00004650  E99C                    5062      ROL.L       #4,D4
00004652  E99C                    5063      ROL.L       #4,D4
00004654  E99C                    5064      ROL.L       #4,D4
00004656                          5065      
00004656  E99C                    5066      ROL.L       #4,D4
00004658  2604                    5067      MOVE.L      D4,D3
0000465A  C63C 0001               5068      AND.B       #$01,D3
0000465E  4EB9 00004980           5069      JSR         checkD3
00004664                          5070      
00004664  E99C                    5071      ROL.L       #4,D4
00004666  2604                    5072      MOVE.L      D4,D3
00004668  C63C 0001               5073      AND.B       #$01,D3
0000466C  4EB9 00004976           5074      JSR         checkD2
00004672                          5075  
00004672  E99C                    5076      ROL.L       #4,D4
00004674  2604                    5077      MOVE.L      D4,D3
00004676  C63C 0001               5078      AND.B       #$01,D3
0000467A  4EB9 0000496C           5079      JSR         checkD1
00004680                          5080      
00004680  E99C                    5081      ROL.L       #4,D4
00004682  2604                    5082      MOVE.L      D4,D3
00004684  C63C 0001               5083      AND.B       #$01,D3
00004688  4EB9 00004962           5084      JSR         checkD0
0000468E                          5085      
0000468E  4E75                    5086      RTS
00004690                          5087  
00004690                          5088  *********************************************************************************
00004690                          5089  * Method Name: compareEAModeMOVEMmem
00004690                          5090  * Description: Checks for all possible MOVEM combinations for EA
00004690                          5091  ********************************************************************************* 
00004690                          5092  compareEAModeMOVEMmem
00004690  4EB8 3EC6               5093      JSR         EALoadBits
00004694  4EB9 000047C8           5094      JSR         MOVEMmemcheck
0000469A                          5095      
0000469A  4E75                    5096      RTS
0000469C                          5097  *********************************************************************************
0000469C                          5098  * Method Name: MOVEMreghexcheck
0000469C                          5099  * Description: Grabs 4 hex values and prints A0 - D7 based on if they are 1 or not
0000469C                          5100  *********************************************************************************     
0000469C                          5101  MOVEMreghexcheck
0000469C  E998                    5102      ROL.L       #4,D0
0000469E  E998                    5103      ROL.L       #4,D0
000046A0  E998                    5104      ROL.L       #4,D0
000046A2  E998                    5105      ROL.L       #4,D0
000046A4                          5106      
000046A4  E998                    5107      ROL.L       #4,D0
000046A6  1600                    5108      MOVE.B      D0,D3
000046A8  C63C 000F               5109      AND.B       #$0F,D3
000046AC  4EB9 0000480A           5110      JSR         hexToBinary
000046B2                          5111      
000046B2  E99C                    5112      ROL.L       #4,D4
000046B4  E99C                    5113      ROL.L       #4,D4
000046B6  E99C                    5114      ROL.L       #4,D4
000046B8  E99C                    5115      ROL.L       #4,D4
000046BA                          5116      
000046BA  7200                    5117      MOVE.L      #$00000000,D1
000046BC                          5118      
000046BC  E99C                    5119      ROL.L       #4,D4
000046BE  2604                    5120      MOVE.L      D4,D3
000046C0  C63C 0001               5121      AND.B       #$01,D3
000046C4  4EB9 00004962           5122      JSR         checkD0
000046CA                          5123      
000046CA  E99C                    5124      ROL.L       #4,D4
000046CC  2604                    5125      MOVE.L      D4,D3
000046CE  C63C 0001               5126      AND.B       #$01,D3
000046D2  4EB9 0000496C           5127      JSR         checkD1
000046D8                          5128      
000046D8  E99C                    5129      ROL.L       #4,D4
000046DA  2604                    5130      MOVE.L      D4,D3
000046DC  C63C 0001               5131      AND.B       #$01,D3
000046E0  4EB9 00004976           5132      JSR         checkD2
000046E6                          5133      
000046E6  E99C                    5134      ROL.L       #4,D4
000046E8  2604                    5135      MOVE.L      D4,D3
000046EA  C63C 0001               5136      AND.B       #$01,D3
000046EE  4EB9 00004980           5137      JSR         checkD3
000046F4                          5138      
000046F4  E998                    5139      ROL.L       #4,D0
000046F6  1600                    5140      MOVE.B      D0,D3
000046F8  C63C 000F               5141      AND.B       #$0F,D3
000046FC  4EB9 0000480A           5142      JSR         hexToBinary
00004702                          5143      
00004702  E99C                    5144      ROL.L       #4,D4
00004704  2604                    5145      MOVE.L      D4,D3
00004706  C63C 0001               5146      AND.B       #$01,D3
0000470A  4EB9 0000498A           5147      JSR         checkD4
00004710                          5148      
00004710  E99C                    5149      ROL.L       #4,D4
00004712  2604                    5150      MOVE.L      D4,D3
00004714  C63C 0001               5151      AND.B       #$01,D3
00004718  4EB9 00004994           5152      JSR         checkD5
0000471E                          5153      
0000471E  E99C                    5154      ROL.L       #4,D4
00004720  2604                    5155      MOVE.L      D4,D3
00004722  C63C 0001               5156      AND.B       #$01,D3
00004726  4EB9 0000499E           5157      JSR         checkD6
0000472C                          5158      
0000472C  E99C                    5159      ROL.L       #4,D4
0000472E  2604                    5160      MOVE.L      D4,D3
00004730  C63C 0001               5161      AND.B       #$01,D3
00004734  4EB9 000049A8           5162      JSR         checkD7
0000473A                          5163      
0000473A  E998                    5164      ROL.L       #4,D0
0000473C  1600                    5165      MOVE.B      D0,D3
0000473E  C63C 000F               5166      AND.B       #$0F,D3
00004742  4EB9 0000480A           5167      JSR         hexToBinary
00004748                          5168      
00004748  E99C                    5169      ROL.L       #4,D4
0000474A  2604                    5170      MOVE.L      D4,D3
0000474C  C63C 0001               5171      AND.B       #$01,D3
00004750  4EB9 00004912           5172      JSR         checkA0
00004756                          5173      
00004756  E99C                    5174      ROL.L       #4,D4
00004758  2604                    5175      MOVE.L      D4,D3
0000475A  C63C 0001               5176      AND.B       #$01,D3
0000475E  4EB9 0000491C           5177      JSR         checkA1
00004764                          5178  
00004764  E99C                    5179      ROL.L       #4,D4
00004766  2604                    5180      MOVE.L      D4,D3
00004768  C63C 0001               5181      AND.B       #$01,D3
0000476C  4EB9 00004926           5182      JSR         checkA2
00004772                          5183      
00004772  E99C                    5184      ROL.L       #4,D4
00004774  2604                    5185      MOVE.L      D4,D3
00004776  C63C 0001               5186      AND.B       #$01,D3
0000477A  4EB9 00004930           5187      JSR         checkA3
00004780                          5188      
00004780  E998                    5189      ROL.L       #4,D0
00004782  1600                    5190      MOVE.B      D0,D3
00004784  C63C 000F               5191      AND.B       #$0F,D3
00004788  4EB9 0000480A           5192      JSR         hexToBinary
0000478E                          5193      
0000478E  E99C                    5194      ROL.L       #4,D4
00004790  2604                    5195      MOVE.L      D4,D3
00004792  C63C 0001               5196      AND.B       #$01,D3
00004796  4EB9 0000493A           5197      JSR         checkA4
0000479C                          5198      
0000479C  E99C                    5199      ROL.L       #4,D4
0000479E  2604                    5200      MOVE.L      D4,D3
000047A0  C63C 0001               5201      AND.B       #$01,D3
000047A4  4EB9 00004944           5202      JSR         checkA5
000047AA                          5203  
000047AA  E99C                    5204      ROL.L       #4,D4
000047AC  2604                    5205      MOVE.L      D4,D3
000047AE  C63C 0001               5206      AND.B       #$01,D3
000047B2  4EB9 0000494E           5207      JSR         checkA6
000047B8                          5208      
000047B8  E99C                    5209      ROL.L       #4,D4
000047BA  2604                    5210      MOVE.L      D4,D3
000047BC  C63C 0001               5211      AND.B       #$01,D3
000047C0  4EB9 00004958           5212      JSR         checkA7
000047C6                          5213      
000047C6  4E75                    5214      RTS
000047C8                          5215  
000047C8                          5216      
000047C8                          5217  MOVEMmemcheck
000047C8  4EB9 000047E0           5218      JSR         movemmemEA
000047CE  45F9 00005420           5219      LEA         comma,A2
000047D4  4EB8 183E               5220      JSR         addBuffer
000047D8                          5221      
000047D8  4EB9 00004802           5222      JSR         Movemwordmem
000047DE  4E75                    5223      RTS
000047E0                          5224  
000047E0                          5225  movemmemEA
000047E0  0C45 0010               5226      CMPI.W      #$0010,D5
000047E4  6700 06B0               5227      BEQ         EAModeARIndirect
000047E8                          5228      
000047E8  0C45 0011               5229      CMPI.W      #$0011,D5
000047EC  6700 06C2               5230      BEQ         EAModeIncrement
000047F0                          5231      
000047F0  0C45 0111               5232      CMPI.W      #$0111,D5
000047F4  6700 06DA               5233      BEQ         EAModeDirect
000047F8                          5234      
000047F8  4E75                    5235      RTS
000047FA                          5236      
000047FA                          5237  Movemword
000047FA  301E                    5238      MOVE.W      (A6)+,D0
000047FC  4EB8 469C               5239      JSR         MOVEMreghexcheck
00004800  4E75                    5240      RTS 
00004802                          5241      
00004802                          5242  Movemwordmem
00004802  301E                    5243      MOVE.W      (A6)+,D0
00004804  4EB8 454C               5244      JSR         MOVEMmemhexcheck
00004808  4E75                    5245      RTS
0000480A                          5246      
0000480A                          5247  hexToBinary
0000480A  0C03 0000               5248      CMPI.B      #$00,D3
0000480E  6700 007A               5249      BEQ         Hex0
00004812                          5250      
00004812  0C03 0001               5251      CMPI.B      #$01,D3
00004816  6700 0076               5252      BEQ         Hex1
0000481A                          5253      
0000481A  0C03 0002               5254      CMPI.B      #$02,D3
0000481E  6700 0072               5255      BEQ         Hex2
00004822                          5256      
00004822  0C03 0003               5257      CMPI.B      #$03,D3
00004826  6700 006E               5258      BEQ         Hex3
0000482A                          5259      
0000482A  0C03 0004               5260      CMPI.B      #$04,D3
0000482E  6700 006A               5261      BEQ         Hex4
00004832                          5262      
00004832  0C03 0005               5263      CMPI.B      #$05,D3
00004836  6700 006A               5264      BEQ         Hex5
0000483A                          5265      
0000483A  0C03 0006               5266      CMPI.B      #$06,D3
0000483E  6700 006A               5267      BEQ         Hex6
00004842                          5268      
00004842  0C03 0007               5269      CMPI.B      #$07,D3
00004846  6700 006A               5270      BEQ         Hex7
0000484A                          5271      
0000484A  0C03 0008               5272      CMPI.B      #$08,D3
0000484E  6700 006A               5273      BEQ         Hex8
00004852                          5274      
00004852  0C03 0009               5275      CMPI.B      #$09,D3
00004856  6700 006A               5276      BEQ         Hex9
0000485A                          5277      
0000485A  0C03 000A               5278      CMPI.B      #$0A,D3
0000485E  6700 006A               5279      BEQ         HexA
00004862                          5280      
00004862  0C03 000B               5281      CMPI.B      #$0B,D3
00004866  6700 006A               5282      BEQ         HexB
0000486A                          5283      
0000486A  0C03 000C               5284      CMPI.B      #$0C,D3
0000486E  6700 006A               5285      BEQ         HexC
00004872                          5286      
00004872  0C03 000D               5287      CMPI.B      #$0D,D3
00004876  6700 006A               5288      BEQ         HexD
0000487A                          5289      
0000487A  0C03 000E               5290      CMPI.B      #$0E,D3
0000487E  6700 006A               5291      BEQ         HexE
00004882                          5292      
00004882  0C03 000F               5293      CMPI.B      #$0F,D3
00004886  6700 006A               5294      BEQ         HexF
0000488A                          5295      ****compare for all possible hex***
0000488A                          5296      
0000488A                          5297  Hex0
0000488A  7800                    5298      MOVE.L      #$00000000,D4
0000488C  4E75                    5299      RTS
0000488E                          5300  Hex1
0000488E  7801                    5301      MOVE.L      #$00000001,D4
00004890  4E75                    5302      RTS
00004892                          5303  Hex2
00004892  7810                    5304      MOVE.L      #$00000010,D4
00004894  4E75                    5305      RTS
00004896                          5306  Hex3
00004896  7811                    5307      MOVE.L      #$00000011,D4
00004898  4E75                    5308      RTS
0000489A                          5309  Hex4
0000489A  283C 00000100           5310      MOVE.L      #$00000100,D4
000048A0  4E75                    5311      RTS
000048A2                          5312  Hex5
000048A2  283C 00000101           5313      MOVE.L      #$00000101,D4
000048A8  4E75                    5314      RTS
000048AA                          5315  Hex6
000048AA  283C 00000110           5316      MOVE.L      #$00000110,D4
000048B0  4E75                    5317      RTS
000048B2                          5318  Hex7
000048B2  283C 00000111           5319      MOVE.L      #$00000111,D4
000048B8  4E75                    5320      RTS
000048BA                          5321  Hex8
000048BA  283C 00001000           5322      MOVE.L      #$00001000,D4
000048C0  4E75                    5323      RTS
000048C2                          5324  Hex9
000048C2  283C 00001001           5325      MOVE.L      #$00001001,D4
000048C8  4E75                    5326      RTS
000048CA                          5327  HexA
000048CA  283C 00001010           5328      MOVE.L      #$00001010,D4
000048D0  4E75                    5329      RTS
000048D2                          5330  HexB
000048D2  283C 00001011           5331      MOVE.L      #$00001011,D4
000048D8  4E75                    5332      RTS
000048DA                          5333  HexC
000048DA  283C 00001100           5334      MOVE.L      #$00001100,D4
000048E0  4E75                    5335      RTS
000048E2                          5336  HexD
000048E2  283C 00001101           5337      MOVE.L      #$00001101,D4
000048E8  4E75                    5338      RTS
000048EA                          5339  HexE
000048EA  283C 00001110           5340      MOVE.L      #$00001110,D4
000048F0  4E75                    5341      RTS
000048F2                          5342  HexF
000048F2  283C 00001111           5343      MOVE.L      #$00001111,D4
000048F8  4E75                    5344      RTS   
000048FA                          5345  
000048FA                          5346  checkSlash
000048FA  0C01 0001               5347      CMPI.B      #$01,D1
000048FE  6700 0004               5348      BEQ         writeSlash
00004902  4E75                    5349      RTS
00004904                          5350  writeSlash
00004904  45F9 00005422           5351      LEA         slash,A2
0000490A  7200                    5352      MOVE.L      #$00000000,D1
0000490C  4EB8 183E               5353      JSR         addBuffer
00004910  4E75                    5354      RTS
00004912                          5355  checkA0
00004912  0C03 0001               5356      CMPI.B        #$01,D3
00004916  6700 009A               5357      BEQ         movemA0
0000491A  4E75                    5358      RTS
0000491C                          5359  checkA1
0000491C  0C03 0001               5360      CMPI.B        #$01,D3
00004920  6700 00AC               5361      BEQ         movemA1
00004924  4E75                    5362      RTS
00004926                          5363  checkA2
00004926  0C03 0001               5364      CMPI.B        #$01,D3
0000492A  6700 00BE               5365      BEQ         movemA2   
0000492E  4E75                    5366      RTS 
00004930                          5367  checkA3
00004930  0C03 0001               5368      CMPI.B        #$01,D3
00004934  6700 00D0               5369      BEQ         movemA3
00004938  4E75                    5370      RTS
0000493A                          5371  checkA4
0000493A  0C03 0001               5372      CMPI.B        #$01,D3
0000493E  6700 00E2               5373      BEQ         movemA4
00004942  4E75                    5374      RTS
00004944                          5375  checkA5
00004944  0C03 0001               5376      CMPI.B        #$01,D3
00004948  6700 00F4               5377      BEQ         movemA5
0000494C  4E75                    5378      RTS
0000494E                          5379  checkA6
0000494E  0C03 0001               5380      CMPI.B        #$01,D3
00004952  6700 0106               5381      BEQ         movemA6
00004956  4E75                    5382      RTS
00004958                          5383  checkA7
00004958  0C03 0001               5384      CMPI.B        #$01,D3
0000495C  6700 0118               5385      BEQ         movemA7
00004960  4E75                    5386      RTS
00004962                          5387  checkD0
00004962  0C03 0001               5388      CMPI.B        #$01,D3
00004966  6700 012A               5389      BEQ         movemD0
0000496A  4E75                    5390      RTS
0000496C                          5391  checkD1
0000496C  0C03 0001               5392      CMPI.B        #$01,D3
00004970  6700 013C               5393      BEQ         movemD1
00004974  4E75                    5394      RTS
00004976                          5395  checkD2
00004976  0C03 0001               5396      CMPI.B        #$01,D3
0000497A  6700 014E               5397      BEQ         movemD2
0000497E  4E75                    5398      RTS
00004980                          5399  checkD3
00004980  0C03 0001               5400      CMPI.B        #$01,D3
00004984  6700 0160               5401      BEQ         movemD3
00004988  4E75                    5402      RTS
0000498A                          5403  checkD4
0000498A  0C03 0001               5404      CMPI.B        #$01,D3
0000498E  6700 0172               5405      BEQ         movemD4
00004992  4E75                    5406      RTS
00004994                          5407  checkD5
00004994  0C03 0001               5408      CMPI.B        #$01,D3
00004998  6700 0184               5409      BEQ         movemD5
0000499C  4E75                    5410      RTS
0000499E                          5411  checkD6
0000499E  0C03 0001               5412      CMPI.B        #$01,D3
000049A2  6700 0196               5413      BEQ         movemD6
000049A6  4E75                    5414      RTS
000049A8                          5415  checkD7
000049A8  0C03 0001               5416      CMPI.B        #$01,D3
000049AC  6700 01A8               5417      BEQ         movemD7
000049B0  4E75                    5418      RTS
000049B2                          5419  movemA0
000049B2  4EB8 48FA               5420      JSR         checkSlash
000049B6  45F9 000053F5           5421      LEA         LetterA,A2
000049BC  4EB8 183E               5422      JSR         addBuffer
000049C0  45F9 0000540F           5423      LEA         Number0,A2
000049C6  7201                    5424      MOVE.L      #$00000001,D1
000049C8  4EB8 183E               5425      JSR         addBuffer
000049CC  4E75                    5426      RTS
000049CE                          5427  movemA1
000049CE  4EB8 48FA               5428      JSR         checkSlash
000049D2  45F9 000053F5           5429      LEA         LetterA,A2
000049D8  4EB8 183E               5430      JSR         addBuffer
000049DC  45F9 00005410           5431      LEA         Number1,A2
000049E2  7201                    5432      MOVE.L      #$00000001,D1
000049E4  4EB8 183E               5433      JSR         addBuffer
000049E8  4E75                    5434      RTS
000049EA                          5435  movemA2
000049EA  4EB8 48FA               5436      JSR         checkSlash
000049EE  45F9 000053F5           5437      LEA         LetterA,A2
000049F4  4EB8 183E               5438      JSR         addBuffer
000049F8  45F9 00005411           5439      LEA         Number2,A2
000049FE  7201                    5440      MOVE.L      #$00000001,D1
00004A00  4EB8 183E               5441      JSR         addBuffer
00004A04  4E75                    5442      RTS
00004A06                          5443  movemA3
00004A06  4EB8 48FA               5444      JSR         checkSlash
00004A0A  45F9 000053F5           5445      LEA         LetterA,A2
00004A10  4EB8 183E               5446      JSR         addBuffer
00004A14  45F9 00005412           5447      LEA         Number3,A2
00004A1A  7201                    5448      MOVE.L      #$00000001,D1
00004A1C  4EB8 183E               5449      JSR         addBuffer
00004A20  4E75                    5450      RTS
00004A22                          5451  movemA4
00004A22  4EB8 48FA               5452      JSR         checkSlash
00004A26  45F9 000053F5           5453      LEA         LetterA,A2
00004A2C  4EB8 183E               5454      JSR         addBuffer
00004A30  45F9 00005413           5455      LEA         Number4,A2
00004A36  7201                    5456      MOVE.L      #$00000001,D1
00004A38  4EB8 183E               5457      JSR         addBuffer
00004A3C  4E75                    5458      RTS
00004A3E                          5459  movemA5
00004A3E  4EB8 48FA               5460      JSR         checkSlash
00004A42  45F9 000053F5           5461      LEA         LetterA,A2
00004A48  4EB8 183E               5462      JSR         addBuffer
00004A4C  45F9 00005414           5463      LEA         Number5,A2
00004A52  7201                    5464      MOVE.L      #$00000001,D1
00004A54  4EB8 183E               5465      JSR         addBuffer
00004A58  4E75                    5466      RTS
00004A5A                          5467  movemA6
00004A5A  4EB8 48FA               5468      JSR         checkSlash
00004A5E  45F9 000053F5           5469      LEA         LetterA,A2
00004A64  4EB8 183E               5470      JSR         addBuffer
00004A68  45F9 00005415           5471      LEA         Number6,A2
00004A6E  7201                    5472      MOVE.L      #$00000001,D1
00004A70  4EB8 183E               5473      JSR         addBuffer
00004A74  4E75                    5474      RTS
00004A76                          5475  movemA7
00004A76  4EB8 48FA               5476      JSR         checkSlash
00004A7A  45F9 000053F5           5477      LEA         LetterA,A2
00004A80  4EB8 183E               5478      JSR         addBuffer
00004A84  45F9 00005416           5479      LEA         Number7,A2
00004A8A  7201                    5480      MOVE.L      #$00000001,D1
00004A8C  4EB8 183E               5481      JSR         addBuffer
00004A90  4E75                    5482      RTS
00004A92                          5483  movemD0
00004A92  4EB8 48FA               5484      JSR         checkSlash
00004A96  45F9 000053F8           5485      LEA         LetterD,A2
00004A9C  4EB8 183E               5486      JSR         addBuffer
00004AA0  45F9 0000540F           5487      LEA         Number0,A2
00004AA6  7201                    5488      MOVE.L      #$00000001,D1
00004AA8  4EB8 183E               5489      JSR         addBuffer
00004AAC  4E75                    5490      RTS
00004AAE                          5491  movemD1
00004AAE  4EB8 48FA               5492      JSR         checkSlash
00004AB2  45F9 000053F8           5493      LEA         LetterD,A2
00004AB8  4EB8 183E               5494      JSR         addBuffer
00004ABC  45F9 00005410           5495      LEA         Number1,A2
00004AC2  7201                    5496      MOVE.L      #$00000001,D1
00004AC4  4EB8 183E               5497      JSR         addBuffer
00004AC8  4E75                    5498      RTS
00004ACA                          5499  movemD2
00004ACA  4EB8 48FA               5500      JSR         checkSlash
00004ACE  45F9 000053F8           5501      LEA         LetterD,A2
00004AD4  4EB8 183E               5502      JSR         addBuffer
00004AD8  45F9 00005411           5503      LEA         Number2,A2
00004ADE  7201                    5504      MOVE.L      #$00000001,D1
00004AE0  4EB8 183E               5505      JSR         addBuffer
00004AE4  4E75                    5506      RTS
00004AE6                          5507  movemD3
00004AE6  4EB8 48FA               5508      JSR         checkSlash
00004AEA  45F9 000053F8           5509      LEA         LetterD,A2
00004AF0  4EB8 183E               5510      JSR         addBuffer
00004AF4  45F9 00005412           5511      LEA         Number3,A2
00004AFA  7201                    5512      MOVE.L      #$00000001,D1
00004AFC  4EB8 183E               5513      JSR         addBuffer
00004B00  4E75                    5514      RTS
00004B02                          5515  movemD4
00004B02  4EB8 48FA               5516      JSR         checkSlash
00004B06  45F9 000053F8           5517      LEA         LetterD,A2
00004B0C  4EB8 183E               5518      JSR         addBuffer
00004B10  45F9 00005413           5519      LEA         Number4,A2
00004B16  7201                    5520      MOVE.L      #$00000001,D1
00004B18  4EB8 183E               5521      JSR         addBuffer
00004B1C  4E75                    5522      RTS
00004B1E                          5523  movemD5
00004B1E  4EB8 48FA               5524      JSR         checkSlash
00004B22  45F9 000053F8           5525      LEA         LetterD,A2
00004B28  4EB8 183E               5526      JSR         addBuffer
00004B2C  45F9 00005414           5527      LEA         Number5,A2
00004B32  7201                    5528      MOVE.L      #$00000001,D1
00004B34  4EB8 183E               5529     JSR         addBuffer
00004B38  4E75                    5530      RTS
00004B3A                          5531  movemD6
00004B3A  4EB8 48FA               5532      JSR         checkSlash
00004B3E  45F9 000053F8           5533      LEA         LetterD,A2
00004B44  4EB8 183E               5534      JSR         addBuffer
00004B48  45F9 00005415           5535      LEA         Number6,A2
00004B4E  7201                    5536      MOVE.L      #$00000001,D1
00004B50  4EB8 183E               5537      JSR         addBuffer
00004B54  4E75                    5538      RTS
00004B56                          5539  movemD7
00004B56  4EB8 48FA               5540      JSR         checkSlash
00004B5A  45F9 000053F8           5541      LEA         LetterD,A2
00004B60  4EB8 183E               5542      JSR         addBuffer
00004B64  45F9 00005416           5543      LEA         Number7,A2
00004B6A  7201                    5544      MOVE.L      #$00000001,D1
00004B6C  4EB8 183E               5545      JSR         addBuffer
00004B70  4E75                    5546      RTS
00004B72                          5547  * Prints the <ea> for ASL and ASR
00004B72                          5548  * Only valid on ASd <ea> syntax
00004B72                          5549  * Supported Modes: (An), (An)+, -(An), Direct
00004B72                          5550  * Note: ASd has two other syntaxes
00004B72                          5551  *       ASd Dx,Dy and ASd #<data>,Dy
00004B72                          5552  *       which are dependent on the OPCode bits
00004B72                          5553  compareEAModeASd
00004B72  4EB8 3EC6               5554      JSR         EALoadBits
00004B76                          5555  
00004B76  0C45 0010               5556      CMPI.W      #$0010,D5
00004B7A  6700 031A               5557      BEQ         EAModeARIndirect
00004B7E                          5558      
00004B7E  0C45 0011               5559      CMPI.W      #$0011,D5
00004B82  6700 032C               5560      BEQ         EAModeIncrement
00004B86                          5561      
00004B86  0C45 0100               5562      CMPI.W      #$0100,D5
00004B8A  6700 0334               5563      BEQ         EAModeDecrement
00004B8E                          5564      
00004B8E  0C45 0111               5565      CMPI.W      #$0111,D5
00004B92  6700 033C               5566      BEQ         EAModeDirect
00004B96                          5567      
00004B96  6000 CA68               5568      BRA         OPdata
00004B9A                          5569      
00004B9A                          5570      
00004B9A                          5571  * Loads D5 with the last 8 bits in the OPCode which
00004B9A                          5572  * represent displacement bits
00004B9A                          5573  * Used in BRA and Bcc operations
00004B9A                          5574  * Precondition: OPCode bits are valid
00004B9A                          5575  * Postcondition: D5 holds the 8 DISPLACEMENT bits  
00004B9A                          5576  EALoadDisplacementBits
00004B9A  4285                    5577      CLR.L       D5
00004B9C                          5578      
00004B9C  2A02                    5579      MOVE.L      D2,D5
00004B9E  E18D                    5580      LSL.L       #08,D5
00004BA0  4EB8 1596               5581      JSR         getNext2Bytes
00004BA4                          5582      
00004BA4  DA82                    5583      ADD.L       D2,D5
00004BA6  E18D                    5584      LSL.L       #08,D5
00004BA8  4EB8 1596               5585      JSR         getNext2Bytes
00004BAC                          5586      
00004BAC  DA82                    5587      ADD.L       D2,D5
00004BAE  E18D                    5588      LSL.L       #08,D5
00004BB0  4EB8 1596               5589      JSR         getNext2Bytes
00004BB4                          5590      
00004BB4  DA82                    5591      ADD.L       D2,D5
00004BB6                          5592      
00004BB6  4E75                    5593      RTS
00004BB8                          5594  
00004BB8                          5595  * Prints the <label> for Bcc and BRA
00004BB8                          5596  * Note: Displacement length is dependent on
00004BB8                          5597  *       the last 8 bits of the OPCode
00004BB8                          5598  *       8-bit: Two's compliment integer specifying # of bytes
00004BB8                          5599  *              between branch and next instruction
00004BB8                          5600  *       16-bit: 8 bits = $00. Displacement is next word
00004BB8                          5601  *       32-bit: 8 bits = $FF. Displacement is next long
00004BB8                          5602  compareLabelBcc
00004BB8  4EB8 4B9A               5603      JSR         EALoadDisplacementBits
00004BBC                          5604      
00004BBC  7000                    5605      MOVE.L      #$00000000,D0
00004BBE  200E                    5606      MOVE.L      A6, D0
00004BC0                          5607  
00004BC0  0C85 00000000           5608      CMPI.L      #$00000000,D5
00004BC6  6700 0010               5609      BEQ         BccNextWord ; print following word
00004BCA                          5610  
00004BCA  0C85 11111111           5611      CMPI.L      #$11111111,D5
00004BD0  6700 004C               5612      BEQ         BccNextLong ; print following long
00004BD4                          5613      
00004BD4  6000 00C0               5614      BRA         DisplacementByte ; convert D5 to hex values and print
00004BD8                          5615  
00004BD8                          5616  * Used for BCC and BRA.
00004BD8                          5617  * Adds instruction address location to the displacement
00004BD8                          5618  * and prints  (for word)   
00004BD8                          5619  BccNextWord
00004BD8  4EB8 15C0               5620      JSR         getNextWord
00004BDC                          5621      
00004BDC  DA80                    5622      ADD.L       D0,D5
00004BDE  7000                    5623      MOVE.L      #$00000000,D0
00004BE0  4240                    5624      CLR         D0
00004BE2                          5625      
00004BE2  45F9 0000541E           5626      LEA         DollarSign,A2 ; Print $
00004BE8  4EB8 183E               5627      JSR         addBuffer
00004BEC                          5628      
00004BEC  E95D                    5629      ROL.W       #4,D5
00004BEE  1005                    5630      MOVE.B      D5,D0
00004BF0  0200 000F               5631      ANDI.B      #$0F,D0
00004BF4  4EB8 1270               5632      JSR         doEachHex
00004BF8                          5633      
00004BF8  E95D                    5634      ROL.W       #4,D5
00004BFA  1005                    5635      MOVE.B      D5,D0
00004BFC  0200 000F               5636      ANDI.B      #$0F,D0
00004C00  4EB8 1270               5637      JSR         doEachHex
00004C04                          5638      
00004C04  E95D                    5639      ROL.W       #4,D5
00004C06  1005                    5640      MOVE.B      D5,D0
00004C08  0200 000F               5641      ANDI.B      #$0F,D0
00004C0C  4EB8 1270               5642      JSR         doEachHex
00004C10                          5643      
00004C10  E95D                    5644      ROL.W       #4,D5
00004C12  1005                    5645      MOVE.B      D5,D0
00004C14  0200 000F               5646      ANDI.B      #$0F,D0
00004C18  4EB8 1270               5647      JSR         doEachHex
00004C1C                          5648      
00004C1C  4E75                    5649      RTS
00004C1E                          5650  
00004C1E                          5651  * Used for BCC and BRA.
00004C1E                          5652  * Adds instruction address location to the displacement
00004C1E                          5653  * and prints  (for long)  
00004C1E                          5654  BccNextLong
00004C1E  4EB8 15D6               5655      JSR         getNextLong
00004C22                          5656      
00004C22  DA80                    5657      ADD.L       D0,D5
00004C24  7000                    5658      MOVE.L      #$00000000,D0
00004C26  4240                    5659      CLR         D0
00004C28                          5660      
00004C28  45F9 0000541E           5661      LEA         DollarSign,A2 ; Print $
00004C2E  4EB8 183E               5662      JSR         addBuffer
00004C32                          5663      
00004C32  4240                    5664      CLR         D0
00004C34                          5665      
00004C34  E99D                    5666      ROL.L       #4,D5
00004C36  1005                    5667      MOVE.B      D5,D0
00004C38  0200 000F               5668      ANDI.B      #$0F,D0
00004C3C  4EB8 1270               5669      JSR         doEachHex
00004C40                          5670      
00004C40  E99D                    5671      ROL.L       #4,D5
00004C42  1005                    5672      MOVE.B      D5,D0
00004C44  0200 000F               5673      ANDI.B      #$0F,D0
00004C48  4EB8 1270               5674      JSR         doEachHex
00004C4C                          5675      
00004C4C  E99D                    5676      ROL.L       #4,D5
00004C4E  1005                    5677      MOVE.B      D5,D0
00004C50  0200 000F               5678      ANDI.B      #$0F,D0
00004C54  4EB8 1270               5679      JSR         doEachHex
00004C58                          5680      
00004C58  E99D                    5681      ROL.L       #4,D5
00004C5A  1005                    5682      MOVE.B      D5,D0
00004C5C  0200 000F               5683      ANDI.B      #$0F,D0
00004C60  4EB8 1270               5684      JSR         doEachHex
00004C64                          5685      
00004C64  E99D                    5686      ROL.L       #4,D5
00004C66  1005                    5687      MOVE.B      D5,D0
00004C68  0200 000F               5688      ANDI.B      #$0F,D0
00004C6C  4EB8 1270               5689      JSR         doEachHex
00004C70                          5690      
00004C70  E99D                    5691      ROL.L       #4,D5
00004C72  1005                    5692      MOVE.B      D5,D0
00004C74  0200 000F               5693      ANDI.B      #$0F,D0
00004C78  4EB8 1270               5694      JSR         doEachHex
00004C7C                          5695      
00004C7C  E99D                    5696      ROL.L       #4,D5
00004C7E  1005                    5697      MOVE.B      D5,D0
00004C80  0200 000F               5698      ANDI.B      #$0F,D0
00004C84  4EB8 1270               5699      JSR         doEachHex
00004C88                          5700      
00004C88  E99D                    5701      ROL.L       #4,D5
00004C8A  1005                    5702      MOVE.B      D5,D0
00004C8C  0200 000F               5703      ANDI.B      #$0F,D0
00004C90  4EB8 1270               5704      JSR         doEachHex
00004C94                          5705      
00004C94  4E75                    5706      RTS
00004C96                          5707  
00004C96                          5708   
00004C96                          5709  
00004C96                          5710  * Prints out the address that BRA or BCC is going to
00004C96                          5711  * Grabs the address location of instruction, Adds it
00004C96                          5712  * To the 8 bit displacement of the instruction, subtracts
00004C96                          5713  * $0100 from it and prints it.
00004C96                          5714  DisplacementByte
00004C96  7200                    5715      MOVE.L      #$00000000,D1
00004C98  4241                    5716      CLR         D1
00004C9A  2200                    5717      MOVE.L      D0,D1
00004C9C  7000                    5718      MOVE.L      #$00000000,D0
00004C9E  4240                    5719      CLR         D0
00004CA0                          5720  
00004CA0  4845                    5721      SWAP        D5
00004CA2  4EB9 00004D00           5722      JSR         Print16BitsToHex
00004CA8                          5723      
00004CA8  E948                    5724      LSL.W       #04,D0
00004CAA                          5725      
00004CAA  4845                    5726      SWAP        D5
00004CAC  4EB9 00004D00           5727      JSR         Print16BitsToHex
00004CB2                          5728      
00004CB2  D280                    5729      ADD.L       D0, D1
00004CB4  0481 00000100           5730      SUB.L         #$0100,D1
00004CBA                          5731      
00004CBA  45F9 0000541E           5732      LEA         DollarSign,A2 ; Print $
00004CC0  4EB8 183E               5733      JSR         addBuffer
00004CC4                          5734      
00004CC4  2A01                    5735      MOVE.L      D1,D5
00004CC6                          5736      
00004CC6  E99D                    5737      ROL.L       #4,D5
00004CC8                          5738      
00004CC8  E99D                    5739      ROL.L       #4,D5
00004CCA                          5740      
00004CCA  E99D                    5741      ROL.L       #4,D5
00004CCC                          5742      
00004CCC  E99D                    5743      ROL.L       #4,D5
00004CCE                          5744      
00004CCE  E99D                    5745      ROL.L       #4,D5
00004CD0  1005                    5746      MOVE.B      D5,D0
00004CD2  0200 000F               5747      ANDI.B      #$0F,D0
00004CD6  4EB8 1270               5748      JSR         doEachHex
00004CDA                          5749      
00004CDA  E99D                    5750      ROL.L       #4,D5
00004CDC  1005                    5751      MOVE.B      D5,D0
00004CDE  0200 000F               5752      ANDI.B      #$0F,D0
00004CE2  4EB8 1270               5753      JSR         doEachHex
00004CE6                          5754      
00004CE6  E99D                    5755      ROL.L       #4,D5
00004CE8  1005                    5756      MOVE.B      D5,D0
00004CEA  0200 000F               5757      ANDI.B      #$0F,D0
00004CEE  4EB8 1270               5758      JSR         doEachHex
00004CF2                          5759      
00004CF2  E99D                    5760      ROL.L       #4,D5
00004CF4  1005                    5761      MOVE.B      D5,D0
00004CF6  0200 000F               5762      ANDI.B      #$0F,D0
00004CFA  4EB8 1270               5763      JSR         doEachHex
00004CFE                          5764      
00004CFE  4E75                    5765      RTS
00004D00                          5766  
00004D00                          5767  * Helper function used to convert the 32 LSB bits in D5
00004D00                          5768  * into a single hex value and print it.
00004D00                          5769  Print16BitsToHex
00004D00  0C45 0000               5770      CMPI.W  #$0000,D5
00004D04  6700 007E               5771      BEQ     bcc0
00004D08                          5772      
00004D08  0C45 0001               5773      CMPI.W  #$0001,D5
00004D0C  6700 007E               5774      BEQ     bcc1
00004D10                          5775      
00004D10  0C45 0010               5776      CMPI.W  #$0010,D5
00004D14  6700 007A               5777      BEQ     bcc2
00004D18                          5778      
00004D18  0C45 0011               5779      CMPI.W  #$0011,D5
00004D1C  6700 0076               5780      BEQ     bcc3
00004D20                          5781      
00004D20  0C45 0100               5782      CMPI.W  #$0100,D5
00004D24  6700 0072               5783      BEQ     bcc4
00004D28                          5784      
00004D28  0C45 0101               5785      CMPI.W  #$0101,D5
00004D2C  6700 006E               5786      BEQ     bcc5
00004D30                          5787      
00004D30  0C45 0110               5788      CMPI.W  #$0110,D5
00004D34  6700 006A               5789      BEQ     bcc6
00004D38                          5790      
00004D38  0C45 0111               5791      CMPI.W  #$0111,D5
00004D3C  6700 0066               5792      BEQ     bcc7
00004D40                          5793      
00004D40  0C45 1000               5794      CMPI.W  #$1000,D5
00004D44  6700 0062               5795      BEQ     bcc8
00004D48                          5796      
00004D48  0C45 1001               5797      CMPI.W  #$1001,D5
00004D4C  6700 005E               5798      BEQ     bcc9
00004D50                          5799      
00004D50  0C45 1010               5800      CMPI.W  #$1010,D5
00004D54  6700 005E               5801      BEQ     bccA
00004D58                          5802      
00004D58  0C45 1011               5803      CMPI.W  #$1011,D5
00004D5C  6700 005E               5804      BEQ     bccB
00004D60                          5805      
00004D60  0C45 1100               5806      CMPI.W  #$1100,D5
00004D64  6700 005E               5807      BEQ     bccC
00004D68                          5808      
00004D68  0C45 1101               5809      CMPI.W  #$1101,D5
00004D6C  6700 005E               5810      BEQ     bccD
00004D70                          5811      
00004D70  0C45 1110               5812      CMPI.W  #$1110,D5
00004D74  6700 005E               5813      BEQ     bccE
00004D78                          5814      
00004D78  0C45 1111               5815      CMPI.W  #$1111,D5
00004D7C  6700 005E               5816      BEQ     bccF
00004D80                          5817      
00004D80  6000 C87E               5818      BRA     OPdata
00004D84                          5819  
00004D84                          5820  bcc0
00004D84  0680 00000000           5821      ADD.L  #$00000000,D0
00004D8A  4E75                    5822      RTS  
00004D8C                          5823  bcc1
00004D8C  5280                    5824      ADD.L  #$00000001,D0
00004D8E  4E75                    5825      RTS 
00004D90                          5826  bcc2
00004D90  5480                    5827      ADD.L  #$00000002,D0
00004D92  4E75                    5828      RTS 
00004D94                          5829  bcc3
00004D94  5680                    5830      ADD.L  #$00000003,D0
00004D96  4E75                    5831      RTS 
00004D98                          5832  bcc4
00004D98  5880                    5833      ADD.L  #$00000004,D0
00004D9A  4E75                    5834      RTS 
00004D9C                          5835  bcc5
00004D9C  5A80                    5836      ADD.L  #$00000005,D0
00004D9E  4E75                    5837      RTS 
00004DA0                          5838  bcc6
00004DA0  5C80                    5839      ADD.L  #$00000006,D0
00004DA2  4E75                    5840      RTS 
00004DA4                          5841  bcc7
00004DA4  5E80                    5842      ADD.L  #$00000007,D0
00004DA6  4E75                    5843      RTS 
00004DA8                          5844  bcc8
00004DA8  5080                    5845      ADD.L  #$00000008,D0
00004DAA  4E75                    5846      RTS 
00004DAC                          5847  bcc9
00004DAC  0680 00000009           5848      ADD.L  #$00000009,D0
00004DB2  4E75                    5849      RTS 
00004DB4                          5850  bccA
00004DB4  0680 0000000A           5851      ADD.L  #$0000000A,D0
00004DBA  4E75                    5852      RTS 
00004DBC                          5853  bccB
00004DBC  0680 0000000B           5854      ADD.L  #$0000000B,D0
00004DC2  4E75                    5855      RTS 
00004DC4                          5856  bccC
00004DC4  0680 0000000C           5857      ADD.L  #$0000000C,D0
00004DCA  4E75                    5858      RTS 
00004DCC                          5859  bccD
00004DCC  0680 0000000D           5860      ADD.L  #$0000000D,D0
00004DD2  4E75                    5861      RTS 
00004DD4                          5862  bccE
00004DD4  0680 0000000E           5863      ADD.L  #$0000000E,D0
00004DDA  4E75                    5864      RTS 
00004DDC                          5865  bccF
00004DDC  0680 0000000F           5866      ADD.L  #$0000000F,D0
00004DE2  4E75                    5867      RTS     
00004DE4                          5868  * /$$$$$$$$  /$$$$$$        /$$      /$$                 /$$                    
00004DE4                          5869  *| $$_____/ /$$__  $$      | $$$    /$$$                | $$                    
00004DE4                          5870  *| $$      | $$  \ $$      | $$$$  /$$$$  /$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$$
00004DE4                          5871  *| $$$$$   | $$$$$$$$      | $$ $$/$$ $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$_____/
00004DE4                          5872  *| $$__/   | $$__  $$      | $$  $$$| $$| $$  \ $$| $$  | $$| $$$$$$$$|  $$$$$$ 
00004DE4                          5873  *| $$      | $$  | $$      | $$\  $ | $$| $$  | $$| $$  | $$| $$_____/ \____  $$
00004DE4                          5874  *| $$$$$$$$| $$  | $$      | $$ \/  | $$|  $$$$$$/|  $$$$$$$|  $$$$$$$ /$$$$$$$/
00004DE4                          5875  *|________/|__/  |__/      |__/     |__/ \______/  \_______/ \_______/|_______/                                                                                                                                                                        
00004DE4                          5876                                                                                                                     
00004DE4                          5877                                                                       
00004DE4                          5878  * Branch to these methods after analyzing the MODE bits in D5
00004DE4                          5879  * Precondition: D5 contains 000
00004DE4                          5880  EAModeDataReg
00004DE4  45F9 000053F8           5881      LEA         LetterD,A2      ; Print D
00004DEA  4EB8 183E               5882      JSR         addBuffer
00004DEE                          5883      
00004DEE  CCBC 00000111           5884      AND.L       #$00000111,D6
00004DF4                          5885      
00004DF4  0C46 0000               5886      CMPI.W      #$0000,D6       ; D0
00004DF8  6700 C4F6               5887      BEQ         write0
00004DFC                          5888      
00004DFC  0C46 0001               5889      CMPI.W      #$0001,D6       ; D1
00004E00  6700 C4FC               5890      BEQ         write1
00004E04                          5891      
00004E04  0C46 0010               5892      CMPI.W      #$0010,D6       ; D2
00004E08  6700 C502               5893      BEQ         write2
00004E0C                          5894      
00004E0C  0C46 0011               5895      CMPI.W      #$0011,D6       ; D3
00004E10  6700 C508               5896      BEQ         write3
00004E14                          5897      
00004E14  0C46 0100               5898      CMPI.W      #$0100,D6       ; D4
00004E18  6700 C50E               5899      BEQ         write4
00004E1C                          5900      
00004E1C  0C46 0101               5901      CMPI.W      #$0101,D6       ; D5
00004E20  6700 C514               5902      BEQ         write5
00004E24                          5903      
00004E24  0C46 0110               5904      CMPI.W      #$0110,D6       ; D6
00004E28  6700 C51A               5905      BEQ         write6
00004E2C                          5906      
00004E2C  0C46 0111               5907      CMPI.W      #$0111,D6       ; D7
00004E30  6700 C520               5908      BEQ         write7
00004E34                          5909      
00004E34                          5910      * Invalid Xn bits
00004E34  6000 C7CA               5911      BRA         OPdata
00004E38                          5912      
00004E38                          5913  * Precondition: D5 contains 001 and OPCode supports the MODE
00004E38                          5914  EAModeAddrReg
00004E38  45F9 000053F5           5915      LEA         LetterA,A2      ; Print A
00004E3E  4EB8 183E               5916      JSR         addBuffer
00004E42                          5917      
00004E42  CCBC 00000111           5918      AND.L       #$00000111,D6
00004E48                          5919      
00004E48  0C46 0000               5920      CMPI.W      #$0000,D6       ; A0
00004E4C  6700 C4A2               5921      BEQ         write0
00004E50                          5922      
00004E50  0C46 0001               5923      CMPI.W      #$0001,D6       ; A1
00004E54  6700 C4A8               5924      BEQ         write1
00004E58                          5925      
00004E58  0C46 0010               5926      CMPI.W      #$0010,D6       ; A2
00004E5C  6700 C4AE               5927      BEQ         write2
00004E60                          5928      
00004E60  0C46 0011               5929      CMPI.W      #$0011,D6       ; A3
00004E64  6700 C4B4               5930      BEQ         write3
00004E68                          5931      
00004E68  0C46 0100               5932      CMPI.W      #$0100,D6       ; A4
00004E6C  6700 C4BA               5933      BEQ         write4
00004E70                          5934      
00004E70  0C46 0101               5935      CMPI.W      #$0101,D6       ; A5
00004E74  6700 C4C0               5936      BEQ         write5
00004E78                          5937      
00004E78  0C46 0110               5938      CMPI.W      #$0110,D6       ; A6
00004E7C  6700 C4C6               5939      BEQ         write6
00004E80                          5940      
00004E80  0C46 0111               5941      CMPI.W      #$0111,D6       ; A7
00004E84  6700 C4CC               5942      BEQ         write7
00004E88                          5943      
00004E88                          5944      * Invalid Xn bits
00004E88  6000 C776               5945      BRA         OPdata
00004E8C                          5946  
00004E8C                          5947  * Helper function to print An only if
00004E8C                          5948  * size of operation is W or L
00004E8C                          5949  * Precondition: D0 contains the size bits #$01, #$11, or #$10
00004E8C                          5950  EAModeAddrRegWL
00004E8C                          5951                      ; Only branch if W or L, else OPData
00004E8C  0C40 0001               5952      CMPI.W      #$0001,D0       ; Check if byte
00004E90  6700 C76E               5953      BEQ         OPdata 
00004E94  60A2                    5954      BRA         EAModeAddrReg
00004E96                          5955      
00004E96                          5956  * AR Indirect accesses the data at an Address Register
00004E96                          5957  * Precondition: D5 contains 010 and OPCode supports the MODE 
00004E96                          5958  EAModeARIndirect
00004E96  45F9 00005419           5959      LEA         LeftParen,A2    ; Print (
00004E9C  4EB8 183E               5960      JSR         addBuffer
00004EA0                          5961     
00004EA0  4EB8 4E38               5962      JSR         EAModeAddrReg   ; Print An
00004EA4                          5963      
00004EA4  45F9 0000541A           5964      LEA         RightParen,A2   ; Print )
00004EAA  4EB8 183E               5965      JSR         addBuffer
00004EAE                          5966      
00004EAE  4E75                    5967      RTS
00004EB0                          5968  
00004EB0                          5969  * print a + for increment    
00004EB0                          5970  EAModeIncrement
00004EB0  4EB8 4E96               5971      JSR         EAModeARIndirect    ; Print (An)
00004EB4                          5972      
00004EB4  45F9 0000541B           5973      LEA         Plus,A2             ; Print +
00004EBA  4EB8 183E               5974      JSR         addBuffer
00004EBE  4E75                    5975      RTS
00004EC0                          5976  
00004EC0                          5977  * print a - for increment
00004EC0                          5978  EAModeDecrement
00004EC0  45F9 0000541C           5979      LEA         Minus,A2        ; Print -
00004EC6  4EB8 183E               5980      JSR         addBuffer
00004ECA                          5981      
00004ECA  4EB8 4E96               5982      JSR         EAModeARIndirect      ; Print (An)
00004ECE                          5983      
00004ECE  4E75                    5984      RTS
00004ED0                          5985  
00004ED0                          5986  * Precondition: D5 contains 111 and the function
00004ED0                          5987  * does not take immediates in EA portion
00004ED0                          5988  * D6 also contains the Xn bits
00004ED0                          5989  EAModeDirect
00004ED0  0C46 0000               5990      CMPI.W      #$0000,D6
00004ED4  6700 002A               5991      BEQ         EAModeDirectWord
00004ED8                          5992      
00004ED8  0C46 0001               5993      CMPI.W      #$0001,D6
00004EDC  6700 0062               5994      BEQ         EAModeDirectLong
00004EE0                          5995      
00004EE0  6000 C71E               5996      BRA         OPdata
00004EE4                          5997  
00004EE4                          5998  * Precondition: D5 contains 111 and the function
00004EE4                          5999  * can take a direct address W/L and immediate
00004EE4                          6000  * D6 also contains the Xn bits
00004EE4                          6001  EAModeDirectOrImm
00004EE4  0C46 0000               6002      CMPI.W      #$0000,D6
00004EE8  6700 0016               6003      BEQ         EAModeDirectWord
00004EEC                          6004      
00004EEC  0C46 0001               6005      CMPI.W      #$0001,D6
00004EF0  6700 004E               6006      BEQ         EAModeDirectLong
00004EF4                          6007  
00004EF4  0C46 0100               6008      CMPI.W      #$0100,D6
00004EF8  6700 00B8               6009      BEQ         EAModeImmediate
00004EFC                          6010      
00004EFC  6000 C702               6011      BRA         OPdata
00004F00                          6012  
00004F00                          6013  * Precondition: D5 contains 111 and D6 contains 000
00004F00                          6014  * Fetches and prints the word after the OPCode
00004F00                          6015  * Postcondition: D0 working directory is cleared
00004F00                          6016  *                D5 contains the word in hex
00004F00                          6017  * 
00004F00                          6018  EAModeDirectWord
00004F00  4EB8 15C0               6019      JSR         getNextWord
00004F04                          6020      
00004F04  45F9 0000541E           6021      LEA         DollarSign,A2 ; Print $
00004F0A  4EB8 183E               6022      JSR         addBuffer
00004F0E                          6023      
00004F0E  E95D                    6024      ROL.W       #4,D5
00004F10  1005                    6025      MOVE.B      D5,D0
00004F12  0200 000F               6026      ANDI.B      #$0F,D0
00004F16  4EB8 1270               6027      JSR         doEachHex
00004F1A                          6028      
00004F1A  E95D                    6029      ROL.W       #4,D5
00004F1C  1005                    6030      MOVE.B      D5,D0
00004F1E  0200 000F               6031      ANDI.B      #$0F,D0
00004F22  4EB8 1270               6032      JSR         doEachHex
00004F26                          6033      
00004F26  E95D                    6034      ROL.W       #4,D5
00004F28  1005                    6035      MOVE.B      D5,D0
00004F2A  0200 000F               6036      ANDI.B      #$0F,D0
00004F2E  4EB8 1270               6037      JSR         doEachHex
00004F32                          6038      
00004F32  E95D                    6039      ROL.W       #4,D5
00004F34  1005                    6040      MOVE.B      D5,D0
00004F36  0200 000F               6041      ANDI.B      #$0F,D0
00004F3A  4EB8 1270               6042      JSR         doEachHex
00004F3E                          6043      
00004F3E  4E75                    6044      RTS
00004F40                          6045      
00004F40                          6046  * Precondition: D5 contains 111 and D6 contains 001
00004F40                          6047  * Fetches and prints the long after the OPCode
00004F40                          6048  * Postcondition: D0 working directory is cleared
00004F40                          6049  *                D5 contains the word in hex
00004F40                          6050  EAModeDirectLong
00004F40  4EB8 15D6               6051      JSR         getNextLong
00004F44                          6052      
00004F44  45F9 0000541E           6053      LEA         DollarSign,A2 ; Print $
00004F4A  4EB8 183E               6054      JSR         addBuffer
00004F4E                          6055      
00004F4E  4240                    6056      CLR         D0
00004F50                          6057      
00004F50  E99D                    6058      ROL.L       #4,D5
00004F52  1005                    6059      MOVE.B      D5,D0
00004F54  0200 000F               6060      ANDI.B      #$0F,D0
00004F58  4EB8 1270               6061      JSR         doEachHex
00004F5C                          6062      
00004F5C  E99D                    6063      ROL.L       #4,D5
00004F5E  1005                    6064      MOVE.B      D5,D0
00004F60  0200 000F               6065      ANDI.B      #$0F,D0
00004F64  4EB8 1270               6066      JSR         doEachHex
00004F68                          6067      
00004F68  E99D                    6068      ROL.L       #4,D5
00004F6A  1005                    6069      MOVE.B      D5,D0
00004F6C  0200 000F               6070      ANDI.B      #$0F,D0
00004F70  4EB8 1270               6071      JSR         doEachHex
00004F74                          6072      
00004F74  E99D                    6073      ROL.L       #4,D5
00004F76  1005                    6074      MOVE.B      D5,D0
00004F78  0200 000F               6075      ANDI.B      #$0F,D0
00004F7C  4EB8 1270               6076      JSR         doEachHex
00004F80                          6077      
00004F80  E99D                    6078      ROL.L       #4,D5
00004F82  1005                    6079      MOVE.B      D5,D0
00004F84  0200 000F               6080      ANDI.B      #$0F,D0
00004F88  4EB8 1270               6081      JSR         doEachHex
00004F8C                          6082      
00004F8C  E99D                    6083      ROL.L       #4,D5
00004F8E  1005                    6084      MOVE.B      D5,D0
00004F90  0200 000F               6085      ANDI.B      #$0F,D0
00004F94  4EB8 1270               6086      JSR         doEachHex
00004F98                          6087      
00004F98  E99D                    6088      ROL.L       #4,D5
00004F9A  1005                    6089      MOVE.B      D5,D0
00004F9C  0200 000F               6090      ANDI.B      #$0F,D0
00004FA0  4EB8 1270               6091      JSR         doEachHex
00004FA4                          6092      
00004FA4  E99D                    6093      ROL.L       #4,D5
00004FA6  1005                    6094      MOVE.B      D5,D0
00004FA8  0200 000F               6095      ANDI.B      #$0F,D0
00004FAC  4EB8 1270               6096      JSR         doEachHex
00004FB0                          6097      
00004FB0  4E75                    6098      RTS
00004FB2                          6099      
00004FB2                          6100  * Outputs the immediate value addressing mode depending on
00004FB2                          6101  * the operations EA and size bits
00004FB2                          6102  * Precondition:  D5 contains 111 and D6 contains 100
00004FB2                          6103  *                Size #$01, #$11, or #$10 stored in D0
00004FB2                          6104  EAModeImmediate
00004FB2                          6105      ; Branch depending on size bits
00004FB2                          6106      
00004FB2  45F9 0000541D           6107      LEA         NumberSign,A2 ; Print #
00004FB8  4EB8 183E               6108      JSR         addBuffer     
00004FBC                          6109       
00004FBC  0C00 0001               6110      CMPI.B      #$01,D0
00004FC0  6700 0016               6111      BEQ         EAModeImmediateByte   
00004FC4                          6112      
00004FC4  0C00 0011               6113      CMPI.B      #$11,D0
00004FC8  6700 0036               6114      BEQ         EAModeImmediateWord
00004FCC                          6115      
00004FCC  0C00 0010               6116      CMPI.B      #$10,D0
00004FD0  6700 0034               6117      BEQ         EAModeImmediateLong
00004FD4                          6118      
00004FD4  6000 C62A               6119      BRA         OPdata  
00004FD8                          6120  
00004FD8                          6121  *********************************************************************************
00004FD8                          6122  * Method Name: EAModeImmediateByte
00004FD8                          6123  * Description: Prints out the next immediate byte in word form
00004FD8                          6124  *********************************************************************************     
00004FD8                          6125  EAModeImmediateByte
00004FD8  45F9 0000541E           6126      LEA         DollarSign,A2
00004FDE  4EB8 183E               6127      JSR         addBuffer
00004FE2                          6128  
00004FE2  4EB8 15C0               6129      JSR         getNextWord
00004FE6                          6130      
00004FE6  E81D                    6131      ROR.B       #4,D5
00004FE8  1005                    6132      MOVE.B      D5,D0
00004FEA  0200 000F               6133      ANDI.B      #$0F,D0
00004FEE  4EB8 1270               6134      JSR         doEachHex
00004FF2                          6135      
00004FF2  E91D                    6136      ROL.B       #4,D5
00004FF4  1005                    6137      MOVE.B      D5,D0
00004FF6  0200 000F               6138      ANDI.B      #$0F,D0
00004FFA  4EB8 1270               6139      JSR         doEachHex
00004FFE                          6140      
00004FFE  4E75                    6141      RTS
00005000                          6142  
00005000                          6143  *********************************************************************************
00005000                          6144  * Method Name: EAModeImmediateWord
00005000                          6145  * Description: Prints out the next immediate word in hex
00005000                          6146  *********************************************************************************   
00005000                          6147  EAModeImmediateWord   
00005000                          6148  
00005000  4EB8 4F00               6149      JSR         EAModeDirectWord
00005004                          6150      
00005004  4E75                    6151      RTS
00005006                          6152  
00005006                          6153  *********************************************************************************
00005006                          6154  * Method Name: EAModeImmediateLong
00005006                          6155  * Description: Prints out the next immediate long in hex
00005006                          6156  *********************************************************************************   
00005006                          6157  EAModeImmediateLong  
00005006                          6158  
00005006  4EB8 4F40               6159      JSR         EAModeDirectLong
0000500A                          6160      
0000500A  4E75                    6161      RTS
0000500C                          6162      
0000500C                          6163  *********************************************************************************
0000500C                          6164  * Method Name: TrapTask13
0000500C                          6165  * Description: Creates a file if none exists, and appends bytes to that file
0000500C                          6166  *   while also echoing the written bytes to the screen.  You shouldn't need to
0000500C                          6167  *   change this code.
0000500C                          6168  *
0000500C                          6169  * Calling Convention: Callee-Saved 
0000500C                          6170  *
0000500C                          6171  * Preconditions & Method Input:
0000500C                          6172  *   A1 points to the null-terminated buffer to write (newline will be added for you)
0000500C                          6173  *
0000500C                          6174  * Postconditions & Output:
0000500C                          6175  *   ALL files that were previously open will be CLOSED (FileIDs will be invalid)
0000500C                          6176  *   See 'Output.txt' in directory for the results, also piped to the console
0000500C                          6177  *
0000500C                          6178  *
0000500C                          6179  *  A2 holds a pointer to null terminated string to write (input)
0000500C                          6180  *  A3 points to the null-terminated file name
0000500C                          6181  *  D3 holds the number of bytes already in the file to write
0000500C                          6182  *
0000500C                          6183  *  D5 holds number of bytes to write
0000500C                          6184  ********************************************************************************
0000500C                          6185  toSave REG D0-D5/A2-A3
0000500C                          6186  TrapTask13:
0000500C                          6187  
0000500C                          6188      *******************************************************************
0000500C                          6189      * Method initialization, regsiter spilling, parameter saving, etc.
0000500C                          6190      *******************************************************************
0000500C  48E7 FC30               6191      MOVEM.L toSave, -(SP)   ;  Callee-Saved, so save and restore     
00005010                          6192        
00005010  2449                    6193      MOVEA.L A1, A2 ; save this buffer to write
00005012  47F9 000050AD           6194      LEA outFilename, A3  ; save this for later, too
00005018                          6195        
00005018  303C 0032               6196      move #50,d0   
0000501C  4E4F                    6197      trap #15 ; close all files, suggested to begin any IO 
0000501E                          6198      *******************************************************************
0000501E                          6199      * End Method Init
0000501E                          6200      *******************************************************************
0000501E                          6201  
0000501E                          6202      ******************************************************************************************
0000501E                          6203      * Calculate the number of bytes to write by searching for the null in the target buffer A0
0000501E                          6204      ******************************************************************************************
0000501E  4285                    6205      CLR.L D5 *D5 is now the number of bytes to write
00005020                          6206  nullLoop:
00005020  1019                    6207      MOVE.B (A1)+, D0
00005022  0C00 0000               6208      CMPI.B #0,D0  * compare to null
00005026  6700 0006               6209      BEQ findNullLoopDone
0000502A  5245                    6210      ADDI.W #1, D5
0000502C  60F2                    6211      BRA nullLoop
0000502E                          6212      
0000502E                          6213  findNullLoopDone:
0000502E  224B                    6214      MOVEA.L A3, A1 * reset A1 so it points to the file to write to (to open, next)
00005030                          6215      
00005030                          6216      ;check if file exists, and open with task 51 if so, otherwise 52
00005030                          6217      ;(precondition here is A1 points to the null-terminated filename )
00005030  103C 0033               6218      MOVE.B #51, D0      ;open file (task 51 is existing, 52 is new)
00005034  4E4F                    6219      trap #15
00005036                          6220        
00005036                          6221      if.w D0 <NE> #0 then.s         ; if file error (404, not found)
0000503C  103C 0034               6222          MOVE.B #52, D0             ; open new file (52 is new)
00005040  4E4F                    6223          trap #15
00005042                          6224      endi
00005042                          6225      
00005042                          6226      ********************************************************************************************************* 
00005042                          6227      * Seek to END of FILE by counting the number of bytes, closing, reopening, then seeking.
00005042                          6228      *    (first, count number of bytes already in the file to obtain seek position)
00005042                          6229      *********************************************************************************************************
00005042  4283                    6230      Clr.L D3   ;TODO: reg save, D3 is now our count of bytes read
00005044  7401                    6231      MOVE.L #1, D2 ; read one byte at a time
00005046  43F9 000050B8           6232      LEA byteRead, A1
0000504C                          6233      
0000504C                          6234  countLoop:
0000504C  103C 0035               6235      MOVE.B #53, D0 ; try to read one byte (TODO: move out of loop)
00005050  4E4F                    6236      trap #15
00005052                          6237      
00005052  0C40 0001               6238      CMPI.W #1,D0  ;1 == EOF
00005056  6700 0006               6239      BEQ countDone
0000505A  5243                    6240      ADDI #1, D3
0000505C  60EE                    6241      BRA countLoop
0000505E                          6242      
0000505E                          6243  countDone:    
0000505E                          6244      * close this file
0000505E  303C 0038               6245       move #56,d0  
00005062  4E4F                    6246       trap #15 
00005064                          6247       
00005064                          6248       * reopen the target file
00005064  224B                    6249       MOVE.L A3,A1
00005066  303C 0033               6250       MOVE #51, D0
0000506A  4E4F                    6251       trap #15
0000506C                          6252       
0000506C                          6253      * seek to right position, then continue with writing
0000506C  2403                    6254      MOVE.L D3, D2 ; move the number of bytes found in the file to D2
0000506E  303C 0037               6255      MOVE #55, D0  ; position file task
00005072  4E4F                    6256      trap #15
00005074                          6257  
00005074                          6258      ******************************************************************************
00005074                          6259      * Actually write the buffer to the file, after caculating the number of bytes 
00005074                          6260      *  to write and after seeking to the right location in the file for append
00005074                          6261      ******************************************************************************
00005074                          6262  
00005074  2405                    6263      MOVE.L D5, D2 ; restore this for the actually writing the buffer 
00005076                          6264      ; assumes A0 hasnt changed since handed to this method      
00005076  224A                    6265      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk
00005078                          6266      ; assumes file ID is still stored in D1.L  
00005078  103C 0036               6267      MOVE.B #54, D0 ; subtask 54 is write to open file (append, or?), assumes D2 holds # of bytes
0000507C  4E4F                    6268      trap #15
0000507E                          6269  
0000507E                          6270      ; add a newline to the file output
0000507E                          6271      
0000507E  43F9 000050A2           6272      LEA NEWLINE, A1
00005084  103C 0036               6273      MOVE.B #54, D0 
00005088  143C 0002               6274      MOVE.B #2,D2  ; kills # of bytes to write from input param
0000508C  4E4F                    6275      trap #15      
0000508E                          6276      
0000508E                          6277      ; finally, close only this file
0000508E  103C 0038               6278      MOVE.B #56, D0 ; close file task
00005092  4E4F                    6279      trap #15
00005094                          6280    
00005094                          6281      ; report to screen
00005094  224A                    6282      MOVEA.L A2, A1 ; load the address of the buffer we want to write to disk & screen
00005096  103C 000D               6283      MOVE.B #13, D0
0000509A  4E4F                    6284      trap #15
0000509C                          6285      
0000509C                          6286      ; restore context
0000509C  4CDF 0C3F               6287      MOVEM.L (SP)+, toSave
000050A0                          6288      
000050A0  4E75                    6289      RTS
000050A2                          6290      
000050A2                          6291  * Required variables and constants go here for your Disassembler
000050A2  =0000000D               6292  CR                  EQU $0D
000050A2  =0000000A               6293  LF                  EQU $0A
000050A2= 0D 0A 00                6294  NEWLINE             DC.B CR,LF,0  
000050A5= 44 41 54 41             6295  MSG1                DC.B 'DATA'
000050A9= 4E 4F 50 00             6296  MSG2                DC.B 'NOP',0
000050AD= 4F 75 74 70 75 74 ...   6297  outFilename         DC.B 'Output.txt',0
000050B8                          6298  byteRead            DS.B 1
000050B9= 43 6F 6E 66 69 67 ...   6299  config              DC.B 'Config.cfg',0
000050C4                          6300  fileID              DS.L 1
000050C8  =00000008               6301  AddressLength       EQU  8 
000050C8                          6302  startingAddress     DS.B AddressLength
000050D0                          6303  inbetweenAddress    DS.B 2
000050D2                          6304  endingAddress       DS.B AddressLength
000050DA                          6305  
000050DA= 43 6F 6E 66 69 67 ...   6306  MESSAGE1 DC.B    'Config.cfg contains an odd address',CR,LF,0
000050FF= 43 6F 6E 66 69 67 ...   6307  MESSAGE2 DC.B    'Config.cfg contains an out of range address',CR,LF,0
0000512D= 43 6F 6E 66 69 67 ...   6308  MESSAGE3 DC.B    'Config.cfg has a starting address larger than the ending',CR,LF,0
00005168= 43 6F 6E 66 69 67 ...   6309  MESSAGE4 DC.B    'Config.cfg was not found',CR,LF,0
00005183                          6310  
00005183= 20 44 30 00             6311  DATA0               DC.B ' D0',0
00005187= 20 44 31 00             6312  DATA1               DC.B ' D1',0
0000518B= 20 44 32 00             6313  DATA2               DC.B ' D2',0
0000518F= 20 44 33 00             6314  DATA3               DC.B ' D3',0
00005193= 20 44 34 00             6315  DATA4               DC.B ' D4',0
00005197= 20 44 35 00             6316  DATA5               DC.B ' D5',0
0000519B= 20 44 36 00             6317  DATA6               DC.B ' D6',0
0000519F= 20 44 37 00             6318  DATA7               DC.B ' D7',0
000051A3                          6319  
000051A3= 20 41 30 00             6320  ADDR0               DC.B ' A0',0
000051A7= 20 41 31 00             6321  ADDR1               DC.B ' A1',0
000051AB= 20 41 32 00             6322  ADDR2               DC.B ' A2',0
000051AF= 20 41 33 00             6323  ADDR3               DC.B ' A3',0
000051B3= 20 41 34 00             6324  ADDR4               DC.B ' A4',0
000051B7= 20 41 35 00             6325  ADDR5               DC.B ' A5',0
000051BB= 20 41 36 00             6326  ADDR6               DC.B ' A6',0
000051BF= 20 41 37 00             6327  ADDR7               DC.B ' A7',0
000051C3                          6328  
000051C3= 20 28 41 30 29 00       6329  ARI0                DC.B ' (A0)',0
000051C9= 20 28 41 31 29 00       6330  ARI1                DC.B ' (A1)',0
000051CF= 20 28 41 32 29 00       6331  ARI2                DC.B ' (A2)',0
000051D5= 20 28 41 33 29 00       6332  ARI3                DC.B ' (A3)',0
000051DB= 20 28 41 34 29 00       6333  ARI4                DC.B ' (A4)',0
000051E1= 20 28 41 35 29 00       6334  ARI5                DC.B ' (A5)',0
000051E7= 20 28 41 36 29 00       6335  ARI6                DC.B ' (A6)',0
000051ED= 20 28 41 37 29 00       6336  ARI7                DC.B ' (A7)',0
000051F3                          6337  
000051F3= 20 28 41 30 29 2B 00    6338  ARIncr0             DC.B ' (A0)+',0
000051FA= 20 28 41 31 29 2B 00    6339  ARIncr1             DC.B ' (A1)+',0
00005201= 20 28 41 32 29 2B 00    6340  ARIncr2             DC.B ' (A2)+',0
00005208= 20 28 41 33 29 2B 00    6341  ARIncr3             DC.B ' (A3)+',0
0000520F= 20 28 41 34 29 2B 00    6342  ARIncr4             DC.B ' (A4)+',0
00005216= 20 28 41 35 29 2B 00    6343  ARIncr5             DC.B ' (A5)+',0
0000521D= 20 28 41 36 29 2B 00    6344  ARIncr6             DC.B ' (A6)+',0
00005224= 20 28 41 37 29 2B 00    6345  ARIncr7             DC.B ' (A7)+',0
0000522B                          6346  
0000522B= 20 2D 28 41 30 29 00    6347  ARDecr0             DC.B ' -(A0)',0
00005232= 20 2D 28 41 31 29 00    6348  ARDecr1             DC.B ' -(A1)',0
00005239= 20 2D 28 41 32 29 00    6349  ARDecr2             DC.B ' -(A2)',0
00005240= 20 2D 28 41 33 29 00    6350  ARDecr3             DC.B ' -(A3)',0
00005247= 20 2D 28 41 34 29 00    6351  ARDecr4             DC.B ' -(A4)',0
0000524E= 20 2D 28 41 35 29 00    6352  ARDecr5             DC.B ' -(A5)',0
00005255= 20 2D 28 41 36 29 00    6353  ARDecr6             DC.B ' -(A6)',0
0000525C= 20 2D 28 41 37 29 00    6354  ARDecr7             DC.B ' -(A7)',0
00005263                          6355  
00005264                          6356  DataArray           DS.W 100
0000532C                          6357  Buffer         DS.W 100
000053F4= 00                      6358  null                DC.B 0
000053F5                          6359  
000053F5= 41                      6360  LetterA                   DC.B 'A'
000053F6= 42                      6361  LetterB                   DC.B 'B'
000053F7= 43                      6362  LetterC                   DC.B 'C'
000053F8= 44                      6363  LetterD                   DC.B 'D'
000053F9= 45                      6364  LetterE                   DC.B 'E'
000053FA= 46                      6365  LetterF                   DC.B 'F'
000053FB= 47                      6366  LetterG                   DC.B 'G'
000053FC= 48                      6367  LetterH                   DC.B 'H'
000053FD= 49                      6368  LetterI                   DC.B 'I'
000053FE= 4A                      6369  LetterJ                   DC.B 'J'
000053FF= 4B                      6370  LetterK                   DC.B 'K'
00005400= 4C                      6371  LetterL                   DC.B 'L'
00005401= 4D                      6372  LetterM                   DC.B 'M'
00005402= 4E                      6373  LetterN                   DC.B 'N'
00005403= 4F                      6374  LetterO                   DC.B 'O'
00005404= 50                      6375  LetterP                   DC.B 'P'
00005405= 51                      6376  LetterQ                   DC.B 'Q'
00005406= 52                      6377  LetterR                   DC.B 'R'
00005407= 53                      6378  LetterS                   DC.B 'S'
00005408= 54                      6379  LetterT                   DC.B 'T'
00005409= 55                      6380  LetterU                   DC.B 'U'
0000540A= 56                      6381  LetterV                   DC.B 'V'
0000540B= 57                      6382  LetterW                   DC.B 'W'
0000540C= 58                      6383  LetterX                   DC.B 'X'
0000540D= 59                      6384  LetterY                   DC.B 'Y'
0000540E= 5A                      6385  LetterZ                   DC.B 'Z'
0000540F= 30                      6386  Number0                   DC.B '0'
00005410= 31                      6387  Number1                   DC.B '1'
00005411= 32                      6388  Number2                   DC.B '2'
00005412= 33                      6389  Number3                   DC.B '3'
00005413= 34                      6390  Number4                   DC.B '4'
00005414= 35                      6391  Number5                   DC.B '5'
00005415= 36                      6392  Number6                   DC.B '6'
00005416= 37                      6393  Number7                   DC.B '7'
00005417= 38                      6394  Number8                   DC.B '8'
00005418= 39                      6395  Number9                   DC.B '9'
00005419= 28                      6396  LeftParen                 DC.B '('
0000541A= 29                      6397  RightParen                DC.B ')'
0000541B= 2B                      6398  Plus                      DC.B '+'
0000541C= 2D                      6399  Minus                     DC.B '-'
0000541D= 23                      6400  NumberSign                DC.B '#'
0000541E= 24                      6401  DollarSign                DC.B '$'
0000541F= 20                      6402  Space                     DC.B ' '
00005420= 2C                      6403  Comma                     DC.B ','
00005421= 2E                      6404  Period                    DC.B '.'
00005422= 2F                      6405  Slash                     DC.B '/'
00005423                          6406  
00005423                          6407     END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDBUFFER           183E
ADDR0               51A3
ADDR1               51A7
ADDR2               51AB
ADDR3               51AF
ADDR4               51B3
ADDR5               51B7
ADDR6               51BB
ADDR7               51BF
ADDRESSLENGTH       8
ALLEA               40CE
ARDECR0             522B
ARDECR1             5232
ARDECR2             5239
ARDECR3             5240
ARDECR4             5247
ARDECR5             524E
ARDECR6             5255
ARDECR7             525C
ARI0                51C3
ARI1                51C9
ARI2                51CF
ARI3                51D5
ARI4                51DB
ARI5                51E1
ARI6                51E7
ARI7                51ED
ARINCR0             51F3
ARINCR1             51FA
ARINCR2             5201
ARINCR3             5208
ARINCR4             520F
ARINCR5             5216
ARINCR6             521D
ARINCR7             5224
ASCIITOHEX          111C
ASCIITOHEXREGLIST   1
ASKFORNEXTCODE      11AE
ASSIGNSTARTADDRESS  1164
BCC0                4D84
BCC1                4D8C
BCC2                4D90
BCC3                4D94
BCC4                4D98
BCC5                4D9C
BCC6                4DA0
BCC7                4DA4
BCC8                4DA8
BCC9                4DAC
BCCA                4DB4
BCCB                4DBC
BCCC                4DC4
BCCD                4DCC
BCCE                4DD4
BCCF                4DDC
BCCNEXTLONG         4C1E
BCCNEXTWORD         4BD8
BREAKDATALOOP       1690
BUFFER              532C
BYTEREAD            50B8
CFGERRORNOTBIGGER   10FC
CFGERRORNOTFOUND    110C
CFGERRORODD         10DC
CFGERROROUTOFRANGE  10EC
CHECKA0             4912
CHECKA1             491C
CHECKA2             4926
CHECKA3             4930
CHECKA4             493A
CHECKA4EXCEED100    1422
CHECKA4EXCEEDA5     13F6
CHECKA5             4944
CHECKA5EXCEED100    140E
CHECKA6             494E
CHECKA7             4958
CHECKD0             4962
CHECKD1             496C
CHECKD1EXCEED100    1436
CHECKD2             4976
CHECKD3             4980
CHECKD4             498A
CHECKD5             4994
CHECKD6             499E
CHECKD7             49A8
CHECKDATA2HEX       1676
CHECKENDADDRESS     13FC
CHECKHEXPART        185A
CHECKLESSTHAN4HEX   1680
CHECKPRINTL         1A70
CHECKSHIFTLEFT      2E50
CHECKSHIFTRIGHT     2DFC
CHECKSLASH          48FA
CHRDONE             1138
CHRLOOP             1124
CLEAR               1548
COMMA               5420
COMPAREEAMODEADDA   41C0
COMPAREEAMODEADDV1  4102
COMPAREEAMODEADDV2  412E
COMPAREEAMODEASD    4B72
COMPAREEAMODEBCLRDYNAMIC  42B0
COMPAREEAMODEBCLRSTATIC  42F8
COMPAREEAMODECMP    4294
COMPAREEAMODEDIVS   43AA
COMPAREEAMODEEOR    4254
COMPAREEAMODEJSR    408C
COMPAREEAMODELEA    4178
COMPAREEAMODEMOVE   3FFC
COMPAREEAMODEMOVEA  40A0
COMPAREEAMODEMOVEMMEM  4690
COMPAREEAMODEMOVEMREG  4520
COMPAREEAMODEMULS   4376
COMPAREEAMODENEG    4346
COMPAREEAMODEOR     4224
COMPAREEAMODEORI    4440
COMPAREEAMODESHIFT2DATA  3F74
COMPAREEAMODESHIFTCOUNT  3FA0
COMPAREEAMODESHIFTEA  3FD4
COMPAREEAMODESUB    41EC
COMPAREEAMODESUBQ   43DE
COMPARELABELBCC     4BB8
CONFIG              50B9
CONVERTADDRESSTOSTRING  11D8
CONVERTTOBINARY     1468
COUNTDONE           505E
COUNTLOOP           504C
CR                  D
DATA0               5183
DATA1               5187
DATA2               518B
DATA3               518F
DATA4               5193
DATA5               5197
DATA6               519B
DATA7               519F
DATAARRAY           5264
DISPLACEMENTBYTE    4C96
DOEACHHEX           1270
DOLLARSIGN          541E
EALOADBITS          3EC6
EALOADBITSDESTINATIONFROMD0  3F0A
EALOADBITSREVDESTINATIONFROMD0  3F1C
EALOADBITSREVERSE   3EE8
EALOADBITSSOURCE    3F32
EALOADDISPLACEMENTBITS  4B9A
EAMODEADDRREG       4E38
EAMODEADDRREGWL     4E8C
EAMODEARINDIRECT    4E96
EAMODEDATAREG       4DE4
EAMODEDECREMENT     4EC0
EAMODEDIRECT        4ED0
EAMODEDIRECTLONG    4F40
EAMODEDIRECTORIMM   4EE4
EAMODEDIRECTWORD    4F00
EAMODEIMMEDIATE     4FB2
EAMODEIMMEDIATEBYTE  4FD8
EAMODEIMMEDIATELONG  5006
EAMODEIMMEDIATEWORD  5000
EAMODEINCREMENT     4EB0
EAPUSHTOD0          3F54
ENDINGADDRESS       50D2
EXTENDDATA          13D0
FILEID              50C4
FINDNULLLOOPDONE    502E
GET1112BIT11V2      1FC6
GET12BIT00          18A2
GET12BIT01          1E8E
GET12BIT10          25E4
GET12BIT11          2D04
GET2NDPARTOFHEX     189C
GET34BIT00          18C8
GET34BIT00V2        1EAE
GET34BIT00V3        2604
GET34BIT00V4        2D26
GET34BIT01V2        1EFA
GET34BIT01V4        2D4C
GET34BIT10          1914
GET34BIT10V2        1F16
GET34BIT10V4        2D76
GET34BIT11          192C
GET34BIT11V3        2640
GET56BIT00          1944
GET56BIT00V2PART2   1F26
GET56BIT01V2        1F36
GET56BIT10          1954
GET56BIT11          1964
GET56BIT11V2        1F46
GET56BIT1XV2        1F5E
GET78BIT00          1974
GET78BIT00V2        1F6E
GET78BIT00V2PART2   1F86
GET78BIT10V2        1F9E
GET78BITX0          1984
GET78BITX0PART2     1994
GET78BITXXV4PART2   2EA4
GET910BIT01V2       1FB6
GETDATA2BYTES       15B2
GETIMMEDIATEVALUE   4400
GETNEXT2BYTES       1596
GETNEXT2BYTESPOSTCHECK  15A4
GETNEXTHEX          1698
GETNEXTLONG         15D6
GETNEXTWORD         15C0
GETOPCODE           156C
HEX0                488A
HEX1                488E
HEX2                4892
HEX3                4896
HEX4                489A
HEX5                48A2
HEX6                48AA
HEX7                48B2
HEX8                48BA
HEX9                48C2
HEXA                48CA
HEXB                48D2
HEXC                48DA
HEXD                48E2
HEXE                48EA
HEXF                48F2
HEXTOBINARY         480A
INBETWEENADDRESS    50D0
LEAMETHOD           41AC
LEFTPAREN           5419
LETTERA             53F5
LETTERB             53F6
LETTERC             53F7
LETTERD             53F8
LETTERE             53F9
LETTERF             53FA
LETTERG             53FB
LETTERH             53FC
LETTERI             53FD
LETTERJ             53FE
LETTERK             53FF
LETTERL             5400
LETTERM             5401
LETTERN             5402
LETTERO             5403
LETTERP             5404
LETTERQ             5405
LETTERR             5406
LETTERS             5407
LETTERT             5408
LETTERU             5409
LETTERV             540A
LETTERW             540B
LETTERX             540C
LETTERY             540D
LETTERZ             540E
LF                  A
LOADIO              100E
MESSAGE1            50DA
MESSAGE2            50FF
MESSAGE3            512D
MESSAGE4            5168
MINUS               541C
MOVEMA0             49B2
MOVEMA1             49CE
MOVEMA2             49EA
MOVEMA3             4A06
MOVEMA4             4A22
MOVEMA5             4A3E
MOVEMA6             4A5A
MOVEMA7             4A76
MOVEMD0             4A92
MOVEMD1             4AAE
MOVEMD2             4ACA
MOVEMD3             4AE6
MOVEMD4             4B02
MOVEMD5             4B1E
MOVEMD6             4B3A
MOVEMD7             4B56
MOVEMMEMCHECK       47C8
MOVEMMEMEA          47E0
MOVEMMEMHEXCHECK    454C
MOVEMREGHEXCHECK    469C
MOVEMWORD           47FA
MOVEMWORDMEM        4802
MSG1                50A5
MSG2                50A9
NEWLINE             50A2
NULL                53F4
NULLLOOP            5020
NUMBER0             540F
NUMBER1             5410
NUMBER2             5411
NUMBER3             5412
NUMBER4             5413
NUMBER5             5414
NUMBER6             5415
NUMBER7             5416
NUMBER8             5417
NUMBER9             5418
NUMBERSIGN          541D
OPADD               2FC8
OPADDA              2F0E
OPADDAL             2F76
OPADDAW             2F24
OPADDB              301A
OPADDBV2            3060
OPADDL              3132
OPADDLV2            3178
OPADDW              30A6
OPADDWV2            30EC
OPASLMEM            31F4
OPASLREG            38E4
OPASLREGBI0         3A08
OPASLREGBI1         3936
OPASLREGI0          391A
OPASLREGI1          38FE
OPASLREGLI0         3A94
OPASLREGLI1         39C2
OPASLREGWI0         3A4E
OPASLREGWI1         397C
OPASRMEM            31BE
OPASRREG            3302
OPASRREGBI0         3426
OPASRREGBI1         3354
OPASRREGI0          3338
OPASRREGI1          331C
OPASRREGLI0         34B2
OPASRREGLI1         33E0
OPASRREGWI0         346C
OPASRREGWI1         339A
OPBCC               24A0
OPBCCPRINT          24D6
OPBCLRDYNAMIC       19A4
OPBCLRSTATIC        1A0A
OPBCS               250C
OPBGE               2542
OPBLT               2578
OPBRA               1FDE
OPBVC               25AE
OPCMPB              2BDE
OPCMPI              1A94
OPCMPIB             1AB2
OPCMPIL             1B62
OPCMPIW             1B0A
OPCMPL              2CA2
OPCMPW              2C40
OPDATA              1600
OPDIVSW             2990
OPEORB              2690
OPEORL              2750
OPEORW              26F0
OPISRREGBI0         361C
OPISRREGBI1         354A
OPISRREGI0          352E
OPISRREGI1          3512
OPISRREGLI0         36A8
OPISRREGLI1         35D6
OPISRREGWI0         3662
OPISRREGWI1         3590
OPJSR               23DE
OPLEA               2462
OPLSLMEM            3260
OPLSLREG            3ADA
OPLSLREGBI0         3BFE
OPLSLREGBI1         3B2C
OPLSLREGI0          3B10
OPLSLREGI1          3AF4
OPLSLREGLI0         3C8A
OPLSLREGLI1         3BB8
OPLSLREGWI0         3C44
OPLSLREGWI1         3B72
OPLSRMEM            322A
OPLSRREG            34F8
OPMOVEAL            1D1A
OPMOVEAW            1D7C
OPMOVEB             1CC2
OPMOVEEASOURCECHECK  4058
OPMOVEL             1DDE
OPMOVEML            2256
OPMOVEMLMEMTOREG    2380
OPMOVEMLREGTOMEM    22C4
OPMOVEMW            2246
OPMOVEMWMEMTOREG    2322
OPMOVEMWREGTOMEM    2266
OPMOVEW             1E36
OPMULS              2EB6
OPNEG               2148
OPNEGB              2168
OPNEGL              21FC
OPNEGW              21B2
OPNOP               2414
OPOR                27B0
OPORB               2828
OPORBV2             2864
OPORI               1BBA
OPORIB              1BD8
OPORIL              1C74
OPORIW              1C26
OPORL               2918
OPORLV2             2954
OPORW               28A0
OPORWV2             28DC
OPROLMEM            32CC
OPROLREG            3CD0
OPROLREGBI0         3DF4
OPROLREGBI1         3D22
OPROLREGI0          3D06
OPROLREGI1          3CEA
OPROLREGLI0         3E80
OPROLREGLI1         3DAE
OPROLREGWI0         3E3A
OPROLREGWI1         3D68
OPRORMEM            3296
OPRORREG            36EE
OPRORREGBI0         3812
OPRORREGBI1         3740
OPRORREGI0          3724
OPRORREGI1          3708
OPRORREGLI0         389E
OPRORREGLI1         37CC
OPRORREGWI0         3858
OPRORREGWI1         3786
OPRTS               2436
OPSUB               29E8
OPSUBB              2A3A
OPSUBBV2            2A80
OPSUBL              2B52
OPSUBLV2            2B98
OPSUBQ              2014
OPSUBQB             2046
OPSUBQL             20F2
OPSUBQW             209C
OPSUBW              2AC6
OPSUBWV2            2B0C
ORIGETNEXT          4490
ORILONG             44AA
ORIPRINTLONG        44B4
ORIWORD             44A0
OUTFILENAME         50AD
PERIOD              5421
PLUS                541B
PRINT16BITSTOHEX    4D00
PRINTB              1A88
PRINTBUFFER         1842
PRINTDATAHEX        16A2
PRINTL              1A7C
RESETA4             1454
RESETA5             144A
RESETD1             145E
RET_SA              1162
RIGHTPAREN          541A
SLASH               5422
SPACE               541F
START               1000
STARTCODE           118A
STARTINGADDRESS     50C8
STOPPROGRAM         1408
STORE0000           14E8
STORE0001           14EE
STORE0010           14F4
STORE0011           14FA
STORE0100           1500
STORE0101           1506
STORE0110           150C
STORE0111           1512
STORE1000           1518
STORE1001           151E
STORE1010           1524
STORE1011           152A
STORE1100           1530
STORE1101           1536
STORE1110           153C
STORE1111           1542
STOREHEX0           173E
STOREHEX1           174E
STOREHEX2           175E
STOREHEX3           176E
STOREHEX4           177E
STOREHEX5           178E
STOREHEX6           179E
STOREHEX7           17AE
STOREHEX8           17BE
STOREHEX9           17CE
STOREHEXA           17DE
STOREHEXB           17EE
STOREHEXC           17FE
STOREHEXD           180E
STOREHEXE           181E
STOREHEXF           182E
STRIP_ASCII         113E
SUB30               115E
SUB37               1156
TOSAVE              C3F
TRAPTASK13          500C
WRITE0              12F0
WRITE1              12FE
WRITE2              130C
WRITE3              131A
WRITE4              1328
WRITE5              1336
WRITE6              1344
WRITE7              1352
WRITE8              1360
WRITE9              136E
WRITEA              137C
WRITEB              138A
WRITEC              1398
WRITED              13A6
WRITEE              13B4
WRITEF              13C2
WRITESLASH          4904
_00000000           5042
